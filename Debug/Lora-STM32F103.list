
Lora-STM32F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091b4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  080092c8  080092c8  000192c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009760  08009760  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009760  08009760  00019760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009768  08009768  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009768  08009768  00019768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800976c  0800976c  0001976c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009770  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  200001d4  08009944  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  08009944  000204c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000efab  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000244b  00000000  00000000  0002f1eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f38  00000000  00000000  00031638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bde  00000000  00000000  00032570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000190b5  00000000  00000000  0003314e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011391  00000000  00000000  0004c203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e158  00000000  00000000  0005d594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005564  00000000  00000000  000eb6ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000f0c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080092ac 	.word	0x080092ac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080092ac 	.word	0x080092ac

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_uldivmod>:
 8001024:	b953      	cbnz	r3, 800103c <__aeabi_uldivmod+0x18>
 8001026:	b94a      	cbnz	r2, 800103c <__aeabi_uldivmod+0x18>
 8001028:	2900      	cmp	r1, #0
 800102a:	bf08      	it	eq
 800102c:	2800      	cmpeq	r0, #0
 800102e:	bf1c      	itt	ne
 8001030:	f04f 31ff 	movne.w	r1, #4294967295
 8001034:	f04f 30ff 	movne.w	r0, #4294967295
 8001038:	f000 b9aa 	b.w	8001390 <__aeabi_idiv0>
 800103c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001040:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001044:	f000 f83e 	bl	80010c4 <__udivmoddi4>
 8001048:	f8dd e004 	ldr.w	lr, [sp, #4]
 800104c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001050:	b004      	add	sp, #16
 8001052:	4770      	bx	lr

08001054 <__aeabi_d2lz>:
 8001054:	b538      	push	{r3, r4, r5, lr}
 8001056:	4605      	mov	r5, r0
 8001058:	460c      	mov	r4, r1
 800105a:	2200      	movs	r2, #0
 800105c:	2300      	movs	r3, #0
 800105e:	4628      	mov	r0, r5
 8001060:	4621      	mov	r1, r4
 8001062:	f7ff fcab 	bl	80009bc <__aeabi_dcmplt>
 8001066:	b928      	cbnz	r0, 8001074 <__aeabi_d2lz+0x20>
 8001068:	4628      	mov	r0, r5
 800106a:	4621      	mov	r1, r4
 800106c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001070:	f000 b80a 	b.w	8001088 <__aeabi_d2ulz>
 8001074:	4628      	mov	r0, r5
 8001076:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800107a:	f000 f805 	bl	8001088 <__aeabi_d2ulz>
 800107e:	4240      	negs	r0, r0
 8001080:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001084:	bd38      	pop	{r3, r4, r5, pc}
 8001086:	bf00      	nop

08001088 <__aeabi_d2ulz>:
 8001088:	b5d0      	push	{r4, r6, r7, lr}
 800108a:	2200      	movs	r2, #0
 800108c:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <__aeabi_d2ulz+0x34>)
 800108e:	4606      	mov	r6, r0
 8001090:	460f      	mov	r7, r1
 8001092:	f7ff fa21 	bl	80004d8 <__aeabi_dmul>
 8001096:	f7ff fcf7 	bl	8000a88 <__aeabi_d2uiz>
 800109a:	4604      	mov	r4, r0
 800109c:	f7ff f9a2 	bl	80003e4 <__aeabi_ui2d>
 80010a0:	2200      	movs	r2, #0
 80010a2:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <__aeabi_d2ulz+0x38>)
 80010a4:	f7ff fa18 	bl	80004d8 <__aeabi_dmul>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	4630      	mov	r0, r6
 80010ae:	4639      	mov	r1, r7
 80010b0:	f7ff f85a 	bl	8000168 <__aeabi_dsub>
 80010b4:	f7ff fce8 	bl	8000a88 <__aeabi_d2uiz>
 80010b8:	4621      	mov	r1, r4
 80010ba:	bdd0      	pop	{r4, r6, r7, pc}
 80010bc:	3df00000 	.word	0x3df00000
 80010c0:	41f00000 	.word	0x41f00000

080010c4 <__udivmoddi4>:
 80010c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010c8:	9e08      	ldr	r6, [sp, #32]
 80010ca:	460d      	mov	r5, r1
 80010cc:	4604      	mov	r4, r0
 80010ce:	468e      	mov	lr, r1
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d14c      	bne.n	800116e <__udivmoddi4+0xaa>
 80010d4:	428a      	cmp	r2, r1
 80010d6:	4694      	mov	ip, r2
 80010d8:	d967      	bls.n	80011aa <__udivmoddi4+0xe6>
 80010da:	fab2 f382 	clz	r3, r2
 80010de:	b153      	cbz	r3, 80010f6 <__udivmoddi4+0x32>
 80010e0:	fa02 fc03 	lsl.w	ip, r2, r3
 80010e4:	f1c3 0220 	rsb	r2, r3, #32
 80010e8:	fa01 fe03 	lsl.w	lr, r1, r3
 80010ec:	fa20 f202 	lsr.w	r2, r0, r2
 80010f0:	ea42 0e0e 	orr.w	lr, r2, lr
 80010f4:	409c      	lsls	r4, r3
 80010f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010fa:	fbbe f1f7 	udiv	r1, lr, r7
 80010fe:	fa1f f58c 	uxth.w	r5, ip
 8001102:	fb07 ee11 	mls	lr, r7, r1, lr
 8001106:	fb01 f005 	mul.w	r0, r1, r5
 800110a:	0c22      	lsrs	r2, r4, #16
 800110c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8001110:	4290      	cmp	r0, r2
 8001112:	d90a      	bls.n	800112a <__udivmoddi4+0x66>
 8001114:	eb1c 0202 	adds.w	r2, ip, r2
 8001118:	f101 3eff 	add.w	lr, r1, #4294967295
 800111c:	f080 8119 	bcs.w	8001352 <__udivmoddi4+0x28e>
 8001120:	4290      	cmp	r0, r2
 8001122:	f240 8116 	bls.w	8001352 <__udivmoddi4+0x28e>
 8001126:	3902      	subs	r1, #2
 8001128:	4462      	add	r2, ip
 800112a:	1a12      	subs	r2, r2, r0
 800112c:	fbb2 f0f7 	udiv	r0, r2, r7
 8001130:	fb07 2210 	mls	r2, r7, r0, r2
 8001134:	fb00 f505 	mul.w	r5, r0, r5
 8001138:	b2a4      	uxth	r4, r4
 800113a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800113e:	42a5      	cmp	r5, r4
 8001140:	d90a      	bls.n	8001158 <__udivmoddi4+0x94>
 8001142:	eb1c 0404 	adds.w	r4, ip, r4
 8001146:	f100 32ff 	add.w	r2, r0, #4294967295
 800114a:	f080 8104 	bcs.w	8001356 <__udivmoddi4+0x292>
 800114e:	42a5      	cmp	r5, r4
 8001150:	f240 8101 	bls.w	8001356 <__udivmoddi4+0x292>
 8001154:	4464      	add	r4, ip
 8001156:	3802      	subs	r0, #2
 8001158:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800115c:	2100      	movs	r1, #0
 800115e:	1b64      	subs	r4, r4, r5
 8001160:	b11e      	cbz	r6, 800116a <__udivmoddi4+0xa6>
 8001162:	40dc      	lsrs	r4, r3
 8001164:	2300      	movs	r3, #0
 8001166:	e9c6 4300 	strd	r4, r3, [r6]
 800116a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800116e:	428b      	cmp	r3, r1
 8001170:	d908      	bls.n	8001184 <__udivmoddi4+0xc0>
 8001172:	2e00      	cmp	r6, #0
 8001174:	f000 80ea 	beq.w	800134c <__udivmoddi4+0x288>
 8001178:	2100      	movs	r1, #0
 800117a:	e9c6 0500 	strd	r0, r5, [r6]
 800117e:	4608      	mov	r0, r1
 8001180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001184:	fab3 f183 	clz	r1, r3
 8001188:	2900      	cmp	r1, #0
 800118a:	d148      	bne.n	800121e <__udivmoddi4+0x15a>
 800118c:	42ab      	cmp	r3, r5
 800118e:	d302      	bcc.n	8001196 <__udivmoddi4+0xd2>
 8001190:	4282      	cmp	r2, r0
 8001192:	f200 80f8 	bhi.w	8001386 <__udivmoddi4+0x2c2>
 8001196:	1a84      	subs	r4, r0, r2
 8001198:	eb65 0203 	sbc.w	r2, r5, r3
 800119c:	2001      	movs	r0, #1
 800119e:	4696      	mov	lr, r2
 80011a0:	2e00      	cmp	r6, #0
 80011a2:	d0e2      	beq.n	800116a <__udivmoddi4+0xa6>
 80011a4:	e9c6 4e00 	strd	r4, lr, [r6]
 80011a8:	e7df      	b.n	800116a <__udivmoddi4+0xa6>
 80011aa:	b902      	cbnz	r2, 80011ae <__udivmoddi4+0xea>
 80011ac:	deff      	udf	#255	; 0xff
 80011ae:	fab2 f382 	clz	r3, r2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	f040 808e 	bne.w	80012d4 <__udivmoddi4+0x210>
 80011b8:	1a88      	subs	r0, r1, r2
 80011ba:	2101      	movs	r1, #1
 80011bc:	0c17      	lsrs	r7, r2, #16
 80011be:	fa1f fe82 	uxth.w	lr, r2
 80011c2:	fbb0 f5f7 	udiv	r5, r0, r7
 80011c6:	fb07 0015 	mls	r0, r7, r5, r0
 80011ca:	0c22      	lsrs	r2, r4, #16
 80011cc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80011d0:	fb0e f005 	mul.w	r0, lr, r5
 80011d4:	4290      	cmp	r0, r2
 80011d6:	d908      	bls.n	80011ea <__udivmoddi4+0x126>
 80011d8:	eb1c 0202 	adds.w	r2, ip, r2
 80011dc:	f105 38ff 	add.w	r8, r5, #4294967295
 80011e0:	d202      	bcs.n	80011e8 <__udivmoddi4+0x124>
 80011e2:	4290      	cmp	r0, r2
 80011e4:	f200 80cc 	bhi.w	8001380 <__udivmoddi4+0x2bc>
 80011e8:	4645      	mov	r5, r8
 80011ea:	1a12      	subs	r2, r2, r0
 80011ec:	fbb2 f0f7 	udiv	r0, r2, r7
 80011f0:	fb07 2210 	mls	r2, r7, r0, r2
 80011f4:	fb0e fe00 	mul.w	lr, lr, r0
 80011f8:	b2a4      	uxth	r4, r4
 80011fa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80011fe:	45a6      	cmp	lr, r4
 8001200:	d908      	bls.n	8001214 <__udivmoddi4+0x150>
 8001202:	eb1c 0404 	adds.w	r4, ip, r4
 8001206:	f100 32ff 	add.w	r2, r0, #4294967295
 800120a:	d202      	bcs.n	8001212 <__udivmoddi4+0x14e>
 800120c:	45a6      	cmp	lr, r4
 800120e:	f200 80b4 	bhi.w	800137a <__udivmoddi4+0x2b6>
 8001212:	4610      	mov	r0, r2
 8001214:	eba4 040e 	sub.w	r4, r4, lr
 8001218:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800121c:	e7a0      	b.n	8001160 <__udivmoddi4+0x9c>
 800121e:	f1c1 0720 	rsb	r7, r1, #32
 8001222:	408b      	lsls	r3, r1
 8001224:	fa22 fc07 	lsr.w	ip, r2, r7
 8001228:	ea4c 0c03 	orr.w	ip, ip, r3
 800122c:	fa25 fa07 	lsr.w	sl, r5, r7
 8001230:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001234:	fbba f8f9 	udiv	r8, sl, r9
 8001238:	408d      	lsls	r5, r1
 800123a:	fa20 f307 	lsr.w	r3, r0, r7
 800123e:	fb09 aa18 	mls	sl, r9, r8, sl
 8001242:	fa1f fe8c 	uxth.w	lr, ip
 8001246:	432b      	orrs	r3, r5
 8001248:	fa00 f501 	lsl.w	r5, r0, r1
 800124c:	fb08 f00e 	mul.w	r0, r8, lr
 8001250:	0c1c      	lsrs	r4, r3, #16
 8001252:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001256:	42a0      	cmp	r0, r4
 8001258:	fa02 f201 	lsl.w	r2, r2, r1
 800125c:	d90b      	bls.n	8001276 <__udivmoddi4+0x1b2>
 800125e:	eb1c 0404 	adds.w	r4, ip, r4
 8001262:	f108 3aff 	add.w	sl, r8, #4294967295
 8001266:	f080 8086 	bcs.w	8001376 <__udivmoddi4+0x2b2>
 800126a:	42a0      	cmp	r0, r4
 800126c:	f240 8083 	bls.w	8001376 <__udivmoddi4+0x2b2>
 8001270:	f1a8 0802 	sub.w	r8, r8, #2
 8001274:	4464      	add	r4, ip
 8001276:	1a24      	subs	r4, r4, r0
 8001278:	b298      	uxth	r0, r3
 800127a:	fbb4 f3f9 	udiv	r3, r4, r9
 800127e:	fb09 4413 	mls	r4, r9, r3, r4
 8001282:	fb03 fe0e 	mul.w	lr, r3, lr
 8001286:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800128a:	45a6      	cmp	lr, r4
 800128c:	d908      	bls.n	80012a0 <__udivmoddi4+0x1dc>
 800128e:	eb1c 0404 	adds.w	r4, ip, r4
 8001292:	f103 30ff 	add.w	r0, r3, #4294967295
 8001296:	d26a      	bcs.n	800136e <__udivmoddi4+0x2aa>
 8001298:	45a6      	cmp	lr, r4
 800129a:	d968      	bls.n	800136e <__udivmoddi4+0x2aa>
 800129c:	3b02      	subs	r3, #2
 800129e:	4464      	add	r4, ip
 80012a0:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80012a4:	fba0 9302 	umull	r9, r3, r0, r2
 80012a8:	eba4 040e 	sub.w	r4, r4, lr
 80012ac:	429c      	cmp	r4, r3
 80012ae:	46c8      	mov	r8, r9
 80012b0:	469e      	mov	lr, r3
 80012b2:	d354      	bcc.n	800135e <__udivmoddi4+0x29a>
 80012b4:	d051      	beq.n	800135a <__udivmoddi4+0x296>
 80012b6:	2e00      	cmp	r6, #0
 80012b8:	d067      	beq.n	800138a <__udivmoddi4+0x2c6>
 80012ba:	ebb5 0308 	subs.w	r3, r5, r8
 80012be:	eb64 040e 	sbc.w	r4, r4, lr
 80012c2:	40cb      	lsrs	r3, r1
 80012c4:	fa04 f707 	lsl.w	r7, r4, r7
 80012c8:	431f      	orrs	r7, r3
 80012ca:	40cc      	lsrs	r4, r1
 80012cc:	e9c6 7400 	strd	r7, r4, [r6]
 80012d0:	2100      	movs	r1, #0
 80012d2:	e74a      	b.n	800116a <__udivmoddi4+0xa6>
 80012d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80012d8:	f1c3 0020 	rsb	r0, r3, #32
 80012dc:	40c1      	lsrs	r1, r0
 80012de:	409d      	lsls	r5, r3
 80012e0:	fa24 f000 	lsr.w	r0, r4, r0
 80012e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012e8:	4328      	orrs	r0, r5
 80012ea:	fbb1 f5f7 	udiv	r5, r1, r7
 80012ee:	fb07 1115 	mls	r1, r7, r5, r1
 80012f2:	fa1f fe8c 	uxth.w	lr, ip
 80012f6:	0c02      	lsrs	r2, r0, #16
 80012f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80012fc:	fb05 f10e 	mul.w	r1, r5, lr
 8001300:	4291      	cmp	r1, r2
 8001302:	fa04 f403 	lsl.w	r4, r4, r3
 8001306:	d908      	bls.n	800131a <__udivmoddi4+0x256>
 8001308:	eb1c 0202 	adds.w	r2, ip, r2
 800130c:	f105 38ff 	add.w	r8, r5, #4294967295
 8001310:	d22f      	bcs.n	8001372 <__udivmoddi4+0x2ae>
 8001312:	4291      	cmp	r1, r2
 8001314:	d92d      	bls.n	8001372 <__udivmoddi4+0x2ae>
 8001316:	3d02      	subs	r5, #2
 8001318:	4462      	add	r2, ip
 800131a:	1a52      	subs	r2, r2, r1
 800131c:	fbb2 f1f7 	udiv	r1, r2, r7
 8001320:	fb07 2211 	mls	r2, r7, r1, r2
 8001324:	b280      	uxth	r0, r0
 8001326:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800132a:	fb01 f20e 	mul.w	r2, r1, lr
 800132e:	4282      	cmp	r2, r0
 8001330:	d908      	bls.n	8001344 <__udivmoddi4+0x280>
 8001332:	eb1c 0000 	adds.w	r0, ip, r0
 8001336:	f101 38ff 	add.w	r8, r1, #4294967295
 800133a:	d216      	bcs.n	800136a <__udivmoddi4+0x2a6>
 800133c:	4282      	cmp	r2, r0
 800133e:	d914      	bls.n	800136a <__udivmoddi4+0x2a6>
 8001340:	3902      	subs	r1, #2
 8001342:	4460      	add	r0, ip
 8001344:	1a80      	subs	r0, r0, r2
 8001346:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800134a:	e73a      	b.n	80011c2 <__udivmoddi4+0xfe>
 800134c:	4631      	mov	r1, r6
 800134e:	4630      	mov	r0, r6
 8001350:	e70b      	b.n	800116a <__udivmoddi4+0xa6>
 8001352:	4671      	mov	r1, lr
 8001354:	e6e9      	b.n	800112a <__udivmoddi4+0x66>
 8001356:	4610      	mov	r0, r2
 8001358:	e6fe      	b.n	8001158 <__udivmoddi4+0x94>
 800135a:	454d      	cmp	r5, r9
 800135c:	d2ab      	bcs.n	80012b6 <__udivmoddi4+0x1f2>
 800135e:	ebb9 0802 	subs.w	r8, r9, r2
 8001362:	eb63 0e0c 	sbc.w	lr, r3, ip
 8001366:	3801      	subs	r0, #1
 8001368:	e7a5      	b.n	80012b6 <__udivmoddi4+0x1f2>
 800136a:	4641      	mov	r1, r8
 800136c:	e7ea      	b.n	8001344 <__udivmoddi4+0x280>
 800136e:	4603      	mov	r3, r0
 8001370:	e796      	b.n	80012a0 <__udivmoddi4+0x1dc>
 8001372:	4645      	mov	r5, r8
 8001374:	e7d1      	b.n	800131a <__udivmoddi4+0x256>
 8001376:	46d0      	mov	r8, sl
 8001378:	e77d      	b.n	8001276 <__udivmoddi4+0x1b2>
 800137a:	4464      	add	r4, ip
 800137c:	3802      	subs	r0, #2
 800137e:	e749      	b.n	8001214 <__udivmoddi4+0x150>
 8001380:	3d02      	subs	r5, #2
 8001382:	4462      	add	r2, ip
 8001384:	e731      	b.n	80011ea <__udivmoddi4+0x126>
 8001386:	4608      	mov	r0, r1
 8001388:	e70a      	b.n	80011a0 <__udivmoddi4+0xdc>
 800138a:	4631      	mov	r1, r6
 800138c:	e6ed      	b.n	800116a <__udivmoddi4+0xa6>
 800138e:	bf00      	nop

08001390 <__aeabi_idiv0>:
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop

08001394 <Set_Pin_Output>:
#include "DHT11.h"
void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80013a0:	f107 0308 	add.w	r3, r7, #8
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80013ae:	887b      	ldrh	r3, [r7, #2]
 80013b0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b2:	2301      	movs	r3, #1
 80013b4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2302      	movs	r3, #2
 80013b8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80013ba:	f107 0308 	add.w	r3, r7, #8
 80013be:	4619      	mov	r1, r3
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f001 f981 	bl	80026c8 <HAL_GPIO_Init>
}
 80013c6:	bf00      	nop
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <Set_Pin_Input>:
void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b086      	sub	sp, #24
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	460b      	mov	r3, r1
 80013d8:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80013da:	f107 0308 	add.w	r3, r7, #8
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80013e8:	887b      	ldrh	r3, [r7, #2]
 80013ea:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013f0:	2301      	movs	r3, #1
 80013f2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80013f4:	f107 0308 	add.w	r3, r7, #8
 80013f8:	4619      	mov	r1, r3
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f001 f964 	bl	80026c8 <HAL_GPIO_Init>
}
 8001400:	bf00      	nop
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <DHT11_Init>:
void DHT11_Init(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	807b      	strh	r3, [r7, #2]
	Set_Pin_Output(GPIOA, GPIO_PIN_1); //set PA1 ouput to pull down in 18ms
 8001414:	2102      	movs	r1, #2
 8001416:	480f      	ldr	r0, [pc, #60]	; (8001454 <DHT11_Init+0x4c>)
 8001418:	f7ff ffbc 	bl	8001394 <Set_Pin_Output>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, 0); //pull down in 18ms
 800141c:	887b      	ldrh	r3, [r7, #2]
 800141e:	2200      	movs	r2, #0
 8001420:	4619      	mov	r1, r3
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f001 faeb 	bl	80029fe <HAL_GPIO_WritePin>
	delay_us(18000); //18ms
 8001428:	f244 6050 	movw	r0, #18000	; 0x4650
 800142c:	f000 fa88 	bl	8001940 <delay_us>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, 1);
 8001430:	887b      	ldrh	r3, [r7, #2]
 8001432:	2201      	movs	r2, #1
 8001434:	4619      	mov	r1, r3
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f001 fae1 	bl	80029fe <HAL_GPIO_WritePin>
	delay_us(20); //pull wait
 800143c:	2014      	movs	r0, #20
 800143e:	f000 fa7f 	bl	8001940 <delay_us>
	Set_Pin_Input(GPIOx, GPIO_Pin);
 8001442:	887b      	ldrh	r3, [r7, #2]
 8001444:	4619      	mov	r1, r3
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff ffc1 	bl	80013ce <Set_Pin_Input>
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40010800 	.word	0x40010800

08001458 <DHT11_CheckRespone>:
uint8_t DHT11_CheckRespone(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	807b      	strh	r3, [r7, #2]
	uint8_t Respone = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	73fb      	strb	r3, [r7, #15]
	delay_us(40); //point middle low
 8001468:	2028      	movs	r0, #40	; 0x28
 800146a:	f000 fa69 	bl	8001940 <delay_us>
	if (!HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)) {
 800146e:	887b      	ldrh	r3, [r7, #2]
 8001470:	4619      	mov	r1, r3
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f001 faac 	bl	80029d0 <HAL_GPIO_ReadPin>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10f      	bne.n	800149e <DHT11_CheckRespone+0x46>
		delay_us(80); //point middle high
 800147e:	2050      	movs	r0, #80	; 0x50
 8001480:	f000 fa5e 	bl	8001940 <delay_us>
		if (!HAL_GPIO_ReadPin(GPIOx, GPIO_Pin))
 8001484:	887b      	ldrh	r3, [r7, #2]
 8001486:	4619      	mov	r1, r3
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f001 faa1 	bl	80029d0 <HAL_GPIO_ReadPin>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d102      	bne.n	800149a <DHT11_CheckRespone+0x42>
			Respone = 1;
 8001494:	2301      	movs	r3, #1
 8001496:	73fb      	strb	r3, [r7, #15]
 8001498:	e001      	b.n	800149e <DHT11_CheckRespone+0x46>
		else
			Respone = -1;
 800149a:	23ff      	movs	r3, #255	; 0xff
 800149c:	73fb      	strb	r3, [r7, #15]
	}
		uint32_t timeout = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
		while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin))
 80014a2:	e005      	b.n	80014b0 <DHT11_CheckRespone+0x58>
			if (timeout++ > 1160 * 4 * 2)
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	1c5a      	adds	r2, r3, #1
 80014a8:	60ba      	str	r2, [r7, #8]
 80014aa:	f5b3 5f11 	cmp.w	r3, #9280	; 0x2440
 80014ae:	d808      	bhi.n	80014c2 <DHT11_CheckRespone+0x6a>
		while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin))
 80014b0:	887b      	ldrh	r3, [r7, #2]
 80014b2:	4619      	mov	r1, r3
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f001 fa8b 	bl	80029d0 <HAL_GPIO_ReadPin>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1f1      	bne.n	80014a4 <DHT11_CheckRespone+0x4c>
 80014c0:	e000      	b.n	80014c4 <DHT11_CheckRespone+0x6c>
				break; //wait to go low
 80014c2:	bf00      	nop

	return Respone;
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <DHT11_ReadData>:
uint8_t DHT11_ReadData(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b084      	sub	sp, #16
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
 80014d6:	460b      	mov	r3, r1
 80014d8:	807b      	strh	r3, [r7, #2]

	uint8_t i, j;
	for (j = 0; j < 8; j++) {
 80014da:	2300      	movs	r3, #0
 80014dc:	73bb      	strb	r3, [r7, #14]
 80014de:	e04e      	b.n	800157e <DHT11_ReadData+0xb0>
		uint32_t timeout = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60bb      	str	r3, [r7, #8]
		while (!(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)))
 80014e4:	e005      	b.n	80014f2 <DHT11_ReadData+0x24>
			if (timeout++ > 1160 * 4 * 2)
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	1c5a      	adds	r2, r3, #1
 80014ea:	60ba      	str	r2, [r7, #8]
 80014ec:	f5b3 5f11 	cmp.w	r3, #9280	; 0x2440
 80014f0:	d808      	bhi.n	8001504 <DHT11_ReadData+0x36>
		while (!(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)))
 80014f2:	887b      	ldrh	r3, [r7, #2]
 80014f4:	4619      	mov	r1, r3
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f001 fa6a 	bl	80029d0 <HAL_GPIO_ReadPin>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d0f1      	beq.n	80014e6 <DHT11_ReadData+0x18>
 8001502:	e000      	b.n	8001506 <DHT11_ReadData+0x38>
				break; // wait for the pin to go high
 8001504:	bf00      	nop
		delay_us(40);   // wait for 40 us
 8001506:	2028      	movs	r0, #40	; 0x28
 8001508:	f000 fa1a 	bl	8001940 <delay_us>
		if (!(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin))) // if the pin is low
 800150c:	887b      	ldrh	r3, [r7, #2]
 800150e:	4619      	mov	r1, r3
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f001 fa5d 	bl	80029d0 <HAL_GPIO_ReadPin>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d10e      	bne.n	800153a <DHT11_ReadData+0x6c>
		{
			i &= ~(1 << (7 - j));   // write 0
 800151c:	7bbb      	ldrb	r3, [r7, #14]
 800151e:	f1c3 0307 	rsb	r3, r3, #7
 8001522:	2201      	movs	r2, #1
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	b25b      	sxtb	r3, r3
 800152a:	43db      	mvns	r3, r3
 800152c:	b25a      	sxtb	r2, r3
 800152e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001532:	4013      	ands	r3, r2
 8001534:	b25b      	sxtb	r3, r3
 8001536:	73fb      	strb	r3, [r7, #15]
 8001538:	e00b      	b.n	8001552 <DHT11_ReadData+0x84>
		} else
			i |= (1 << (7 - j));  // if the pin is high, write 1
 800153a:	7bbb      	ldrb	r3, [r7, #14]
 800153c:	f1c3 0307 	rsb	r3, r3, #7
 8001540:	2201      	movs	r2, #1
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	b25a      	sxtb	r2, r3
 8001548:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800154c:	4313      	orrs	r3, r2
 800154e:	b25b      	sxtb	r3, r3
 8001550:	73fb      	strb	r3, [r7, #15]
		timeout = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	60bb      	str	r3, [r7, #8]
		while ((HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)))
 8001556:	e005      	b.n	8001564 <DHT11_ReadData+0x96>
				if (timeout++ > 1160 * 4 * 2)
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	1c5a      	adds	r2, r3, #1
 800155c:	60ba      	str	r2, [r7, #8]
 800155e:	f5b3 5f11 	cmp.w	r3, #9280	; 0x2440
 8001562:	d808      	bhi.n	8001576 <DHT11_ReadData+0xa8>
		while ((HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)))
 8001564:	887b      	ldrh	r3, [r7, #2]
 8001566:	4619      	mov	r1, r3
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f001 fa31 	bl	80029d0 <HAL_GPIO_ReadPin>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1f1      	bne.n	8001558 <DHT11_ReadData+0x8a>
 8001574:	e000      	b.n	8001578 <DHT11_ReadData+0xaa>
				break;  // wait for the pin to go low
 8001576:	bf00      	nop
	for (j = 0; j < 8; j++) {
 8001578:	7bbb      	ldrb	r3, [r7, #14]
 800157a:	3301      	adds	r3, #1
 800157c:	73bb      	strb	r3, [r7, #14]
 800157e:	7bbb      	ldrb	r3, [r7, #14]
 8001580:	2b07      	cmp	r3, #7
 8001582:	d9ad      	bls.n	80014e0 <DHT11_ReadData+0x12>
	}

	return i;
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	4618      	mov	r0, r3
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <lora_read_reg>:
#include "lora.h"
#include <string.h>

uint8_t packetIndex;

uint8_t lora_read_reg(lora_t * module, uint8_t addr) {
 800158e:	b580      	push	{r7, lr}
 8001590:	b084      	sub	sp, #16
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
 8001596:	460b      	mov	r3, r1
 8001598:	70fb      	strb	r3, [r7, #3]
	uint8_t txByte = addr & 0x7f;
 800159a:	78fb      	ldrb	r3, [r7, #3]
 800159c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 80015a4:	2300      	movs	r3, #0
 80015a6:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_RESET);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6958      	ldr	r0, [r3, #20]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	2200      	movs	r2, #0
 80015b8:	4619      	mov	r1, r3
 80015ba:	f001 fa20 	bl	80029fe <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(module->pin->spi, &txByte, 1, 1000);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	6998      	ldr	r0, [r3, #24]
 80015c4:	f107 010f 	add.w	r1, r7, #15
 80015c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015cc:	2201      	movs	r2, #1
 80015ce:	f001 fee5 	bl	800339c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 80015d2:	bf00      	nop
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	4618      	mov	r0, r3
 80015dc:	f002 fbd1 	bl	8003d82 <HAL_SPI_GetState>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d1f6      	bne.n	80015d4 <lora_read_reg+0x46>
	
	HAL_SPI_Receive(module->pin->spi,&rxByte, 1, 1000);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6998      	ldr	r0, [r3, #24]
 80015ec:	f107 010e 	add.w	r1, r7, #14
 80015f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f4:	2201      	movs	r2, #1
 80015f6:	f002 f814 	bl	8003622 <HAL_SPI_Receive>
	while(HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 80015fa:	bf00      	nop
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	4618      	mov	r0, r3
 8001604:	f002 fbbd 	bl	8003d82 <HAL_SPI_GetState>
 8001608:	4603      	mov	r3, r0
 800160a:	2b01      	cmp	r3, #1
 800160c:	d1f6      	bne.n	80015fc <lora_read_reg+0x6e>
	HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_SET);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6958      	ldr	r0, [r3, #20]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	b29b      	uxth	r3, r3
 800161c:	2201      	movs	r2, #1
 800161e:	4619      	mov	r1, r3
 8001620:	f001 f9ed 	bl	80029fe <HAL_GPIO_WritePin>
	return rxByte;
 8001624:	7bbb      	ldrb	r3, [r7, #14]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <lora_write_reg>:

void lora_write_reg(lora_t * module, uint8_t addr, uint8_t cmd){
 800162e:	b580      	push	{r7, lr}
 8001630:	b084      	sub	sp, #16
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	460b      	mov	r3, r1
 8001638:	70fb      	strb	r3, [r7, #3]
 800163a:	4613      	mov	r3, r2
 800163c:	70bb      	strb	r3, [r7, #2]
	uint8_t add = addr | 0x80;
 800163e:	78fb      	ldrb	r3, [r7, #3]
 8001640:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001644:	b2db      	uxtb	r3, r3
 8001646:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_RESET);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6958      	ldr	r0, [r3, #20]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	b29b      	uxth	r3, r3
 8001656:	2200      	movs	r2, #0
 8001658:	4619      	mov	r1, r3
 800165a:	f001 f9d0 	bl	80029fe <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(module->pin->spi, &add, 1, 1000);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6998      	ldr	r0, [r3, #24]
 8001664:	f107 010f 	add.w	r1, r7, #15
 8001668:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166c:	2201      	movs	r2, #1
 800166e:	f001 fe95 	bl	800339c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 8001672:	bf00      	nop
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	4618      	mov	r0, r3
 800167c:	f002 fb81 	bl	8003d82 <HAL_SPI_GetState>
 8001680:	4603      	mov	r3, r0
 8001682:	2b01      	cmp	r3, #1
 8001684:	d1f6      	bne.n	8001674 <lora_write_reg+0x46>
	HAL_SPI_Transmit(module->pin->spi, &cmd, 1, 1000);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6998      	ldr	r0, [r3, #24]
 800168c:	1cb9      	adds	r1, r7, #2
 800168e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001692:	2201      	movs	r2, #1
 8001694:	f001 fe82 	bl	800339c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 8001698:	bf00      	nop
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f002 fb6e 	bl	8003d82 <HAL_SPI_GetState>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d1f6      	bne.n	800169a <lora_write_reg+0x6c>
	HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_SET);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6958      	ldr	r0, [r3, #20]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	2201      	movs	r2, #1
 80016bc:	4619      	mov	r1, r3
 80016be:	f001 f99e 	bl	80029fe <HAL_GPIO_WritePin>
}
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <lora_init>:

uint8_t lora_init(lora_t * module){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	uint8_t ret;
	HAL_GPIO_WritePin(module->pin->reset.port, module->pin->reset.pin, GPIO_PIN_RESET);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6858      	ldr	r0, [r3, #4]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	2200      	movs	r2, #0
 80016e4:	4619      	mov	r1, r3
 80016e6:	f001 f98a 	bl	80029fe <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80016ea:	200a      	movs	r0, #10
 80016ec:	f000 fe42 	bl	8002374 <HAL_Delay>
  HAL_GPIO_WritePin(module->pin->reset.port, module->pin->reset.pin, GPIO_PIN_SET);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6858      	ldr	r0, [r3, #4]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	2201      	movs	r2, #1
 8001700:	4619      	mov	r1, r3
 8001702:	f001 f97c 	bl	80029fe <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8001706:	200a      	movs	r0, #10
 8001708:	f000 fe34 	bl	8002374 <HAL_Delay>
	
	ret = lora_read_reg(module, REG_VERSION);
 800170c:	2142      	movs	r1, #66	; 0x42
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff ff3d 	bl	800158e <lora_read_reg>
 8001714:	4603      	mov	r3, r0
 8001716:	73fb      	strb	r3, [r7, #15]
	if(ret != 0x12){
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	2b12      	cmp	r3, #18
 800171c:	d001      	beq.n	8001722 <lora_init+0x56>
		return 1;
 800171e:	2301      	movs	r3, #1
 8001720:	e037      	b.n	8001792 <lora_init+0xc6>
	}
	lora_write_reg(module, REG_OP_MODE, (MODE_LONG_RANGE_MODE | MODE_SLEEP));
 8001722:	2280      	movs	r2, #128	; 0x80
 8001724:	2101      	movs	r1, #1
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff ff81 	bl	800162e <lora_write_reg>
	//lora_write_reg(module, REG_FRF_MSB, 0x6C);
	//lora_write_reg(module, REG_FRF_MID, 0x40);
	//lora_write_reg(module, REG_FRF_LSB, 0x00);
	lora_set_frequency(module, FREQUENCY[module->frequency]);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	791b      	ldrb	r3, [r3, #4]
 8001730:	4a1a      	ldr	r2, [pc, #104]	; (800179c <lora_init+0xd0>)
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	4413      	add	r3, r2
 8001736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 f8ba 	bl	80018b4 <lora_set_frequency>
	lora_write_reg(module, REG_FIFO_TX_BASE_ADDR, 0);
 8001740:	2200      	movs	r2, #0
 8001742:	210e      	movs	r1, #14
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff ff72 	bl	800162e <lora_write_reg>
	lora_write_reg(module, REG_FIFO_RX_BASE_ADDR, 0);
 800174a:	2200      	movs	r2, #0
 800174c:	210f      	movs	r1, #15
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff ff6d 	bl	800162e <lora_write_reg>
	ret = lora_read_reg(module, REG_LNA);
 8001754:	210c      	movs	r1, #12
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff ff19 	bl	800158e <lora_read_reg>
 800175c:	4603      	mov	r3, r0
 800175e:	73fb      	strb	r3, [r7, #15]
	lora_write_reg(module, REG_LNA, ret | 0x03);
 8001760:	7bfb      	ldrb	r3, [r7, #15]
 8001762:	f043 0303 	orr.w	r3, r3, #3
 8001766:	b2db      	uxtb	r3, r3
 8001768:	461a      	mov	r2, r3
 800176a:	210c      	movs	r1, #12
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff ff5e 	bl	800162e <lora_write_reg>
	lora_write_reg(module, REG_MODEM_CONFIG_3, 0x04);
 8001772:	2204      	movs	r2, #4
 8001774:	2126      	movs	r1, #38	; 0x26
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff ff59 	bl	800162e <lora_write_reg>
	lora_write_reg(module, REG_PA_CONFIG, 0x8f);
 800177c:	228f      	movs	r2, #143	; 0x8f
 800177e:	2109      	movs	r1, #9
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff ff54 	bl	800162e <lora_write_reg>
	lora_write_reg(module, REG_OP_MODE, (MODE_LONG_RANGE_MODE | MODE_STDBY));
 8001786:	2281      	movs	r2, #129	; 0x81
 8001788:	2101      	movs	r1, #1
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff ff4f 	bl	800162e <lora_write_reg>
	return 0;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	080092e8 	.word	0x080092e8

080017a0 <lora_begin_packet>:
		return 0;
	packetIndex++;
	return lora_read_reg(module, REG_FIFO);
}

uint8_t lora_begin_packet(lora_t * module){
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	//int ret;
	if ((lora_read_reg(module, REG_OP_MODE) & MODE_TX) == MODE_TX) {
 80017a8:	2101      	movs	r1, #1
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff feef 	bl	800158e <lora_read_reg>
 80017b0:	4603      	mov	r3, r0
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	2b03      	cmp	r3, #3
 80017b8:	d101      	bne.n	80017be <lora_begin_packet+0x1e>
    return 1;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e014      	b.n	80017e8 <lora_begin_packet+0x48>
  }
	lora_write_reg(module, REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 80017be:	2281      	movs	r2, #129	; 0x81
 80017c0:	2101      	movs	r1, #1
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff ff33 	bl	800162e <lora_write_reg>
	lora_write_reg(module, REG_MODEM_CONFIG_1, 0x72);
 80017c8:	2272      	movs	r2, #114	; 0x72
 80017ca:	211d      	movs	r1, #29
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff ff2e 	bl	800162e <lora_write_reg>
	lora_write_reg(module, REG_FIFO_ADDR_PTR, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	210d      	movs	r1, #13
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff ff29 	bl	800162e <lora_write_reg>
  lora_write_reg(module, REG_PAYLOAD_LENGTH, 0);
 80017dc:	2200      	movs	r2, #0
 80017de:	2122      	movs	r1, #34	; 0x22
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff ff24 	bl	800162e <lora_write_reg>
	return 0;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <lora_tx>:

void lora_tx(lora_t * module, uint8_t * buf, uint8_t size){
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	4613      	mov	r3, r2
 80017fc:	71fb      	strb	r3, [r7, #7]
	int currentLength = lora_read_reg(module, REG_PAYLOAD_LENGTH);
 80017fe:	2122      	movs	r1, #34	; 0x22
 8001800:	68f8      	ldr	r0, [r7, #12]
 8001802:	f7ff fec4 	bl	800158e <lora_read_reg>
 8001806:	4603      	mov	r3, r0
 8001808:	613b      	str	r3, [r7, #16]
  if ((currentLength + size > MAX_PKT_LENGTH)){
 800180a:	79fa      	ldrb	r2, [r7, #7]
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	4413      	add	r3, r2
 8001810:	2bff      	cmp	r3, #255	; 0xff
 8001812:	dd03      	ble.n	800181c <lora_tx+0x2c>
    size = MAX_PKT_LENGTH - currentLength;
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	b2db      	uxtb	r3, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	71fb      	strb	r3, [r7, #7]
  }

  for (int i = 0; i < size; i++) {
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	e00b      	b.n	800183a <lora_tx+0x4a>
    lora_write_reg(module, REG_FIFO, buf[i]);
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	68ba      	ldr	r2, [r7, #8]
 8001826:	4413      	add	r3, r2
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	461a      	mov	r2, r3
 800182c:	2100      	movs	r1, #0
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	f7ff fefd 	bl	800162e <lora_write_reg>
  for (int i = 0; i < size; i++) {
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	3301      	adds	r3, #1
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	429a      	cmp	r2, r3
 8001840:	dbef      	blt.n	8001822 <lora_tx+0x32>
  }
  lora_write_reg(module, REG_PAYLOAD_LENGTH, currentLength + size);
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	b2da      	uxtb	r2, r3
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	4413      	add	r3, r2
 800184a:	b2db      	uxtb	r3, r3
 800184c:	461a      	mov	r2, r3
 800184e:	2122      	movs	r1, #34	; 0x22
 8001850:	68f8      	ldr	r0, [r7, #12]
 8001852:	f7ff feec 	bl	800162e <lora_write_reg>
}
 8001856:	bf00      	nop
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <lora_end_packet>:

uint8_t lora_end_packet(lora_t * module){
 800185e:	b580      	push	{r7, lr}
 8001860:	b084      	sub	sp, #16
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
	uint8_t timeout = 100;
 8001866:	2364      	movs	r3, #100	; 0x64
 8001868:	73fb      	strb	r3, [r7, #15]
	lora_write_reg(module, REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 800186a:	2283      	movs	r2, #131	; 0x83
 800186c:	2101      	movs	r1, #1
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff fedd 	bl	800162e <lora_write_reg>
  while((lora_read_reg(module,REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0) {
 8001874:	e00a      	b.n	800188c <lora_end_packet+0x2e>
		if(--timeout==0){
 8001876:	7bfb      	ldrb	r3, [r7, #15]
 8001878:	3b01      	subs	r3, #1
 800187a:	73fb      	strb	r3, [r7, #15]
 800187c:	7bfb      	ldrb	r3, [r7, #15]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d104      	bne.n	800188c <lora_end_packet+0x2e>
			HAL_Delay(1);
 8001882:	2001      	movs	r0, #1
 8001884:	f000 fd76 	bl	8002374 <HAL_Delay>
			return 1;
 8001888:	2301      	movs	r3, #1
 800188a:	e00e      	b.n	80018aa <lora_end_packet+0x4c>
  while((lora_read_reg(module,REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0) {
 800188c:	2112      	movs	r1, #18
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff fe7d 	bl	800158e <lora_read_reg>
 8001894:	4603      	mov	r3, r0
 8001896:	f003 0308 	and.w	r3, r3, #8
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0eb      	beq.n	8001876 <lora_end_packet+0x18>
		}
  }
  lora_write_reg(module, REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 800189e:	2208      	movs	r2, #8
 80018a0:	2112      	movs	r1, #18
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff fec3 	bl	800162e <lora_write_reg>
	return 0;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
	...

080018b4 <lora_set_frequency>:

void lora_set_frequency(lora_t * module, uint64_t freq){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	e9c7 2300 	strd	r2, r3, [r7]
	uint64_t frf = ((uint64_t)freq << 19) / 32000000;
 80018c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018c4:	f04f 0000 	mov.w	r0, #0
 80018c8:	f04f 0100 	mov.w	r1, #0
 80018cc:	04d9      	lsls	r1, r3, #19
 80018ce:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80018d2:	04d0      	lsls	r0, r2, #19
 80018d4:	4a19      	ldr	r2, [pc, #100]	; (800193c <lora_set_frequency+0x88>)
 80018d6:	f04f 0300 	mov.w	r3, #0
 80018da:	f7ff fba3 	bl	8001024 <__aeabi_uldivmod>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  lora_write_reg(module, REG_FRF_MSB, (uint8_t)(frf >> 16));
 80018e6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018ea:	f04f 0200 	mov.w	r2, #0
 80018ee:	f04f 0300 	mov.w	r3, #0
 80018f2:	0c02      	lsrs	r2, r0, #16
 80018f4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80018f8:	0c0b      	lsrs	r3, r1, #16
 80018fa:	b2d3      	uxtb	r3, r2
 80018fc:	461a      	mov	r2, r3
 80018fe:	2106      	movs	r1, #6
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f7ff fe94 	bl	800162e <lora_write_reg>
  lora_write_reg(module,REG_FRF_MID, (uint8_t)(frf >> 8));
 8001906:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	f04f 0300 	mov.w	r3, #0
 8001912:	0a02      	lsrs	r2, r0, #8
 8001914:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001918:	0a0b      	lsrs	r3, r1, #8
 800191a:	b2d3      	uxtb	r3, r2
 800191c:	461a      	mov	r2, r3
 800191e:	2107      	movs	r1, #7
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f7ff fe84 	bl	800162e <lora_write_reg>
  lora_write_reg(module,REG_FRF_LSB, (uint8_t)(frf >> 0));
 8001926:	7c3b      	ldrb	r3, [r7, #16]
 8001928:	461a      	mov	r2, r3
 800192a:	2108      	movs	r1, #8
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	f7ff fe7e 	bl	800162e <lora_write_reg>
}
 8001932:	bf00      	nop
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	01e84800 	.word	0x01e84800

08001940 <delay_us>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void delay_us (uint16_t us)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 800194a:	4b08      	ldr	r3, [pc, #32]	; (800196c <delay_us+0x2c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2200      	movs	r2, #0
 8001950:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 8001952:	bf00      	nop
 8001954:	4b05      	ldr	r3, [pc, #20]	; (800196c <delay_us+0x2c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	429a      	cmp	r2, r3
 800195e:	d3f9      	bcc.n	8001954 <delay_us+0x14>
}
 8001960:	bf00      	nop
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr
 800196c:	20000248 	.word	0x20000248

08001970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001970:	b598      	push	{r3, r4, r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001974:	f000 fc9c 	bl	80022b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001978:	f000 f912 	bl	8001ba0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800197c:	f000 fa02 	bl	8001d84 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001980:	f000 f954 	bl	8001c2c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001984:	f000 f9d4 	bl	8001d30 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001988:	f000 f986 	bl	8001c98 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2); //delay us
 800198c:	486d      	ldr	r0, [pc, #436]	; (8001b44 <main+0x1d4>)
 800198e:	f002 fb61 	bl	8004054 <HAL_TIM_Base_Start>

  	lora_pins.dio0.port  = LORA_DIO0_PORT;
 8001992:	4b6d      	ldr	r3, [pc, #436]	; (8001b48 <main+0x1d8>)
 8001994:	4a6d      	ldr	r2, [pc, #436]	; (8001b4c <main+0x1dc>)
 8001996:	60da      	str	r2, [r3, #12]
  	lora_pins.dio0.pin   = LORA_DIO0_PIN;
 8001998:	4b6b      	ldr	r3, [pc, #428]	; (8001b48 <main+0x1d8>)
 800199a:	2201      	movs	r2, #1
 800199c:	609a      	str	r2, [r3, #8]
  	lora_pins.nss.port   = LORA_SS_PORT;			// NSS pin to which port is connected
 800199e:	4b6a      	ldr	r3, [pc, #424]	; (8001b48 <main+0x1d8>)
 80019a0:	4a6b      	ldr	r2, [pc, #428]	; (8001b50 <main+0x1e0>)
 80019a2:	615a      	str	r2, [r3, #20]
  	lora_pins.nss.pin    = LORA_SS_PIN;				// NSS pin to which pin is connected
 80019a4:	4b68      	ldr	r3, [pc, #416]	; (8001b48 <main+0x1d8>)
 80019a6:	2210      	movs	r2, #16
 80019a8:	611a      	str	r2, [r3, #16]
  	lora_pins.reset.port = LORA_RESET_PORT;			// RESET pin to which port is connected
 80019aa:	4b67      	ldr	r3, [pc, #412]	; (8001b48 <main+0x1d8>)
 80019ac:	4a68      	ldr	r2, [pc, #416]	; (8001b50 <main+0x1e0>)
 80019ae:	605a      	str	r2, [r3, #4]
  	lora_pins.reset.pin  = LORA_RESET_PIN;			// RESET pin to which pin is connected
 80019b0:	4b65      	ldr	r3, [pc, #404]	; (8001b48 <main+0x1d8>)
 80019b2:	2208      	movs	r2, #8
 80019b4:	601a      	str	r2, [r3, #0]
  	lora_pins.spi  			 = &hspi1;
 80019b6:	4b64      	ldr	r3, [pc, #400]	; (8001b48 <main+0x1d8>)
 80019b8:	4a66      	ldr	r2, [pc, #408]	; (8001b54 <main+0x1e4>)
 80019ba:	619a      	str	r2, [r3, #24]

  	lora.pin = &lora_pins;
 80019bc:	4b66      	ldr	r3, [pc, #408]	; (8001b58 <main+0x1e8>)
 80019be:	4a62      	ldr	r2, [pc, #392]	; (8001b48 <main+0x1d8>)
 80019c0:	601a      	str	r2, [r3, #0]
  	lora.frequency = FREQ_433MHZ;								// 433MHZ Frequency
 80019c2:	4b65      	ldr	r3, [pc, #404]	; (8001b58 <main+0x1e8>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	711a      	strb	r2, [r3, #4]
  	//lora.frequency = FREQ_865MHZ;								// 865MHZ Frequency
  	//lora.frequency = FREQ_866MHZ;								// 866MHZ Frequency
  	//lora.frequency = FREQ_867MHZ;								// 867MHZ Frequency

  	while(lora_init(&lora)){								// Initialize the lora module
 80019c8:	e003      	b.n	80019d2 <main+0x62>
  			HAL_Delay(1000);
 80019ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019ce:	f000 fcd1 	bl	8002374 <HAL_Delay>
  	while(lora_init(&lora)){								// Initialize the lora module
 80019d2:	4861      	ldr	r0, [pc, #388]	; (8001b58 <main+0x1e8>)
 80019d4:	f7ff fe7a 	bl	80016cc <lora_init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f5      	bne.n	80019ca <main+0x5a>

    /* USER CODE BEGIN 3 */

	#ifdef TX
/* DHT11 process data BEGIN*/
		DHT11_Init(GPIOA, GPIO_PIN_1);
 80019de:	2102      	movs	r1, #2
 80019e0:	485b      	ldr	r0, [pc, #364]	; (8001b50 <main+0x1e0>)
 80019e2:	f7ff fd11 	bl	8001408 <DHT11_Init>
		Presence = DHT11_CheckRespone(GPIOA, GPIO_PIN_1);
 80019e6:	2102      	movs	r1, #2
 80019e8:	4859      	ldr	r0, [pc, #356]	; (8001b50 <main+0x1e0>)
 80019ea:	f7ff fd35 	bl	8001458 <DHT11_CheckRespone>
 80019ee:	4603      	mov	r3, r0
 80019f0:	461a      	mov	r2, r3
 80019f2:	4b5a      	ldr	r3, [pc, #360]	; (8001b5c <main+0x1ec>)
 80019f4:	701a      	strb	r2, [r3, #0]
		Rh_byte1 = DHT11_ReadData(GPIOA, GPIO_PIN_1);
 80019f6:	2102      	movs	r1, #2
 80019f8:	4855      	ldr	r0, [pc, #340]	; (8001b50 <main+0x1e0>)
 80019fa:	f7ff fd68 	bl	80014ce <DHT11_ReadData>
 80019fe:	4603      	mov	r3, r0
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b57      	ldr	r3, [pc, #348]	; (8001b60 <main+0x1f0>)
 8001a04:	701a      	strb	r2, [r3, #0]
		Rh_byte2 = DHT11_ReadData(GPIOA, GPIO_PIN_1);
 8001a06:	2102      	movs	r1, #2
 8001a08:	4851      	ldr	r0, [pc, #324]	; (8001b50 <main+0x1e0>)
 8001a0a:	f7ff fd60 	bl	80014ce <DHT11_ReadData>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	461a      	mov	r2, r3
 8001a12:	4b54      	ldr	r3, [pc, #336]	; (8001b64 <main+0x1f4>)
 8001a14:	701a      	strb	r2, [r3, #0]
		Temp_byte1 = DHT11_ReadData(GPIOA, GPIO_PIN_1);
 8001a16:	2102      	movs	r1, #2
 8001a18:	484d      	ldr	r0, [pc, #308]	; (8001b50 <main+0x1e0>)
 8001a1a:	f7ff fd58 	bl	80014ce <DHT11_ReadData>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	461a      	mov	r2, r3
 8001a22:	4b51      	ldr	r3, [pc, #324]	; (8001b68 <main+0x1f8>)
 8001a24:	701a      	strb	r2, [r3, #0]
		Temp_byte2 = DHT11_ReadData(GPIOA, GPIO_PIN_1);
 8001a26:	2102      	movs	r1, #2
 8001a28:	4849      	ldr	r0, [pc, #292]	; (8001b50 <main+0x1e0>)
 8001a2a:	f7ff fd50 	bl	80014ce <DHT11_ReadData>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b4e      	ldr	r3, [pc, #312]	; (8001b6c <main+0x1fc>)
 8001a34:	701a      	strb	r2, [r3, #0]
		SUM = DHT11_ReadData(GPIOA, GPIO_PIN_1);
 8001a36:	2102      	movs	r1, #2
 8001a38:	4845      	ldr	r0, [pc, #276]	; (8001b50 <main+0x1e0>)
 8001a3a:	f7ff fd48 	bl	80014ce <DHT11_ReadData>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	4b4b      	ldr	r3, [pc, #300]	; (8001b70 <main+0x200>)
 8001a44:	801a      	strh	r2, [r3, #0]
		TEMP = Temp_byte1;
 8001a46:	4b48      	ldr	r3, [pc, #288]	; (8001b68 <main+0x1f8>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	4b49      	ldr	r3, [pc, #292]	; (8001b74 <main+0x204>)
 8001a4e:	801a      	strh	r2, [r3, #0]
		RH = Rh_byte1;
 8001a50:	4b43      	ldr	r3, [pc, #268]	; (8001b60 <main+0x1f0>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	4b48      	ldr	r3, [pc, #288]	; (8001b78 <main+0x208>)
 8001a58:	801a      	strh	r2, [r3, #0]
		HAL_Delay(100);
 8001a5a:	2064      	movs	r0, #100	; 0x64
 8001a5c:	f000 fc8a 	bl	8002374 <HAL_Delay>
		Temperature = (float)((float)TEMP+((float)Temp_byte2/10));
 8001a60:	4b44      	ldr	r3, [pc, #272]	; (8001b74 <main+0x204>)
 8001a62:	881b      	ldrh	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff f935 	bl	8000cd4 <__aeabi_ui2f>
 8001a6a:	4604      	mov	r4, r0
 8001a6c:	4b3f      	ldr	r3, [pc, #252]	; (8001b6c <main+0x1fc>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff f92f 	bl	8000cd4 <__aeabi_ui2f>
 8001a76:	4603      	mov	r3, r0
 8001a78:	4940      	ldr	r1, [pc, #256]	; (8001b7c <main+0x20c>)
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fa36 	bl	8000eec <__aeabi_fdiv>
 8001a80:	4603      	mov	r3, r0
 8001a82:	4619      	mov	r1, r3
 8001a84:	4620      	mov	r0, r4
 8001a86:	f7ff f875 	bl	8000b74 <__addsf3>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4b3c      	ldr	r3, [pc, #240]	; (8001b80 <main+0x210>)
 8001a90:	601a      	str	r2, [r3, #0]
		sprintf(buf,"%.2f\n",Temperature);
 8001a92:	4b3b      	ldr	r3, [pc, #236]	; (8001b80 <main+0x210>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7fe fcc6 	bl	8000428 <__aeabi_f2d>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4938      	ldr	r1, [pc, #224]	; (8001b84 <main+0x214>)
 8001aa2:	4839      	ldr	r0, [pc, #228]	; (8001b88 <main+0x218>)
 8001aa4:	f003 ff70 	bl	8005988 <siprintf>
		Humidity = (float)((float)RH+((float)Rh_byte2/10));
 8001aa8:	4b33      	ldr	r3, [pc, #204]	; (8001b78 <main+0x208>)
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff f911 	bl	8000cd4 <__aeabi_ui2f>
 8001ab2:	4604      	mov	r4, r0
 8001ab4:	4b2b      	ldr	r3, [pc, #172]	; (8001b64 <main+0x1f4>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff f90b 	bl	8000cd4 <__aeabi_ui2f>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	492e      	ldr	r1, [pc, #184]	; (8001b7c <main+0x20c>)
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff fa12 	bl	8000eec <__aeabi_fdiv>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	4619      	mov	r1, r3
 8001acc:	4620      	mov	r0, r4
 8001ace:	f7ff f851 	bl	8000b74 <__addsf3>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4b2d      	ldr	r3, [pc, #180]	; (8001b8c <main+0x21c>)
 8001ad8:	601a      	str	r2, [r3, #0]
		sprintf(buf_humi,"%.2f\n",Humidity);
 8001ada:	4b2c      	ldr	r3, [pc, #176]	; (8001b8c <main+0x21c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7fe fca2 	bl	8000428 <__aeabi_f2d>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4926      	ldr	r1, [pc, #152]	; (8001b84 <main+0x214>)
 8001aea:	4829      	ldr	r0, [pc, #164]	; (8001b90 <main+0x220>)
 8001aec:	f003 ff4c 	bl	8005988 <siprintf>
		strcat(buf,buf_humi);
 8001af0:	4927      	ldr	r1, [pc, #156]	; (8001b90 <main+0x220>)
 8001af2:	4825      	ldr	r0, [pc, #148]	; (8001b88 <main+0x218>)
 8001af4:	f003 ffb3 	bl	8005a5e <strcat>
/* DHT11 process data END */

/* LORA send data BEGIN */
	  lora_begin_packet(&lora);
 8001af8:	4817      	ldr	r0, [pc, #92]	; (8001b58 <main+0x1e8>)
 8001afa:	f7ff fe51 	bl	80017a0 <lora_begin_packet>
	  lora_tx(&lora, (uint8_t *)buf, strlen(buf));
 8001afe:	4822      	ldr	r0, [pc, #136]	; (8001b88 <main+0x218>)
 8001b00:	f7fe fb26 	bl	8000150 <strlen>
 8001b04:	4603      	mov	r3, r0
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	461a      	mov	r2, r3
 8001b0a:	491f      	ldr	r1, [pc, #124]	; (8001b88 <main+0x218>)
 8001b0c:	4812      	ldr	r0, [pc, #72]	; (8001b58 <main+0x1e8>)
 8001b0e:	f7ff fe6f 	bl	80017f0 <lora_tx>
	  lora_end_packet(&lora);
 8001b12:	4811      	ldr	r0, [pc, #68]	; (8001b58 <main+0x1e8>)
 8001b14:	f7ff fea3 	bl	800185e <lora_end_packet>
	  sprintf(msg, "Send packet :\n%s\r\n",buf);
 8001b18:	4a1b      	ldr	r2, [pc, #108]	; (8001b88 <main+0x218>)
 8001b1a:	491e      	ldr	r1, [pc, #120]	; (8001b94 <main+0x224>)
 8001b1c:	481e      	ldr	r0, [pc, #120]	; (8001b98 <main+0x228>)
 8001b1e:	f003 ff33 	bl	8005988 <siprintf>
	  HAL_UART_Transmit(&huart1,(uint8_t *)msg,strlen(msg),1000);	//code test
 8001b22:	481d      	ldr	r0, [pc, #116]	; (8001b98 <main+0x228>)
 8001b24:	f7fe fb14 	bl	8000150 <strlen>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b30:	4919      	ldr	r1, [pc, #100]	; (8001b98 <main+0x228>)
 8001b32:	481a      	ldr	r0, [pc, #104]	; (8001b9c <main+0x22c>)
 8001b34:	f002 fe8c 	bl	8004850 <HAL_UART_Transmit>
	  HAL_Delay(2000);
 8001b38:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b3c:	f000 fc1a 	bl	8002374 <HAL_Delay>
		DHT11_Init(GPIOA, GPIO_PIN_1);
 8001b40:	e74d      	b.n	80019de <main+0x6e>
 8001b42:	bf00      	nop
 8001b44:	20000248 	.word	0x20000248
 8001b48:	200002d8 	.word	0x200002d8
 8001b4c:	40010c00 	.word	0x40010c00
 8001b50:	40010800 	.word	0x40010800
 8001b54:	200001f0 	.word	0x200001f0
 8001b58:	200002f4 	.word	0x200002f4
 8001b5c:	20000350 	.word	0x20000350
 8001b60:	2000033c 	.word	0x2000033c
 8001b64:	2000033d 	.word	0x2000033d
 8001b68:	2000033e 	.word	0x2000033e
 8001b6c:	2000033f 	.word	0x2000033f
 8001b70:	20000340 	.word	0x20000340
 8001b74:	20000344 	.word	0x20000344
 8001b78:	20000342 	.word	0x20000342
 8001b7c:	41200000 	.word	0x41200000
 8001b80:	20000348 	.word	0x20000348
 8001b84:	080092c8 	.word	0x080092c8
 8001b88:	20000354 	.word	0x20000354
 8001b8c:	2000034c 	.word	0x2000034c
 8001b90:	20000364 	.word	0x20000364
 8001b94:	080092d0 	.word	0x080092d0
 8001b98:	200002fc 	.word	0x200002fc
 8001b9c:	20000290 	.word	0x20000290

08001ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b090      	sub	sp, #64	; 0x40
 8001ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ba6:	f107 0318 	add.w	r3, r7, #24
 8001baa:	2228      	movs	r2, #40	; 0x28
 8001bac:	2100      	movs	r1, #0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f003 ff4d 	bl	8005a4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bb4:	1d3b      	adds	r3, r7, #4
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	60da      	str	r2, [r3, #12]
 8001bc0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bdc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001bde:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001be2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001be4:	f107 0318 	add.w	r3, r7, #24
 8001be8:	4618      	mov	r0, r3
 8001bea:	f000 ff43 	bl	8002a74 <HAL_RCC_OscConfig>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001bf4:	f000 f934 	bl	8001e60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bf8:	230f      	movs	r3, #15
 8001bfa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c0e:	1d3b      	adds	r3, r7, #4
 8001c10:	2102      	movs	r1, #2
 8001c12:	4618      	mov	r0, r3
 8001c14:	f001 f9b0 	bl	8002f78 <HAL_RCC_ClockConfig>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001c1e:	f000 f91f 	bl	8001e60 <Error_Handler>
  }
}
 8001c22:	bf00      	nop
 8001c24:	3740      	adds	r7, #64	; 0x40
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c30:	4b17      	ldr	r3, [pc, #92]	; (8001c90 <MX_SPI1_Init+0x64>)
 8001c32:	4a18      	ldr	r2, [pc, #96]	; (8001c94 <MX_SPI1_Init+0x68>)
 8001c34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c36:	4b16      	ldr	r3, [pc, #88]	; (8001c90 <MX_SPI1_Init+0x64>)
 8001c38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c3e:	4b14      	ldr	r3, [pc, #80]	; (8001c90 <MX_SPI1_Init+0x64>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c44:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <MX_SPI1_Init+0x64>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c4a:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <MX_SPI1_Init+0x64>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c50:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <MX_SPI1_Init+0x64>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c56:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <MX_SPI1_Init+0x64>)
 8001c58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c5c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001c5e:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <MX_SPI1_Init+0x64>)
 8001c60:	2210      	movs	r2, #16
 8001c62:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c64:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <MX_SPI1_Init+0x64>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c6a:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <MX_SPI1_Init+0x64>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c70:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <MX_SPI1_Init+0x64>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c76:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <MX_SPI1_Init+0x64>)
 8001c78:	220a      	movs	r2, #10
 8001c7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c7c:	4804      	ldr	r0, [pc, #16]	; (8001c90 <MX_SPI1_Init+0x64>)
 8001c7e:	f001 fb09 	bl	8003294 <HAL_SPI_Init>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c88:	f000 f8ea 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	200001f0 	.word	0x200001f0
 8001c94:	40013000 	.word	0x40013000

08001c98 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c9e:	f107 0308 	add.w	r3, r7, #8
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]
 8001ca8:	609a      	str	r2, [r3, #8]
 8001caa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cac:	463b      	mov	r3, r7
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cb4:	4b1d      	ldr	r3, [pc, #116]	; (8001d2c <MX_TIM2_Init+0x94>)
 8001cb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001cbc:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <MX_TIM2_Init+0x94>)
 8001cbe:	2247      	movs	r2, #71	; 0x47
 8001cc0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc2:	4b1a      	ldr	r3, [pc, #104]	; (8001d2c <MX_TIM2_Init+0x94>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8001cc8:	4b18      	ldr	r3, [pc, #96]	; (8001d2c <MX_TIM2_Init+0x94>)
 8001cca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001cce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cd0:	4b16      	ldr	r3, [pc, #88]	; (8001d2c <MX_TIM2_Init+0x94>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd6:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <MX_TIM2_Init+0x94>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cdc:	4813      	ldr	r0, [pc, #76]	; (8001d2c <MX_TIM2_Init+0x94>)
 8001cde:	f002 f969 	bl	8003fb4 <HAL_TIM_Base_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001ce8:	f000 f8ba 	bl	8001e60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cf0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cf2:	f107 0308 	add.w	r3, r7, #8
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	480c      	ldr	r0, [pc, #48]	; (8001d2c <MX_TIM2_Init+0x94>)
 8001cfa:	f002 fafd 	bl	80042f8 <HAL_TIM_ConfigClockSource>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001d04:	f000 f8ac 	bl	8001e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d10:	463b      	mov	r3, r7
 8001d12:	4619      	mov	r1, r3
 8001d14:	4805      	ldr	r0, [pc, #20]	; (8001d2c <MX_TIM2_Init+0x94>)
 8001d16:	f002 fcdb 	bl	80046d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001d20:	f000 f89e 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d24:	bf00      	nop
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20000248 	.word	0x20000248

08001d30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d34:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <MX_USART1_UART_Init+0x4c>)
 8001d36:	4a12      	ldr	r2, [pc, #72]	; (8001d80 <MX_USART1_UART_Init+0x50>)
 8001d38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d3a:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <MX_USART1_UART_Init+0x4c>)
 8001d3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d42:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <MX_USART1_UART_Init+0x4c>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <MX_USART1_UART_Init+0x4c>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <MX_USART1_UART_Init+0x4c>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d54:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <MX_USART1_UART_Init+0x4c>)
 8001d56:	220c      	movs	r2, #12
 8001d58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d5a:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <MX_USART1_UART_Init+0x4c>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <MX_USART1_UART_Init+0x4c>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d66:	4805      	ldr	r0, [pc, #20]	; (8001d7c <MX_USART1_UART_Init+0x4c>)
 8001d68:	f002 fd22 	bl	80047b0 <HAL_UART_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d72:	f000 f875 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000290 	.word	0x20000290
 8001d80:	40013800 	.word	0x40013800

08001d84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b088      	sub	sp, #32
 8001d88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8a:	f107 0310 	add.w	r3, r7, #16
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	605a      	str	r2, [r3, #4]
 8001d94:	609a      	str	r2, [r3, #8]
 8001d96:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d98:	4b2d      	ldr	r3, [pc, #180]	; (8001e50 <MX_GPIO_Init+0xcc>)
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	4a2c      	ldr	r2, [pc, #176]	; (8001e50 <MX_GPIO_Init+0xcc>)
 8001d9e:	f043 0320 	orr.w	r3, r3, #32
 8001da2:	6193      	str	r3, [r2, #24]
 8001da4:	4b2a      	ldr	r3, [pc, #168]	; (8001e50 <MX_GPIO_Init+0xcc>)
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	f003 0320 	and.w	r3, r3, #32
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db0:	4b27      	ldr	r3, [pc, #156]	; (8001e50 <MX_GPIO_Init+0xcc>)
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	4a26      	ldr	r2, [pc, #152]	; (8001e50 <MX_GPIO_Init+0xcc>)
 8001db6:	f043 0304 	orr.w	r3, r3, #4
 8001dba:	6193      	str	r3, [r2, #24]
 8001dbc:	4b24      	ldr	r3, [pc, #144]	; (8001e50 <MX_GPIO_Init+0xcc>)
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc8:	4b21      	ldr	r3, [pc, #132]	; (8001e50 <MX_GPIO_Init+0xcc>)
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	4a20      	ldr	r2, [pc, #128]	; (8001e50 <MX_GPIO_Init+0xcc>)
 8001dce:	f043 0308 	orr.w	r3, r3, #8
 8001dd2:	6193      	str	r3, [r2, #24]
 8001dd4:	4b1e      	ldr	r3, [pc, #120]	; (8001e50 <MX_GPIO_Init+0xcc>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	f003 0308 	and.w	r3, r3, #8
 8001ddc:	607b      	str	r3, [r7, #4]
 8001dde:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|NSS_Pin, GPIO_PIN_RESET);
 8001de0:	2200      	movs	r2, #0
 8001de2:	2118      	movs	r1, #24
 8001de4:	481b      	ldr	r0, [pc, #108]	; (8001e54 <MX_GPIO_Init+0xd0>)
 8001de6:	f000 fe0a 	bl	80029fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001dea:	2302      	movs	r3, #2
 8001dec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df6:	f107 0310 	add.w	r3, r7, #16
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4815      	ldr	r0, [pc, #84]	; (8001e54 <MX_GPIO_Init+0xd0>)
 8001dfe:	f000 fc63 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Pin NSS_Pin */
  GPIO_InitStruct.Pin = RST_Pin|NSS_Pin;
 8001e02:	2318      	movs	r3, #24
 8001e04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e06:	2301      	movs	r3, #1
 8001e08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e12:	f107 0310 	add.w	r3, r7, #16
 8001e16:	4619      	mov	r1, r3
 8001e18:	480e      	ldr	r0, [pc, #56]	; (8001e54 <MX_GPIO_Init+0xd0>)
 8001e1a:	f000 fc55 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e22:	4b0d      	ldr	r3, [pc, #52]	; (8001e58 <MX_GPIO_Init+0xd4>)
 8001e24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8001e2a:	f107 0310 	add.w	r3, r7, #16
 8001e2e:	4619      	mov	r1, r3
 8001e30:	480a      	ldr	r0, [pc, #40]	; (8001e5c <MX_GPIO_Init+0xd8>)
 8001e32:	f000 fc49 	bl	80026c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001e36:	2200      	movs	r2, #0
 8001e38:	2100      	movs	r1, #0
 8001e3a:	2006      	movs	r0, #6
 8001e3c:	f000 fb95 	bl	800256a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001e40:	2006      	movs	r0, #6
 8001e42:	f000 fbae 	bl	80025a2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e46:	bf00      	nop
 8001e48:	3720      	adds	r7, #32
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40021000 	.word	0x40021000
 8001e54:	40010800 	.word	0x40010800
 8001e58:	10110000 	.word	0x10110000
 8001e5c:	40010c00 	.word	0x40010c00

08001e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e64:	b672      	cpsid	i
}
 8001e66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e68:	e7fe      	b.n	8001e68 <Error_Handler+0x8>
	...

08001e6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e72:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <HAL_MspInit+0x5c>)
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	4a14      	ldr	r2, [pc, #80]	; (8001ec8 <HAL_MspInit+0x5c>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	6193      	str	r3, [r2, #24]
 8001e7e:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <HAL_MspInit+0x5c>)
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <HAL_MspInit+0x5c>)
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	4a0e      	ldr	r2, [pc, #56]	; (8001ec8 <HAL_MspInit+0x5c>)
 8001e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e94:	61d3      	str	r3, [r2, #28]
 8001e96:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <HAL_MspInit+0x5c>)
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9e:	607b      	str	r3, [r7, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <HAL_MspInit+0x60>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	4a04      	ldr	r2, [pc, #16]	; (8001ecc <HAL_MspInit+0x60>)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	40010000 	.word	0x40010000

08001ed0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b088      	sub	sp, #32
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed8:	f107 0310 	add.w	r3, r7, #16
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a1f      	ldr	r2, [pc, #124]	; (8001f68 <HAL_SPI_MspInit+0x98>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d137      	bne.n	8001f60 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ef0:	4b1e      	ldr	r3, [pc, #120]	; (8001f6c <HAL_SPI_MspInit+0x9c>)
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	4a1d      	ldr	r2, [pc, #116]	; (8001f6c <HAL_SPI_MspInit+0x9c>)
 8001ef6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001efa:	6193      	str	r3, [r2, #24]
 8001efc:	4b1b      	ldr	r3, [pc, #108]	; (8001f6c <HAL_SPI_MspInit+0x9c>)
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f08:	4b18      	ldr	r3, [pc, #96]	; (8001f6c <HAL_SPI_MspInit+0x9c>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	4a17      	ldr	r2, [pc, #92]	; (8001f6c <HAL_SPI_MspInit+0x9c>)
 8001f0e:	f043 0304 	orr.w	r3, r3, #4
 8001f12:	6193      	str	r3, [r2, #24]
 8001f14:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <HAL_SPI_MspInit+0x9c>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	60bb      	str	r3, [r7, #8]
 8001f1e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001f20:	23a0      	movs	r3, #160	; 0xa0
 8001f22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f24:	2302      	movs	r3, #2
 8001f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2c:	f107 0310 	add.w	r3, r7, #16
 8001f30:	4619      	mov	r1, r3
 8001f32:	480f      	ldr	r0, [pc, #60]	; (8001f70 <HAL_SPI_MspInit+0xa0>)
 8001f34:	f000 fbc8 	bl	80026c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f38:	2340      	movs	r3, #64	; 0x40
 8001f3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f44:	f107 0310 	add.w	r3, r7, #16
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4809      	ldr	r0, [pc, #36]	; (8001f70 <HAL_SPI_MspInit+0xa0>)
 8001f4c:	f000 fbbc 	bl	80026c8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 8001f50:	2200      	movs	r2, #0
 8001f52:	2101      	movs	r1, #1
 8001f54:	2023      	movs	r0, #35	; 0x23
 8001f56:	f000 fb08 	bl	800256a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001f5a:	2023      	movs	r0, #35	; 0x23
 8001f5c:	f000 fb21 	bl	80025a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f60:	bf00      	nop
 8001f62:	3720      	adds	r7, #32
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40013000 	.word	0x40013000
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40010800 	.word	0x40010800

08001f74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f84:	d113      	bne.n	8001fae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f86:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <HAL_TIM_Base_MspInit+0x44>)
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	4a0b      	ldr	r2, [pc, #44]	; (8001fb8 <HAL_TIM_Base_MspInit+0x44>)
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	61d3      	str	r3, [r2, #28]
 8001f92:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <HAL_TIM_Base_MspInit+0x44>)
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	201c      	movs	r0, #28
 8001fa4:	f000 fae1 	bl	800256a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fa8:	201c      	movs	r0, #28
 8001faa:	f000 fafa 	bl	80025a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001fae:	bf00      	nop
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40021000 	.word	0x40021000

08001fbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b088      	sub	sp, #32
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc4:	f107 0310 	add.w	r3, r7, #16
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a1c      	ldr	r2, [pc, #112]	; (8002048 <HAL_UART_MspInit+0x8c>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d131      	bne.n	8002040 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fdc:	4b1b      	ldr	r3, [pc, #108]	; (800204c <HAL_UART_MspInit+0x90>)
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	4a1a      	ldr	r2, [pc, #104]	; (800204c <HAL_UART_MspInit+0x90>)
 8001fe2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fe6:	6193      	str	r3, [r2, #24]
 8001fe8:	4b18      	ldr	r3, [pc, #96]	; (800204c <HAL_UART_MspInit+0x90>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff4:	4b15      	ldr	r3, [pc, #84]	; (800204c <HAL_UART_MspInit+0x90>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	4a14      	ldr	r2, [pc, #80]	; (800204c <HAL_UART_MspInit+0x90>)
 8001ffa:	f043 0304 	orr.w	r3, r3, #4
 8001ffe:	6193      	str	r3, [r2, #24]
 8002000:	4b12      	ldr	r3, [pc, #72]	; (800204c <HAL_UART_MspInit+0x90>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	60bb      	str	r3, [r7, #8]
 800200a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800200c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002010:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002012:	2302      	movs	r3, #2
 8002014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002016:	2303      	movs	r3, #3
 8002018:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201a:	f107 0310 	add.w	r3, r7, #16
 800201e:	4619      	mov	r1, r3
 8002020:	480b      	ldr	r0, [pc, #44]	; (8002050 <HAL_UART_MspInit+0x94>)
 8002022:	f000 fb51 	bl	80026c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002026:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800202a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002030:	2300      	movs	r3, #0
 8002032:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002034:	f107 0310 	add.w	r3, r7, #16
 8002038:	4619      	mov	r1, r3
 800203a:	4805      	ldr	r0, [pc, #20]	; (8002050 <HAL_UART_MspInit+0x94>)
 800203c:	f000 fb44 	bl	80026c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002040:	bf00      	nop
 8002042:	3720      	adds	r7, #32
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40013800 	.word	0x40013800
 800204c:	40021000 	.word	0x40021000
 8002050:	40010800 	.word	0x40010800

08002054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002058:	e7fe      	b.n	8002058 <NMI_Handler+0x4>

0800205a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800205e:	e7fe      	b.n	800205e <HardFault_Handler+0x4>

08002060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002064:	e7fe      	b.n	8002064 <MemManage_Handler+0x4>

08002066 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800206a:	e7fe      	b.n	800206a <BusFault_Handler+0x4>

0800206c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002070:	e7fe      	b.n	8002070 <UsageFault_Handler+0x4>

08002072 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr

0800207e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800207e:	b480      	push	{r7}
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr

0800208a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800208a:	b480      	push	{r7}
 800208c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	46bd      	mov	sp, r7
 8002092:	bc80      	pop	{r7}
 8002094:	4770      	bx	lr

08002096 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800209a:	f000 f94f 	bl	800233c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 80020a6:	2001      	movs	r0, #1
 80020a8:	f000 fcc2 	bl	8002a30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80020ac:	bf00      	nop
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020b4:	4802      	ldr	r0, [pc, #8]	; (80020c0 <TIM2_IRQHandler+0x10>)
 80020b6:	f002 f817 	bl	80040e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000248 	.word	0x20000248

080020c4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80020c8:	4802      	ldr	r0, [pc, #8]	; (80020d4 <SPI1_IRQHandler+0x10>)
 80020ca:	f001 fd73 	bl	8003bb4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	200001f0 	.word	0x200001f0

080020d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return 1;
 80020dc:	2301      	movs	r3, #1
}
 80020de:	4618      	mov	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc80      	pop	{r7}
 80020e4:	4770      	bx	lr

080020e6 <_kill>:

int _kill(int pid, int sig)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b082      	sub	sp, #8
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
 80020ee:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020f0:	f003 fd0e 	bl	8005b10 <__errno>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2216      	movs	r2, #22
 80020f8:	601a      	str	r2, [r3, #0]
  return -1;
 80020fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <_exit>:

void _exit (int status)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800210e:	f04f 31ff 	mov.w	r1, #4294967295
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff ffe7 	bl	80020e6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002118:	e7fe      	b.n	8002118 <_exit+0x12>

0800211a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b086      	sub	sp, #24
 800211e:	af00      	add	r7, sp, #0
 8002120:	60f8      	str	r0, [r7, #12]
 8002122:	60b9      	str	r1, [r7, #8]
 8002124:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
 800212a:	e00a      	b.n	8002142 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800212c:	f3af 8000 	nop.w
 8002130:	4601      	mov	r1, r0
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	60ba      	str	r2, [r7, #8]
 8002138:	b2ca      	uxtb	r2, r1
 800213a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	3301      	adds	r3, #1
 8002140:	617b      	str	r3, [r7, #20]
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	429a      	cmp	r2, r3
 8002148:	dbf0      	blt.n	800212c <_read+0x12>
  }

  return len;
 800214a:	687b      	ldr	r3, [r7, #4]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	e009      	b.n	800217a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	1c5a      	adds	r2, r3, #1
 800216a:	60ba      	str	r2, [r7, #8]
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	3301      	adds	r3, #1
 8002178:	617b      	str	r3, [r7, #20]
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	429a      	cmp	r2, r3
 8002180:	dbf1      	blt.n	8002166 <_write+0x12>
  }
  return len;
 8002182:	687b      	ldr	r3, [r7, #4]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <_close>:

int _close(int file)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002194:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002198:	4618      	mov	r0, r3
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr

080021a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
 80021aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021b2:	605a      	str	r2, [r3, #4]
  return 0;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bc80      	pop	{r7}
 80021be:	4770      	bx	lr

080021c0 <_isatty>:

int _isatty(int file)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021c8:	2301      	movs	r3, #1
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr

080021d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr

080021ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021f4:	4a14      	ldr	r2, [pc, #80]	; (8002248 <_sbrk+0x5c>)
 80021f6:	4b15      	ldr	r3, [pc, #84]	; (800224c <_sbrk+0x60>)
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002200:	4b13      	ldr	r3, [pc, #76]	; (8002250 <_sbrk+0x64>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d102      	bne.n	800220e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002208:	4b11      	ldr	r3, [pc, #68]	; (8002250 <_sbrk+0x64>)
 800220a:	4a12      	ldr	r2, [pc, #72]	; (8002254 <_sbrk+0x68>)
 800220c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800220e:	4b10      	ldr	r3, [pc, #64]	; (8002250 <_sbrk+0x64>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4413      	add	r3, r2
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	429a      	cmp	r2, r3
 800221a:	d207      	bcs.n	800222c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800221c:	f003 fc78 	bl	8005b10 <__errno>
 8002220:	4603      	mov	r3, r0
 8002222:	220c      	movs	r2, #12
 8002224:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002226:	f04f 33ff 	mov.w	r3, #4294967295
 800222a:	e009      	b.n	8002240 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800222c:	4b08      	ldr	r3, [pc, #32]	; (8002250 <_sbrk+0x64>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002232:	4b07      	ldr	r3, [pc, #28]	; (8002250 <_sbrk+0x64>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4413      	add	r3, r2
 800223a:	4a05      	ldr	r2, [pc, #20]	; (8002250 <_sbrk+0x64>)
 800223c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800223e:	68fb      	ldr	r3, [r7, #12]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20005000 	.word	0x20005000
 800224c:	00000400 	.word	0x00000400
 8002250:	2000036c 	.word	0x2000036c
 8002254:	200004c0 	.word	0x200004c0

08002258 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr

08002264 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002264:	f7ff fff8 	bl	8002258 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002268:	480b      	ldr	r0, [pc, #44]	; (8002298 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800226a:	490c      	ldr	r1, [pc, #48]	; (800229c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800226c:	4a0c      	ldr	r2, [pc, #48]	; (80022a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800226e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002270:	e002      	b.n	8002278 <LoopCopyDataInit>

08002272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002276:	3304      	adds	r3, #4

08002278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800227a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800227c:	d3f9      	bcc.n	8002272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800227e:	4a09      	ldr	r2, [pc, #36]	; (80022a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002280:	4c09      	ldr	r4, [pc, #36]	; (80022a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002284:	e001      	b.n	800228a <LoopFillZerobss>

08002286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002288:	3204      	adds	r2, #4

0800228a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800228a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800228c:	d3fb      	bcc.n	8002286 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800228e:	f003 fc45 	bl	8005b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002292:	f7ff fb6d 	bl	8001970 <main>
  bx lr
 8002296:	4770      	bx	lr
  ldr r0, =_sdata
 8002298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800229c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80022a0:	08009770 	.word	0x08009770
  ldr r2, =_sbss
 80022a4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80022a8:	200004c0 	.word	0x200004c0

080022ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022ac:	e7fe      	b.n	80022ac <ADC1_2_IRQHandler>
	...

080022b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022b4:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <HAL_Init+0x28>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a07      	ldr	r2, [pc, #28]	; (80022d8 <HAL_Init+0x28>)
 80022ba:	f043 0310 	orr.w	r3, r3, #16
 80022be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022c0:	2003      	movs	r0, #3
 80022c2:	f000 f947 	bl	8002554 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022c6:	200f      	movs	r0, #15
 80022c8:	f000 f808 	bl	80022dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022cc:	f7ff fdce 	bl	8001e6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40022000 	.word	0x40022000

080022dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022e4:	4b12      	ldr	r3, [pc, #72]	; (8002330 <HAL_InitTick+0x54>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4b12      	ldr	r3, [pc, #72]	; (8002334 <HAL_InitTick+0x58>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	4619      	mov	r1, r3
 80022ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 f95f 	bl	80025be <HAL_SYSTICK_Config>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e00e      	b.n	8002328 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b0f      	cmp	r3, #15
 800230e:	d80a      	bhi.n	8002326 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002310:	2200      	movs	r2, #0
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	f04f 30ff 	mov.w	r0, #4294967295
 8002318:	f000 f927 	bl	800256a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800231c:	4a06      	ldr	r2, [pc, #24]	; (8002338 <HAL_InitTick+0x5c>)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002322:	2300      	movs	r3, #0
 8002324:	e000      	b.n	8002328 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
}
 8002328:	4618      	mov	r0, r3
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20000000 	.word	0x20000000
 8002334:	20000008 	.word	0x20000008
 8002338:	20000004 	.word	0x20000004

0800233c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002340:	4b05      	ldr	r3, [pc, #20]	; (8002358 <HAL_IncTick+0x1c>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	461a      	mov	r2, r3
 8002346:	4b05      	ldr	r3, [pc, #20]	; (800235c <HAL_IncTick+0x20>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4413      	add	r3, r2
 800234c:	4a03      	ldr	r2, [pc, #12]	; (800235c <HAL_IncTick+0x20>)
 800234e:	6013      	str	r3, [r2, #0]
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr
 8002358:	20000008 	.word	0x20000008
 800235c:	20000370 	.word	0x20000370

08002360 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return uwTick;
 8002364:	4b02      	ldr	r3, [pc, #8]	; (8002370 <HAL_GetTick+0x10>)
 8002366:	681b      	ldr	r3, [r3, #0]
}
 8002368:	4618      	mov	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr
 8002370:	20000370 	.word	0x20000370

08002374 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800237c:	f7ff fff0 	bl	8002360 <HAL_GetTick>
 8002380:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800238c:	d005      	beq.n	800239a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800238e:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <HAL_Delay+0x44>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	461a      	mov	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4413      	add	r3, r2
 8002398:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800239a:	bf00      	nop
 800239c:	f7ff ffe0 	bl	8002360 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d8f7      	bhi.n	800239c <HAL_Delay+0x28>
  {
  }
}
 80023ac:	bf00      	nop
 80023ae:	bf00      	nop
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000008 	.word	0x20000008

080023bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023cc:	4b0c      	ldr	r3, [pc, #48]	; (8002400 <__NVIC_SetPriorityGrouping+0x44>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023d8:	4013      	ands	r3, r2
 80023da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ee:	4a04      	ldr	r2, [pc, #16]	; (8002400 <__NVIC_SetPriorityGrouping+0x44>)
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	60d3      	str	r3, [r2, #12]
}
 80023f4:	bf00      	nop
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002408:	4b04      	ldr	r3, [pc, #16]	; (800241c <__NVIC_GetPriorityGrouping+0x18>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	0a1b      	lsrs	r3, r3, #8
 800240e:	f003 0307 	and.w	r3, r3, #7
}
 8002412:	4618      	mov	r0, r3
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	2b00      	cmp	r3, #0
 8002430:	db0b      	blt.n	800244a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	f003 021f 	and.w	r2, r3, #31
 8002438:	4906      	ldr	r1, [pc, #24]	; (8002454 <__NVIC_EnableIRQ+0x34>)
 800243a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243e:	095b      	lsrs	r3, r3, #5
 8002440:	2001      	movs	r0, #1
 8002442:	fa00 f202 	lsl.w	r2, r0, r2
 8002446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr
 8002454:	e000e100 	.word	0xe000e100

08002458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	6039      	str	r1, [r7, #0]
 8002462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002468:	2b00      	cmp	r3, #0
 800246a:	db0a      	blt.n	8002482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	b2da      	uxtb	r2, r3
 8002470:	490c      	ldr	r1, [pc, #48]	; (80024a4 <__NVIC_SetPriority+0x4c>)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	0112      	lsls	r2, r2, #4
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	440b      	add	r3, r1
 800247c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002480:	e00a      	b.n	8002498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	b2da      	uxtb	r2, r3
 8002486:	4908      	ldr	r1, [pc, #32]	; (80024a8 <__NVIC_SetPriority+0x50>)
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	3b04      	subs	r3, #4
 8002490:	0112      	lsls	r2, r2, #4
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	440b      	add	r3, r1
 8002496:	761a      	strb	r2, [r3, #24]
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	e000e100 	.word	0xe000e100
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b089      	sub	sp, #36	; 0x24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f1c3 0307 	rsb	r3, r3, #7
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	bf28      	it	cs
 80024ca:	2304      	movcs	r3, #4
 80024cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3304      	adds	r3, #4
 80024d2:	2b06      	cmp	r3, #6
 80024d4:	d902      	bls.n	80024dc <NVIC_EncodePriority+0x30>
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3b03      	subs	r3, #3
 80024da:	e000      	b.n	80024de <NVIC_EncodePriority+0x32>
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e0:	f04f 32ff 	mov.w	r2, #4294967295
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43da      	mvns	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	401a      	ands	r2, r3
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f4:	f04f 31ff 	mov.w	r1, #4294967295
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	fa01 f303 	lsl.w	r3, r1, r3
 80024fe:	43d9      	mvns	r1, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002504:	4313      	orrs	r3, r2
         );
}
 8002506:	4618      	mov	r0, r3
 8002508:	3724      	adds	r7, #36	; 0x24
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr

08002510 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3b01      	subs	r3, #1
 800251c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002520:	d301      	bcc.n	8002526 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002522:	2301      	movs	r3, #1
 8002524:	e00f      	b.n	8002546 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002526:	4a0a      	ldr	r2, [pc, #40]	; (8002550 <SysTick_Config+0x40>)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3b01      	subs	r3, #1
 800252c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800252e:	210f      	movs	r1, #15
 8002530:	f04f 30ff 	mov.w	r0, #4294967295
 8002534:	f7ff ff90 	bl	8002458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002538:	4b05      	ldr	r3, [pc, #20]	; (8002550 <SysTick_Config+0x40>)
 800253a:	2200      	movs	r2, #0
 800253c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800253e:	4b04      	ldr	r3, [pc, #16]	; (8002550 <SysTick_Config+0x40>)
 8002540:	2207      	movs	r2, #7
 8002542:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	e000e010 	.word	0xe000e010

08002554 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7ff ff2d 	bl	80023bc <__NVIC_SetPriorityGrouping>
}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800256a:	b580      	push	{r7, lr}
 800256c:	b086      	sub	sp, #24
 800256e:	af00      	add	r7, sp, #0
 8002570:	4603      	mov	r3, r0
 8002572:	60b9      	str	r1, [r7, #8]
 8002574:	607a      	str	r2, [r7, #4]
 8002576:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800257c:	f7ff ff42 	bl	8002404 <__NVIC_GetPriorityGrouping>
 8002580:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	68b9      	ldr	r1, [r7, #8]
 8002586:	6978      	ldr	r0, [r7, #20]
 8002588:	f7ff ff90 	bl	80024ac <NVIC_EncodePriority>
 800258c:	4602      	mov	r2, r0
 800258e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002592:	4611      	mov	r1, r2
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff ff5f 	bl	8002458 <__NVIC_SetPriority>
}
 800259a:	bf00      	nop
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b082      	sub	sp, #8
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	4603      	mov	r3, r0
 80025aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff ff35 	bl	8002420 <__NVIC_EnableIRQ>
}
 80025b6:	bf00      	nop
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b082      	sub	sp, #8
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7ff ffa2 	bl	8002510 <SysTick_Config>
 80025cc:	4603      	mov	r3, r0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025e0:	2300      	movs	r3, #0
 80025e2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d005      	beq.n	80025fc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2204      	movs	r2, #4
 80025f4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	73fb      	strb	r3, [r7, #15]
 80025fa:	e051      	b.n	80026a0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 020e 	bic.w	r2, r2, #14
 800260a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 0201 	bic.w	r2, r2, #1
 800261a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a22      	ldr	r2, [pc, #136]	; (80026ac <HAL_DMA_Abort_IT+0xd4>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d029      	beq.n	800267a <HAL_DMA_Abort_IT+0xa2>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a21      	ldr	r2, [pc, #132]	; (80026b0 <HAL_DMA_Abort_IT+0xd8>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d022      	beq.n	8002676 <HAL_DMA_Abort_IT+0x9e>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a1f      	ldr	r2, [pc, #124]	; (80026b4 <HAL_DMA_Abort_IT+0xdc>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d01a      	beq.n	8002670 <HAL_DMA_Abort_IT+0x98>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a1e      	ldr	r2, [pc, #120]	; (80026b8 <HAL_DMA_Abort_IT+0xe0>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d012      	beq.n	800266a <HAL_DMA_Abort_IT+0x92>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a1c      	ldr	r2, [pc, #112]	; (80026bc <HAL_DMA_Abort_IT+0xe4>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d00a      	beq.n	8002664 <HAL_DMA_Abort_IT+0x8c>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a1b      	ldr	r2, [pc, #108]	; (80026c0 <HAL_DMA_Abort_IT+0xe8>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d102      	bne.n	800265e <HAL_DMA_Abort_IT+0x86>
 8002658:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800265c:	e00e      	b.n	800267c <HAL_DMA_Abort_IT+0xa4>
 800265e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002662:	e00b      	b.n	800267c <HAL_DMA_Abort_IT+0xa4>
 8002664:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002668:	e008      	b.n	800267c <HAL_DMA_Abort_IT+0xa4>
 800266a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800266e:	e005      	b.n	800267c <HAL_DMA_Abort_IT+0xa4>
 8002670:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002674:	e002      	b.n	800267c <HAL_DMA_Abort_IT+0xa4>
 8002676:	2310      	movs	r3, #16
 8002678:	e000      	b.n	800267c <HAL_DMA_Abort_IT+0xa4>
 800267a:	2301      	movs	r3, #1
 800267c:	4a11      	ldr	r2, [pc, #68]	; (80026c4 <HAL_DMA_Abort_IT+0xec>)
 800267e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	4798      	blx	r3
    } 
  }
  return status;
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40020008 	.word	0x40020008
 80026b0:	4002001c 	.word	0x4002001c
 80026b4:	40020030 	.word	0x40020030
 80026b8:	40020044 	.word	0x40020044
 80026bc:	40020058 	.word	0x40020058
 80026c0:	4002006c 	.word	0x4002006c
 80026c4:	40020000 	.word	0x40020000

080026c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b08b      	sub	sp, #44	; 0x2c
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026d2:	2300      	movs	r3, #0
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026d6:	2300      	movs	r3, #0
 80026d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026da:	e169      	b.n	80029b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026dc:	2201      	movs	r2, #1
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	69fa      	ldr	r2, [r7, #28]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	f040 8158 	bne.w	80029aa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	4a9a      	ldr	r2, [pc, #616]	; (8002968 <HAL_GPIO_Init+0x2a0>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d05e      	beq.n	80027c2 <HAL_GPIO_Init+0xfa>
 8002704:	4a98      	ldr	r2, [pc, #608]	; (8002968 <HAL_GPIO_Init+0x2a0>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d875      	bhi.n	80027f6 <HAL_GPIO_Init+0x12e>
 800270a:	4a98      	ldr	r2, [pc, #608]	; (800296c <HAL_GPIO_Init+0x2a4>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d058      	beq.n	80027c2 <HAL_GPIO_Init+0xfa>
 8002710:	4a96      	ldr	r2, [pc, #600]	; (800296c <HAL_GPIO_Init+0x2a4>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d86f      	bhi.n	80027f6 <HAL_GPIO_Init+0x12e>
 8002716:	4a96      	ldr	r2, [pc, #600]	; (8002970 <HAL_GPIO_Init+0x2a8>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d052      	beq.n	80027c2 <HAL_GPIO_Init+0xfa>
 800271c:	4a94      	ldr	r2, [pc, #592]	; (8002970 <HAL_GPIO_Init+0x2a8>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d869      	bhi.n	80027f6 <HAL_GPIO_Init+0x12e>
 8002722:	4a94      	ldr	r2, [pc, #592]	; (8002974 <HAL_GPIO_Init+0x2ac>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d04c      	beq.n	80027c2 <HAL_GPIO_Init+0xfa>
 8002728:	4a92      	ldr	r2, [pc, #584]	; (8002974 <HAL_GPIO_Init+0x2ac>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d863      	bhi.n	80027f6 <HAL_GPIO_Init+0x12e>
 800272e:	4a92      	ldr	r2, [pc, #584]	; (8002978 <HAL_GPIO_Init+0x2b0>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d046      	beq.n	80027c2 <HAL_GPIO_Init+0xfa>
 8002734:	4a90      	ldr	r2, [pc, #576]	; (8002978 <HAL_GPIO_Init+0x2b0>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d85d      	bhi.n	80027f6 <HAL_GPIO_Init+0x12e>
 800273a:	2b12      	cmp	r3, #18
 800273c:	d82a      	bhi.n	8002794 <HAL_GPIO_Init+0xcc>
 800273e:	2b12      	cmp	r3, #18
 8002740:	d859      	bhi.n	80027f6 <HAL_GPIO_Init+0x12e>
 8002742:	a201      	add	r2, pc, #4	; (adr r2, 8002748 <HAL_GPIO_Init+0x80>)
 8002744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002748:	080027c3 	.word	0x080027c3
 800274c:	0800279d 	.word	0x0800279d
 8002750:	080027af 	.word	0x080027af
 8002754:	080027f1 	.word	0x080027f1
 8002758:	080027f7 	.word	0x080027f7
 800275c:	080027f7 	.word	0x080027f7
 8002760:	080027f7 	.word	0x080027f7
 8002764:	080027f7 	.word	0x080027f7
 8002768:	080027f7 	.word	0x080027f7
 800276c:	080027f7 	.word	0x080027f7
 8002770:	080027f7 	.word	0x080027f7
 8002774:	080027f7 	.word	0x080027f7
 8002778:	080027f7 	.word	0x080027f7
 800277c:	080027f7 	.word	0x080027f7
 8002780:	080027f7 	.word	0x080027f7
 8002784:	080027f7 	.word	0x080027f7
 8002788:	080027f7 	.word	0x080027f7
 800278c:	080027a5 	.word	0x080027a5
 8002790:	080027b9 	.word	0x080027b9
 8002794:	4a79      	ldr	r2, [pc, #484]	; (800297c <HAL_GPIO_Init+0x2b4>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d013      	beq.n	80027c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800279a:	e02c      	b.n	80027f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	623b      	str	r3, [r7, #32]
          break;
 80027a2:	e029      	b.n	80027f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	3304      	adds	r3, #4
 80027aa:	623b      	str	r3, [r7, #32]
          break;
 80027ac:	e024      	b.n	80027f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	3308      	adds	r3, #8
 80027b4:	623b      	str	r3, [r7, #32]
          break;
 80027b6:	e01f      	b.n	80027f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	330c      	adds	r3, #12
 80027be:	623b      	str	r3, [r7, #32]
          break;
 80027c0:	e01a      	b.n	80027f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d102      	bne.n	80027d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027ca:	2304      	movs	r3, #4
 80027cc:	623b      	str	r3, [r7, #32]
          break;
 80027ce:	e013      	b.n	80027f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d105      	bne.n	80027e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027d8:	2308      	movs	r3, #8
 80027da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	69fa      	ldr	r2, [r7, #28]
 80027e0:	611a      	str	r2, [r3, #16]
          break;
 80027e2:	e009      	b.n	80027f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027e4:	2308      	movs	r3, #8
 80027e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	69fa      	ldr	r2, [r7, #28]
 80027ec:	615a      	str	r2, [r3, #20]
          break;
 80027ee:	e003      	b.n	80027f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027f0:	2300      	movs	r3, #0
 80027f2:	623b      	str	r3, [r7, #32]
          break;
 80027f4:	e000      	b.n	80027f8 <HAL_GPIO_Init+0x130>
          break;
 80027f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	2bff      	cmp	r3, #255	; 0xff
 80027fc:	d801      	bhi.n	8002802 <HAL_GPIO_Init+0x13a>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	e001      	b.n	8002806 <HAL_GPIO_Init+0x13e>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3304      	adds	r3, #4
 8002806:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	2bff      	cmp	r3, #255	; 0xff
 800280c:	d802      	bhi.n	8002814 <HAL_GPIO_Init+0x14c>
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	e002      	b.n	800281a <HAL_GPIO_Init+0x152>
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	3b08      	subs	r3, #8
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	210f      	movs	r1, #15
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	fa01 f303 	lsl.w	r3, r1, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	401a      	ands	r2, r3
 800282c:	6a39      	ldr	r1, [r7, #32]
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	fa01 f303 	lsl.w	r3, r1, r3
 8002834:	431a      	orrs	r2, r3
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 80b1 	beq.w	80029aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002848:	4b4d      	ldr	r3, [pc, #308]	; (8002980 <HAL_GPIO_Init+0x2b8>)
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	4a4c      	ldr	r2, [pc, #304]	; (8002980 <HAL_GPIO_Init+0x2b8>)
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	6193      	str	r3, [r2, #24]
 8002854:	4b4a      	ldr	r3, [pc, #296]	; (8002980 <HAL_GPIO_Init+0x2b8>)
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	60bb      	str	r3, [r7, #8]
 800285e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002860:	4a48      	ldr	r2, [pc, #288]	; (8002984 <HAL_GPIO_Init+0x2bc>)
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	089b      	lsrs	r3, r3, #2
 8002866:	3302      	adds	r3, #2
 8002868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800286c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	f003 0303 	and.w	r3, r3, #3
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	220f      	movs	r2, #15
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	4013      	ands	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a40      	ldr	r2, [pc, #256]	; (8002988 <HAL_GPIO_Init+0x2c0>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d013      	beq.n	80028b4 <HAL_GPIO_Init+0x1ec>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a3f      	ldr	r2, [pc, #252]	; (800298c <HAL_GPIO_Init+0x2c4>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d00d      	beq.n	80028b0 <HAL_GPIO_Init+0x1e8>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a3e      	ldr	r2, [pc, #248]	; (8002990 <HAL_GPIO_Init+0x2c8>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d007      	beq.n	80028ac <HAL_GPIO_Init+0x1e4>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a3d      	ldr	r2, [pc, #244]	; (8002994 <HAL_GPIO_Init+0x2cc>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d101      	bne.n	80028a8 <HAL_GPIO_Init+0x1e0>
 80028a4:	2303      	movs	r3, #3
 80028a6:	e006      	b.n	80028b6 <HAL_GPIO_Init+0x1ee>
 80028a8:	2304      	movs	r3, #4
 80028aa:	e004      	b.n	80028b6 <HAL_GPIO_Init+0x1ee>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e002      	b.n	80028b6 <HAL_GPIO_Init+0x1ee>
 80028b0:	2301      	movs	r3, #1
 80028b2:	e000      	b.n	80028b6 <HAL_GPIO_Init+0x1ee>
 80028b4:	2300      	movs	r3, #0
 80028b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b8:	f002 0203 	and.w	r2, r2, #3
 80028bc:	0092      	lsls	r2, r2, #2
 80028be:	4093      	lsls	r3, r2
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028c6:	492f      	ldr	r1, [pc, #188]	; (8002984 <HAL_GPIO_Init+0x2bc>)
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	089b      	lsrs	r3, r3, #2
 80028cc:	3302      	adds	r3, #2
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d006      	beq.n	80028ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028e0:	4b2d      	ldr	r3, [pc, #180]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	492c      	ldr	r1, [pc, #176]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	608b      	str	r3, [r1, #8]
 80028ec:	e006      	b.n	80028fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028ee:	4b2a      	ldr	r3, [pc, #168]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 80028f0:	689a      	ldr	r2, [r3, #8]
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	43db      	mvns	r3, r3
 80028f6:	4928      	ldr	r1, [pc, #160]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d006      	beq.n	8002916 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002908:	4b23      	ldr	r3, [pc, #140]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	4922      	ldr	r1, [pc, #136]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	4313      	orrs	r3, r2
 8002912:	60cb      	str	r3, [r1, #12]
 8002914:	e006      	b.n	8002924 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002916:	4b20      	ldr	r3, [pc, #128]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 8002918:	68da      	ldr	r2, [r3, #12]
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	43db      	mvns	r3, r3
 800291e:	491e      	ldr	r1, [pc, #120]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 8002920:	4013      	ands	r3, r2
 8002922:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d006      	beq.n	800293e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002930:	4b19      	ldr	r3, [pc, #100]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	4918      	ldr	r1, [pc, #96]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	4313      	orrs	r3, r2
 800293a:	604b      	str	r3, [r1, #4]
 800293c:	e006      	b.n	800294c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800293e:	4b16      	ldr	r3, [pc, #88]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	43db      	mvns	r3, r3
 8002946:	4914      	ldr	r1, [pc, #80]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 8002948:	4013      	ands	r3, r2
 800294a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d021      	beq.n	800299c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002958:	4b0f      	ldr	r3, [pc, #60]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	490e      	ldr	r1, [pc, #56]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	4313      	orrs	r3, r2
 8002962:	600b      	str	r3, [r1, #0]
 8002964:	e021      	b.n	80029aa <HAL_GPIO_Init+0x2e2>
 8002966:	bf00      	nop
 8002968:	10320000 	.word	0x10320000
 800296c:	10310000 	.word	0x10310000
 8002970:	10220000 	.word	0x10220000
 8002974:	10210000 	.word	0x10210000
 8002978:	10120000 	.word	0x10120000
 800297c:	10110000 	.word	0x10110000
 8002980:	40021000 	.word	0x40021000
 8002984:	40010000 	.word	0x40010000
 8002988:	40010800 	.word	0x40010800
 800298c:	40010c00 	.word	0x40010c00
 8002990:	40011000 	.word	0x40011000
 8002994:	40011400 	.word	0x40011400
 8002998:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800299c:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <HAL_GPIO_Init+0x304>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	43db      	mvns	r3, r3
 80029a4:	4909      	ldr	r1, [pc, #36]	; (80029cc <HAL_GPIO_Init+0x304>)
 80029a6:	4013      	ands	r3, r2
 80029a8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	3301      	adds	r3, #1
 80029ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	fa22 f303 	lsr.w	r3, r2, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f47f ae8e 	bne.w	80026dc <HAL_GPIO_Init+0x14>
  }
}
 80029c0:	bf00      	nop
 80029c2:	bf00      	nop
 80029c4:	372c      	adds	r7, #44	; 0x2c
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr
 80029cc:	40010400 	.word	0x40010400

080029d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	460b      	mov	r3, r1
 80029da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	887b      	ldrh	r3, [r7, #2]
 80029e2:	4013      	ands	r3, r2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d002      	beq.n	80029ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029e8:	2301      	movs	r3, #1
 80029ea:	73fb      	strb	r3, [r7, #15]
 80029ec:	e001      	b.n	80029f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029ee:	2300      	movs	r3, #0
 80029f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr

080029fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
 8002a06:	460b      	mov	r3, r1
 8002a08:	807b      	strh	r3, [r7, #2]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a0e:	787b      	ldrb	r3, [r7, #1]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d003      	beq.n	8002a1c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a14:	887a      	ldrh	r2, [r7, #2]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a1a:	e003      	b.n	8002a24 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a1c:	887b      	ldrh	r3, [r7, #2]
 8002a1e:	041a      	lsls	r2, r3, #16
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	611a      	str	r2, [r3, #16]
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bc80      	pop	{r7}
 8002a2c:	4770      	bx	lr
	...

08002a30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	4603      	mov	r3, r0
 8002a38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a3a:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a3c:	695a      	ldr	r2, [r3, #20]
 8002a3e:	88fb      	ldrh	r3, [r7, #6]
 8002a40:	4013      	ands	r3, r2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d006      	beq.n	8002a54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a46:	4a05      	ldr	r2, [pc, #20]	; (8002a5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a48:	88fb      	ldrh	r3, [r7, #6]
 8002a4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a4c:	88fb      	ldrh	r3, [r7, #6]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 f806 	bl	8002a60 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a54:	bf00      	nop
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40010400 	.word	0x40010400

08002a60 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr

08002a74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e272      	b.n	8002f6c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 8087 	beq.w	8002ba2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a94:	4b92      	ldr	r3, [pc, #584]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 030c 	and.w	r3, r3, #12
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d00c      	beq.n	8002aba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002aa0:	4b8f      	ldr	r3, [pc, #572]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 030c 	and.w	r3, r3, #12
 8002aa8:	2b08      	cmp	r3, #8
 8002aaa:	d112      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x5e>
 8002aac:	4b8c      	ldr	r3, [pc, #560]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab8:	d10b      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aba:	4b89      	ldr	r3, [pc, #548]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d06c      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x12c>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d168      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e24c      	b.n	8002f6c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ada:	d106      	bne.n	8002aea <HAL_RCC_OscConfig+0x76>
 8002adc:	4b80      	ldr	r3, [pc, #512]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a7f      	ldr	r2, [pc, #508]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002ae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae6:	6013      	str	r3, [r2, #0]
 8002ae8:	e02e      	b.n	8002b48 <HAL_RCC_OscConfig+0xd4>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10c      	bne.n	8002b0c <HAL_RCC_OscConfig+0x98>
 8002af2:	4b7b      	ldr	r3, [pc, #492]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a7a      	ldr	r2, [pc, #488]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002af8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	4b78      	ldr	r3, [pc, #480]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a77      	ldr	r2, [pc, #476]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002b04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	e01d      	b.n	8002b48 <HAL_RCC_OscConfig+0xd4>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b14:	d10c      	bne.n	8002b30 <HAL_RCC_OscConfig+0xbc>
 8002b16:	4b72      	ldr	r3, [pc, #456]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a71      	ldr	r2, [pc, #452]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	4b6f      	ldr	r3, [pc, #444]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a6e      	ldr	r2, [pc, #440]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b2c:	6013      	str	r3, [r2, #0]
 8002b2e:	e00b      	b.n	8002b48 <HAL_RCC_OscConfig+0xd4>
 8002b30:	4b6b      	ldr	r3, [pc, #428]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a6a      	ldr	r2, [pc, #424]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b3a:	6013      	str	r3, [r2, #0]
 8002b3c:	4b68      	ldr	r3, [pc, #416]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a67      	ldr	r2, [pc, #412]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d013      	beq.n	8002b78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b50:	f7ff fc06 	bl	8002360 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b58:	f7ff fc02 	bl	8002360 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b64      	cmp	r3, #100	; 0x64
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e200      	b.n	8002f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6a:	4b5d      	ldr	r3, [pc, #372]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0f0      	beq.n	8002b58 <HAL_RCC_OscConfig+0xe4>
 8002b76:	e014      	b.n	8002ba2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b78:	f7ff fbf2 	bl	8002360 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b80:	f7ff fbee 	bl	8002360 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b64      	cmp	r3, #100	; 0x64
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e1ec      	b.n	8002f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b92:	4b53      	ldr	r3, [pc, #332]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1f0      	bne.n	8002b80 <HAL_RCC_OscConfig+0x10c>
 8002b9e:	e000      	b.n	8002ba2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d063      	beq.n	8002c76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bae:	4b4c      	ldr	r3, [pc, #304]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f003 030c 	and.w	r3, r3, #12
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00b      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bba:	4b49      	ldr	r3, [pc, #292]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f003 030c 	and.w	r3, r3, #12
 8002bc2:	2b08      	cmp	r3, #8
 8002bc4:	d11c      	bne.n	8002c00 <HAL_RCC_OscConfig+0x18c>
 8002bc6:	4b46      	ldr	r3, [pc, #280]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d116      	bne.n	8002c00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bd2:	4b43      	ldr	r3, [pc, #268]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d005      	beq.n	8002bea <HAL_RCC_OscConfig+0x176>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d001      	beq.n	8002bea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e1c0      	b.n	8002f6c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bea:	4b3d      	ldr	r3, [pc, #244]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	4939      	ldr	r1, [pc, #228]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bfe:	e03a      	b.n	8002c76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d020      	beq.n	8002c4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c08:	4b36      	ldr	r3, [pc, #216]	; (8002ce4 <HAL_RCC_OscConfig+0x270>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0e:	f7ff fba7 	bl	8002360 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c16:	f7ff fba3 	bl	8002360 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e1a1      	b.n	8002f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c28:	4b2d      	ldr	r3, [pc, #180]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0f0      	beq.n	8002c16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c34:	4b2a      	ldr	r3, [pc, #168]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	4927      	ldr	r1, [pc, #156]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	600b      	str	r3, [r1, #0]
 8002c48:	e015      	b.n	8002c76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c4a:	4b26      	ldr	r3, [pc, #152]	; (8002ce4 <HAL_RCC_OscConfig+0x270>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c50:	f7ff fb86 	bl	8002360 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c58:	f7ff fb82 	bl	8002360 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e180      	b.n	8002f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d03a      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d019      	beq.n	8002cbe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c8a:	4b17      	ldr	r3, [pc, #92]	; (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c90:	f7ff fb66 	bl	8002360 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c98:	f7ff fb62 	bl	8002360 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e160      	b.n	8002f6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002caa:	4b0d      	ldr	r3, [pc, #52]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0f0      	beq.n	8002c98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cb6:	2001      	movs	r0, #1
 8002cb8:	f000 face 	bl	8003258 <RCC_Delay>
 8002cbc:	e01c      	b.n	8002cf8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cbe:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc4:	f7ff fb4c 	bl	8002360 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cca:	e00f      	b.n	8002cec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ccc:	f7ff fb48 	bl	8002360 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d908      	bls.n	8002cec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e146      	b.n	8002f6c <HAL_RCC_OscConfig+0x4f8>
 8002cde:	bf00      	nop
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	42420000 	.word	0x42420000
 8002ce8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cec:	4b92      	ldr	r3, [pc, #584]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1e9      	bne.n	8002ccc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 80a6 	beq.w	8002e52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d06:	2300      	movs	r3, #0
 8002d08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d0a:	4b8b      	ldr	r3, [pc, #556]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10d      	bne.n	8002d32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d16:	4b88      	ldr	r3, [pc, #544]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	4a87      	ldr	r2, [pc, #540]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d20:	61d3      	str	r3, [r2, #28]
 8002d22:	4b85      	ldr	r3, [pc, #532]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2a:	60bb      	str	r3, [r7, #8]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d32:	4b82      	ldr	r3, [pc, #520]	; (8002f3c <HAL_RCC_OscConfig+0x4c8>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d118      	bne.n	8002d70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d3e:	4b7f      	ldr	r3, [pc, #508]	; (8002f3c <HAL_RCC_OscConfig+0x4c8>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a7e      	ldr	r2, [pc, #504]	; (8002f3c <HAL_RCC_OscConfig+0x4c8>)
 8002d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d4a:	f7ff fb09 	bl	8002360 <HAL_GetTick>
 8002d4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d52:	f7ff fb05 	bl	8002360 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b64      	cmp	r3, #100	; 0x64
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e103      	b.n	8002f6c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d64:	4b75      	ldr	r3, [pc, #468]	; (8002f3c <HAL_RCC_OscConfig+0x4c8>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0f0      	beq.n	8002d52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d106      	bne.n	8002d86 <HAL_RCC_OscConfig+0x312>
 8002d78:	4b6f      	ldr	r3, [pc, #444]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	4a6e      	ldr	r2, [pc, #440]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002d7e:	f043 0301 	orr.w	r3, r3, #1
 8002d82:	6213      	str	r3, [r2, #32]
 8002d84:	e02d      	b.n	8002de2 <HAL_RCC_OscConfig+0x36e>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10c      	bne.n	8002da8 <HAL_RCC_OscConfig+0x334>
 8002d8e:	4b6a      	ldr	r3, [pc, #424]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	4a69      	ldr	r2, [pc, #420]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002d94:	f023 0301 	bic.w	r3, r3, #1
 8002d98:	6213      	str	r3, [r2, #32]
 8002d9a:	4b67      	ldr	r3, [pc, #412]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	4a66      	ldr	r2, [pc, #408]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002da0:	f023 0304 	bic.w	r3, r3, #4
 8002da4:	6213      	str	r3, [r2, #32]
 8002da6:	e01c      	b.n	8002de2 <HAL_RCC_OscConfig+0x36e>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	2b05      	cmp	r3, #5
 8002dae:	d10c      	bne.n	8002dca <HAL_RCC_OscConfig+0x356>
 8002db0:	4b61      	ldr	r3, [pc, #388]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	4a60      	ldr	r2, [pc, #384]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002db6:	f043 0304 	orr.w	r3, r3, #4
 8002dba:	6213      	str	r3, [r2, #32]
 8002dbc:	4b5e      	ldr	r3, [pc, #376]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	4a5d      	ldr	r2, [pc, #372]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002dc2:	f043 0301 	orr.w	r3, r3, #1
 8002dc6:	6213      	str	r3, [r2, #32]
 8002dc8:	e00b      	b.n	8002de2 <HAL_RCC_OscConfig+0x36e>
 8002dca:	4b5b      	ldr	r3, [pc, #364]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	4a5a      	ldr	r2, [pc, #360]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002dd0:	f023 0301 	bic.w	r3, r3, #1
 8002dd4:	6213      	str	r3, [r2, #32]
 8002dd6:	4b58      	ldr	r3, [pc, #352]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	4a57      	ldr	r2, [pc, #348]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002ddc:	f023 0304 	bic.w	r3, r3, #4
 8002de0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d015      	beq.n	8002e16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dea:	f7ff fab9 	bl	8002360 <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df0:	e00a      	b.n	8002e08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df2:	f7ff fab5 	bl	8002360 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e0b1      	b.n	8002f6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e08:	4b4b      	ldr	r3, [pc, #300]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0ee      	beq.n	8002df2 <HAL_RCC_OscConfig+0x37e>
 8002e14:	e014      	b.n	8002e40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e16:	f7ff faa3 	bl	8002360 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e1c:	e00a      	b.n	8002e34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e1e:	f7ff fa9f 	bl	8002360 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e09b      	b.n	8002f6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e34:	4b40      	ldr	r3, [pc, #256]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1ee      	bne.n	8002e1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e40:	7dfb      	ldrb	r3, [r7, #23]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d105      	bne.n	8002e52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e46:	4b3c      	ldr	r3, [pc, #240]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	4a3b      	ldr	r2, [pc, #236]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002e4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f000 8087 	beq.w	8002f6a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e5c:	4b36      	ldr	r3, [pc, #216]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 030c 	and.w	r3, r3, #12
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	d061      	beq.n	8002f2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d146      	bne.n	8002efe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e70:	4b33      	ldr	r3, [pc, #204]	; (8002f40 <HAL_RCC_OscConfig+0x4cc>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e76:	f7ff fa73 	bl	8002360 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e7e:	f7ff fa6f 	bl	8002360 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e06d      	b.n	8002f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e90:	4b29      	ldr	r3, [pc, #164]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1f0      	bne.n	8002e7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea4:	d108      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ea6:	4b24      	ldr	r3, [pc, #144]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	4921      	ldr	r1, [pc, #132]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eb8:	4b1f      	ldr	r3, [pc, #124]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a19      	ldr	r1, [r3, #32]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	491b      	ldr	r1, [pc, #108]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ed0:	4b1b      	ldr	r3, [pc, #108]	; (8002f40 <HAL_RCC_OscConfig+0x4cc>)
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed6:	f7ff fa43 	bl	8002360 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002edc:	e008      	b.n	8002ef0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ede:	f7ff fa3f 	bl	8002360 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e03d      	b.n	8002f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ef0:	4b11      	ldr	r3, [pc, #68]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d0f0      	beq.n	8002ede <HAL_RCC_OscConfig+0x46a>
 8002efc:	e035      	b.n	8002f6a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002efe:	4b10      	ldr	r3, [pc, #64]	; (8002f40 <HAL_RCC_OscConfig+0x4cc>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f04:	f7ff fa2c 	bl	8002360 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f0c:	f7ff fa28 	bl	8002360 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e026      	b.n	8002f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f1e:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f0      	bne.n	8002f0c <HAL_RCC_OscConfig+0x498>
 8002f2a:	e01e      	b.n	8002f6a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d107      	bne.n	8002f44 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e019      	b.n	8002f6c <HAL_RCC_OscConfig+0x4f8>
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	40007000 	.word	0x40007000
 8002f40:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f44:	4b0b      	ldr	r3, [pc, #44]	; (8002f74 <HAL_RCC_OscConfig+0x500>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d106      	bne.n	8002f66 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d001      	beq.n	8002f6a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40021000 	.word	0x40021000

08002f78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e0d0      	b.n	800312e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f8c:	4b6a      	ldr	r3, [pc, #424]	; (8003138 <HAL_RCC_ClockConfig+0x1c0>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d910      	bls.n	8002fbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f9a:	4b67      	ldr	r3, [pc, #412]	; (8003138 <HAL_RCC_ClockConfig+0x1c0>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f023 0207 	bic.w	r2, r3, #7
 8002fa2:	4965      	ldr	r1, [pc, #404]	; (8003138 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002faa:	4b63      	ldr	r3, [pc, #396]	; (8003138 <HAL_RCC_ClockConfig+0x1c0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d001      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e0b8      	b.n	800312e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d020      	beq.n	800300a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d005      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fd4:	4b59      	ldr	r3, [pc, #356]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	4a58      	ldr	r2, [pc, #352]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8002fda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fde:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d005      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fec:	4b53      	ldr	r3, [pc, #332]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	4a52      	ldr	r2, [pc, #328]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8002ff2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ff6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ff8:	4b50      	ldr	r3, [pc, #320]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	494d      	ldr	r1, [pc, #308]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8003006:	4313      	orrs	r3, r2
 8003008:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d040      	beq.n	8003098 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d107      	bne.n	800302e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800301e:	4b47      	ldr	r3, [pc, #284]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d115      	bne.n	8003056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e07f      	b.n	800312e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b02      	cmp	r3, #2
 8003034:	d107      	bne.n	8003046 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003036:	4b41      	ldr	r3, [pc, #260]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d109      	bne.n	8003056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e073      	b.n	800312e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003046:	4b3d      	ldr	r3, [pc, #244]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e06b      	b.n	800312e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003056:	4b39      	ldr	r3, [pc, #228]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f023 0203 	bic.w	r2, r3, #3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	4936      	ldr	r1, [pc, #216]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8003064:	4313      	orrs	r3, r2
 8003066:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003068:	f7ff f97a 	bl	8002360 <HAL_GetTick>
 800306c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306e:	e00a      	b.n	8003086 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003070:	f7ff f976 	bl	8002360 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	f241 3288 	movw	r2, #5000	; 0x1388
 800307e:	4293      	cmp	r3, r2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e053      	b.n	800312e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003086:	4b2d      	ldr	r3, [pc, #180]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f003 020c 	and.w	r2, r3, #12
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	429a      	cmp	r2, r3
 8003096:	d1eb      	bne.n	8003070 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003098:	4b27      	ldr	r3, [pc, #156]	; (8003138 <HAL_RCC_ClockConfig+0x1c0>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d210      	bcs.n	80030c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a6:	4b24      	ldr	r3, [pc, #144]	; (8003138 <HAL_RCC_ClockConfig+0x1c0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f023 0207 	bic.w	r2, r3, #7
 80030ae:	4922      	ldr	r1, [pc, #136]	; (8003138 <HAL_RCC_ClockConfig+0x1c0>)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b6:	4b20      	ldr	r3, [pc, #128]	; (8003138 <HAL_RCC_ClockConfig+0x1c0>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0307 	and.w	r3, r3, #7
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d001      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e032      	b.n	800312e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d008      	beq.n	80030e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030d4:	4b19      	ldr	r3, [pc, #100]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	4916      	ldr	r1, [pc, #88]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d009      	beq.n	8003106 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030f2:	4b12      	ldr	r3, [pc, #72]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	490e      	ldr	r1, [pc, #56]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8003102:	4313      	orrs	r3, r2
 8003104:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003106:	f000 f821 	bl	800314c <HAL_RCC_GetSysClockFreq>
 800310a:	4602      	mov	r2, r0
 800310c:	4b0b      	ldr	r3, [pc, #44]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	091b      	lsrs	r3, r3, #4
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	490a      	ldr	r1, [pc, #40]	; (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 8003118:	5ccb      	ldrb	r3, [r1, r3]
 800311a:	fa22 f303 	lsr.w	r3, r2, r3
 800311e:	4a09      	ldr	r2, [pc, #36]	; (8003144 <HAL_RCC_ClockConfig+0x1cc>)
 8003120:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003122:	4b09      	ldr	r3, [pc, #36]	; (8003148 <HAL_RCC_ClockConfig+0x1d0>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f7ff f8d8 	bl	80022dc <HAL_InitTick>

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40022000 	.word	0x40022000
 800313c:	40021000 	.word	0x40021000
 8003140:	08009308 	.word	0x08009308
 8003144:	20000000 	.word	0x20000000
 8003148:	20000004 	.word	0x20000004

0800314c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800314c:	b480      	push	{r7}
 800314e:	b087      	sub	sp, #28
 8003150:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003152:	2300      	movs	r3, #0
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	2300      	movs	r3, #0
 8003158:	60bb      	str	r3, [r7, #8]
 800315a:	2300      	movs	r3, #0
 800315c:	617b      	str	r3, [r7, #20]
 800315e:	2300      	movs	r3, #0
 8003160:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003162:	2300      	movs	r3, #0
 8003164:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003166:	4b1e      	ldr	r3, [pc, #120]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f003 030c 	and.w	r3, r3, #12
 8003172:	2b04      	cmp	r3, #4
 8003174:	d002      	beq.n	800317c <HAL_RCC_GetSysClockFreq+0x30>
 8003176:	2b08      	cmp	r3, #8
 8003178:	d003      	beq.n	8003182 <HAL_RCC_GetSysClockFreq+0x36>
 800317a:	e027      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800317c:	4b19      	ldr	r3, [pc, #100]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800317e:	613b      	str	r3, [r7, #16]
      break;
 8003180:	e027      	b.n	80031d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	0c9b      	lsrs	r3, r3, #18
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	4a17      	ldr	r2, [pc, #92]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800318c:	5cd3      	ldrb	r3, [r2, r3]
 800318e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d010      	beq.n	80031bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800319a:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	0c5b      	lsrs	r3, r3, #17
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	4a11      	ldr	r2, [pc, #68]	; (80031ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80031a6:	5cd3      	ldrb	r3, [r2, r3]
 80031a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a0d      	ldr	r2, [pc, #52]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80031ae:	fb03 f202 	mul.w	r2, r3, r2
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	e004      	b.n	80031c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a0c      	ldr	r2, [pc, #48]	; (80031f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80031c0:	fb02 f303 	mul.w	r3, r2, r3
 80031c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	613b      	str	r3, [r7, #16]
      break;
 80031ca:	e002      	b.n	80031d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031cc:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80031ce:	613b      	str	r3, [r7, #16]
      break;
 80031d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031d2:	693b      	ldr	r3, [r7, #16]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	371c      	adds	r7, #28
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	40021000 	.word	0x40021000
 80031e4:	007a1200 	.word	0x007a1200
 80031e8:	08009320 	.word	0x08009320
 80031ec:	08009330 	.word	0x08009330
 80031f0:	003d0900 	.word	0x003d0900

080031f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031f8:	4b02      	ldr	r3, [pc, #8]	; (8003204 <HAL_RCC_GetHCLKFreq+0x10>)
 80031fa:	681b      	ldr	r3, [r3, #0]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr
 8003204:	20000000 	.word	0x20000000

08003208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800320c:	f7ff fff2 	bl	80031f4 <HAL_RCC_GetHCLKFreq>
 8003210:	4602      	mov	r2, r0
 8003212:	4b05      	ldr	r3, [pc, #20]	; (8003228 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	0a1b      	lsrs	r3, r3, #8
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	4903      	ldr	r1, [pc, #12]	; (800322c <HAL_RCC_GetPCLK1Freq+0x24>)
 800321e:	5ccb      	ldrb	r3, [r1, r3]
 8003220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003224:	4618      	mov	r0, r3
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40021000 	.word	0x40021000
 800322c:	08009318 	.word	0x08009318

08003230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003234:	f7ff ffde 	bl	80031f4 <HAL_RCC_GetHCLKFreq>
 8003238:	4602      	mov	r2, r0
 800323a:	4b05      	ldr	r3, [pc, #20]	; (8003250 <HAL_RCC_GetPCLK2Freq+0x20>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	0adb      	lsrs	r3, r3, #11
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	4903      	ldr	r1, [pc, #12]	; (8003254 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003246:	5ccb      	ldrb	r3, [r1, r3]
 8003248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800324c:	4618      	mov	r0, r3
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40021000 	.word	0x40021000
 8003254:	08009318 	.word	0x08009318

08003258 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003260:	4b0a      	ldr	r3, [pc, #40]	; (800328c <RCC_Delay+0x34>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a0a      	ldr	r2, [pc, #40]	; (8003290 <RCC_Delay+0x38>)
 8003266:	fba2 2303 	umull	r2, r3, r2, r3
 800326a:	0a5b      	lsrs	r3, r3, #9
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	fb02 f303 	mul.w	r3, r2, r3
 8003272:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003274:	bf00      	nop
  }
  while (Delay --);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	1e5a      	subs	r2, r3, #1
 800327a:	60fa      	str	r2, [r7, #12]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1f9      	bne.n	8003274 <RCC_Delay+0x1c>
}
 8003280:	bf00      	nop
 8003282:	bf00      	nop
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr
 800328c:	20000000 	.word	0x20000000
 8003290:	10624dd3 	.word	0x10624dd3

08003294 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e076      	b.n	8003394 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d108      	bne.n	80032c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032b6:	d009      	beq.n	80032cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	61da      	str	r2, [r3, #28]
 80032be:	e005      	b.n	80032cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d106      	bne.n	80032ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7fe fdf2 	bl	8001ed0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003302:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003314:	431a      	orrs	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800331e:	431a      	orrs	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	431a      	orrs	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800333c:	431a      	orrs	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003346:	431a      	orrs	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003350:	ea42 0103 	orr.w	r1, r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003358:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	0c1a      	lsrs	r2, r3, #16
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f002 0204 	and.w	r2, r2, #4
 8003372:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	69da      	ldr	r2, [r3, #28]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003382:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b088      	sub	sp, #32
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	603b      	str	r3, [r7, #0]
 80033a8:	4613      	mov	r3, r2
 80033aa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033ac:	2300      	movs	r3, #0
 80033ae:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d101      	bne.n	80033be <HAL_SPI_Transmit+0x22>
 80033ba:	2302      	movs	r3, #2
 80033bc:	e12d      	b.n	800361a <HAL_SPI_Transmit+0x27e>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033c6:	f7fe ffcb 	bl	8002360 <HAL_GetTick>
 80033ca:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80033cc:	88fb      	ldrh	r3, [r7, #6]
 80033ce:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d002      	beq.n	80033e2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80033dc:	2302      	movs	r3, #2
 80033de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033e0:	e116      	b.n	8003610 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d002      	beq.n	80033ee <HAL_SPI_Transmit+0x52>
 80033e8:	88fb      	ldrh	r3, [r7, #6]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d102      	bne.n	80033f4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033f2:	e10d      	b.n	8003610 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2203      	movs	r2, #3
 80033f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	88fa      	ldrh	r2, [r7, #6]
 800340c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	88fa      	ldrh	r2, [r7, #6]
 8003412:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800343a:	d10f      	bne.n	800345c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800344a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800345a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003466:	2b40      	cmp	r3, #64	; 0x40
 8003468:	d007      	beq.n	800347a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003478:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003482:	d14f      	bne.n	8003524 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d002      	beq.n	8003492 <HAL_SPI_Transmit+0xf6>
 800348c:	8afb      	ldrh	r3, [r7, #22]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d142      	bne.n	8003518 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	881a      	ldrh	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	1c9a      	adds	r2, r3, #2
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80034b6:	e02f      	b.n	8003518 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d112      	bne.n	80034ec <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ca:	881a      	ldrh	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	1c9a      	adds	r2, r3, #2
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	86da      	strh	r2, [r3, #54]	; 0x36
 80034ea:	e015      	b.n	8003518 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034ec:	f7fe ff38 	bl	8002360 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d803      	bhi.n	8003504 <HAL_SPI_Transmit+0x168>
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003502:	d102      	bne.n	800350a <HAL_SPI_Transmit+0x16e>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d106      	bne.n	8003518 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003516:	e07b      	b.n	8003610 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800351c:	b29b      	uxth	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1ca      	bne.n	80034b8 <HAL_SPI_Transmit+0x11c>
 8003522:	e050      	b.n	80035c6 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d002      	beq.n	8003532 <HAL_SPI_Transmit+0x196>
 800352c:	8afb      	ldrh	r3, [r7, #22]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d144      	bne.n	80035bc <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	330c      	adds	r3, #12
 800353c:	7812      	ldrb	r2, [r2, #0]
 800353e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800354e:	b29b      	uxth	r3, r3
 8003550:	3b01      	subs	r3, #1
 8003552:	b29a      	uxth	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003558:	e030      	b.n	80035bc <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b02      	cmp	r3, #2
 8003566:	d113      	bne.n	8003590 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	330c      	adds	r3, #12
 8003572:	7812      	ldrb	r2, [r2, #0]
 8003574:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	1c5a      	adds	r2, r3, #1
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003584:	b29b      	uxth	r3, r3
 8003586:	3b01      	subs	r3, #1
 8003588:	b29a      	uxth	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	86da      	strh	r2, [r3, #54]	; 0x36
 800358e:	e015      	b.n	80035bc <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003590:	f7fe fee6 	bl	8002360 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	429a      	cmp	r2, r3
 800359e:	d803      	bhi.n	80035a8 <HAL_SPI_Transmit+0x20c>
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a6:	d102      	bne.n	80035ae <HAL_SPI_Transmit+0x212>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d106      	bne.n	80035bc <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80035ba:	e029      	b.n	8003610 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1c9      	bne.n	800355a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	6839      	ldr	r1, [r7, #0]
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 fcd4 	bl	8003f78 <SPI_EndRxTxTransaction>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2220      	movs	r2, #32
 80035da:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10a      	bne.n	80035fa <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035e4:	2300      	movs	r3, #0
 80035e6:	613b      	str	r3, [r7, #16]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	613b      	str	r3, [r7, #16]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	613b      	str	r3, [r7, #16]
 80035f8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d002      	beq.n	8003608 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	77fb      	strb	r3, [r7, #31]
 8003606:	e003      	b.n	8003610 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003618:	7ffb      	ldrb	r3, [r7, #31]
}
 800361a:	4618      	mov	r0, r3
 800361c:	3720      	adds	r7, #32
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b088      	sub	sp, #32
 8003626:	af02      	add	r7, sp, #8
 8003628:	60f8      	str	r0, [r7, #12]
 800362a:	60b9      	str	r1, [r7, #8]
 800362c:	603b      	str	r3, [r7, #0]
 800362e:	4613      	mov	r3, r2
 8003630:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b01      	cmp	r3, #1
 8003640:	d002      	beq.n	8003648 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003642:	2302      	movs	r3, #2
 8003644:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003646:	e0fb      	b.n	8003840 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003650:	d112      	bne.n	8003678 <HAL_SPI_Receive+0x56>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10e      	bne.n	8003678 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2204      	movs	r2, #4
 800365e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003662:	88fa      	ldrh	r2, [r7, #6]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	4613      	mov	r3, r2
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	68b9      	ldr	r1, [r7, #8]
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 f8ef 	bl	8003852 <HAL_SPI_TransmitReceive>
 8003674:	4603      	mov	r3, r0
 8003676:	e0e8      	b.n	800384a <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800367e:	2b01      	cmp	r3, #1
 8003680:	d101      	bne.n	8003686 <HAL_SPI_Receive+0x64>
 8003682:	2302      	movs	r3, #2
 8003684:	e0e1      	b.n	800384a <HAL_SPI_Receive+0x228>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800368e:	f7fe fe67 	bl	8002360 <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d002      	beq.n	80036a0 <HAL_SPI_Receive+0x7e>
 800369a:	88fb      	ldrh	r3, [r7, #6]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d102      	bne.n	80036a6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80036a4:	e0cc      	b.n	8003840 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2204      	movs	r2, #4
 80036aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	88fa      	ldrh	r2, [r7, #6]
 80036be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	88fa      	ldrh	r2, [r7, #6]
 80036c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036ec:	d10f      	bne.n	800370e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800370c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003718:	2b40      	cmp	r3, #64	; 0x40
 800371a:	d007      	beq.n	800372c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800372a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d16a      	bne.n	800380a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003734:	e032      	b.n	800379c <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b01      	cmp	r3, #1
 8003742:	d115      	bne.n	8003770 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f103 020c 	add.w	r2, r3, #12
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003750:	7812      	ldrb	r2, [r2, #0]
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003764:	b29b      	uxth	r3, r3
 8003766:	3b01      	subs	r3, #1
 8003768:	b29a      	uxth	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800376e:	e015      	b.n	800379c <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003770:	f7fe fdf6 	bl	8002360 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	429a      	cmp	r2, r3
 800377e:	d803      	bhi.n	8003788 <HAL_SPI_Receive+0x166>
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003786:	d102      	bne.n	800378e <HAL_SPI_Receive+0x16c>
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d106      	bne.n	800379c <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800379a:	e051      	b.n	8003840 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1c7      	bne.n	8003736 <HAL_SPI_Receive+0x114>
 80037a6:	e035      	b.n	8003814 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d113      	bne.n	80037de <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68da      	ldr	r2, [r3, #12]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c0:	b292      	uxth	r2, r2
 80037c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c8:	1c9a      	adds	r2, r3, #2
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	3b01      	subs	r3, #1
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037dc:	e015      	b.n	800380a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037de:	f7fe fdbf 	bl	8002360 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d803      	bhi.n	80037f6 <HAL_SPI_Receive+0x1d4>
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f4:	d102      	bne.n	80037fc <HAL_SPI_Receive+0x1da>
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d106      	bne.n	800380a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003808:	e01a      	b.n	8003840 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800380e:	b29b      	uxth	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1c9      	bne.n	80037a8 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	6839      	ldr	r1, [r7, #0]
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 fb5b 	bl	8003ed4 <SPI_EndRxTransaction>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d002      	beq.n	800382a <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2220      	movs	r2, #32
 8003828:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	75fb      	strb	r3, [r7, #23]
 8003836:	e003      	b.n	8003840 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003848:	7dfb      	ldrb	r3, [r7, #23]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b08c      	sub	sp, #48	; 0x30
 8003856:	af00      	add	r7, sp, #0
 8003858:	60f8      	str	r0, [r7, #12]
 800385a:	60b9      	str	r1, [r7, #8]
 800385c:	607a      	str	r2, [r7, #4]
 800385e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003860:	2301      	movs	r3, #1
 8003862:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003864:	2300      	movs	r3, #0
 8003866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003870:	2b01      	cmp	r3, #1
 8003872:	d101      	bne.n	8003878 <HAL_SPI_TransmitReceive+0x26>
 8003874:	2302      	movs	r3, #2
 8003876:	e198      	b.n	8003baa <HAL_SPI_TransmitReceive+0x358>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003880:	f7fe fd6e 	bl	8002360 <HAL_GetTick>
 8003884:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800388c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003896:	887b      	ldrh	r3, [r7, #2]
 8003898:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800389a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d00f      	beq.n	80038c2 <HAL_SPI_TransmitReceive+0x70>
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038a8:	d107      	bne.n	80038ba <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d103      	bne.n	80038ba <HAL_SPI_TransmitReceive+0x68>
 80038b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	d003      	beq.n	80038c2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80038ba:	2302      	movs	r3, #2
 80038bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80038c0:	e16d      	b.n	8003b9e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d005      	beq.n	80038d4 <HAL_SPI_TransmitReceive+0x82>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d002      	beq.n	80038d4 <HAL_SPI_TransmitReceive+0x82>
 80038ce:	887b      	ldrh	r3, [r7, #2]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d103      	bne.n	80038dc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80038da:	e160      	b.n	8003b9e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b04      	cmp	r3, #4
 80038e6:	d003      	beq.n	80038f0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2205      	movs	r2, #5
 80038ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	887a      	ldrh	r2, [r7, #2]
 8003900:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	887a      	ldrh	r2, [r7, #2]
 8003906:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	887a      	ldrh	r2, [r7, #2]
 8003912:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	887a      	ldrh	r2, [r7, #2]
 8003918:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003930:	2b40      	cmp	r3, #64	; 0x40
 8003932:	d007      	beq.n	8003944 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003942:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800394c:	d17c      	bne.n	8003a48 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d002      	beq.n	800395c <HAL_SPI_TransmitReceive+0x10a>
 8003956:	8b7b      	ldrh	r3, [r7, #26]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d16a      	bne.n	8003a32 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003960:	881a      	ldrh	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396c:	1c9a      	adds	r2, r3, #2
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003976:	b29b      	uxth	r3, r3
 8003978:	3b01      	subs	r3, #1
 800397a:	b29a      	uxth	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003980:	e057      	b.n	8003a32 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b02      	cmp	r3, #2
 800398e:	d11b      	bne.n	80039c8 <HAL_SPI_TransmitReceive+0x176>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003994:	b29b      	uxth	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d016      	beq.n	80039c8 <HAL_SPI_TransmitReceive+0x176>
 800399a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399c:	2b01      	cmp	r3, #1
 800399e:	d113      	bne.n	80039c8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a4:	881a      	ldrh	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b0:	1c9a      	adds	r2, r3, #2
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039c4:	2300      	movs	r3, #0
 80039c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d119      	bne.n	8003a0a <HAL_SPI_TransmitReceive+0x1b8>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039da:	b29b      	uxth	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d014      	beq.n	8003a0a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ea:	b292      	uxth	r2, r2
 80039ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f2:	1c9a      	adds	r2, r3, #2
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a06:	2301      	movs	r3, #1
 8003a08:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a0a:	f7fe fca9 	bl	8002360 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d80b      	bhi.n	8003a32 <HAL_SPI_TransmitReceive+0x1e0>
 8003a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a20:	d007      	beq.n	8003a32 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003a30:	e0b5      	b.n	8003b9e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1a2      	bne.n	8003982 <HAL_SPI_TransmitReceive+0x130>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d19d      	bne.n	8003982 <HAL_SPI_TransmitReceive+0x130>
 8003a46:	e080      	b.n	8003b4a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <HAL_SPI_TransmitReceive+0x204>
 8003a50:	8b7b      	ldrh	r3, [r7, #26]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d16f      	bne.n	8003b36 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	330c      	adds	r3, #12
 8003a60:	7812      	ldrb	r2, [r2, #0]
 8003a62:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a7c:	e05b      	b.n	8003b36 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d11c      	bne.n	8003ac6 <HAL_SPI_TransmitReceive+0x274>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d017      	beq.n	8003ac6 <HAL_SPI_TransmitReceive+0x274>
 8003a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d114      	bne.n	8003ac6 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	330c      	adds	r3, #12
 8003aa6:	7812      	ldrb	r2, [r2, #0]
 8003aa8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	1c5a      	adds	r2, r3, #1
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	3b01      	subs	r3, #1
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d119      	bne.n	8003b08 <HAL_SPI_TransmitReceive+0x2b6>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d014      	beq.n	8003b08 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68da      	ldr	r2, [r3, #12]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae8:	b2d2      	uxtb	r2, r2
 8003aea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af0:	1c5a      	adds	r2, r3, #1
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	3b01      	subs	r3, #1
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b04:	2301      	movs	r3, #1
 8003b06:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b08:	f7fe fc2a 	bl	8002360 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d803      	bhi.n	8003b20 <HAL_SPI_TransmitReceive+0x2ce>
 8003b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1e:	d102      	bne.n	8003b26 <HAL_SPI_TransmitReceive+0x2d4>
 8003b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d107      	bne.n	8003b36 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003b34:	e033      	b.n	8003b9e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d19e      	bne.n	8003a7e <HAL_SPI_TransmitReceive+0x22c>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d199      	bne.n	8003a7e <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 fa12 	bl	8003f78 <SPI_EndRxTxTransaction>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d006      	beq.n	8003b68 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2220      	movs	r2, #32
 8003b64:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003b66:	e01a      	b.n	8003b9e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10a      	bne.n	8003b86 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b70:	2300      	movs	r3, #0
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	617b      	str	r3, [r7, #20]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b94:	e003      	b.n	8003b9e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ba6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3730      	adds	r7, #48	; 0x30
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b088      	sub	sp, #32
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10e      	bne.n	8003bf4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d009      	beq.n	8003bf4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d004      	beq.n	8003bf4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	4798      	blx	r3
    return;
 8003bf2:	e0b7      	b.n	8003d64 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d009      	beq.n	8003c12 <HAL_SPI_IRQHandler+0x5e>
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d004      	beq.n	8003c12 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	4798      	blx	r3
    return;
 8003c10:	e0a8      	b.n	8003d64 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	f003 0320 	and.w	r3, r3, #32
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d105      	bne.n	8003c28 <HAL_SPI_IRQHandler+0x74>
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 809e 	beq.w	8003d64 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	f003 0320 	and.w	r3, r3, #32
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 8098 	beq.w	8003d64 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d023      	beq.n	8003c86 <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b03      	cmp	r3, #3
 8003c48:	d011      	beq.n	8003c6e <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4e:	f043 0204 	orr.w	r2, r3, #4
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c56:	2300      	movs	r3, #0
 8003c58:	617b      	str	r3, [r7, #20]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	617b      	str	r3, [r7, #20]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	617b      	str	r3, [r7, #20]
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	e00b      	b.n	8003c86 <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c6e:	2300      	movs	r3, #0
 8003c70:	613b      	str	r3, [r7, #16]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	613b      	str	r3, [r7, #16]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	613b      	str	r3, [r7, #16]
 8003c82:	693b      	ldr	r3, [r7, #16]
        return;
 8003c84:	e06e      	b.n	8003d64 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d014      	beq.n	8003cba <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c94:	f043 0201 	orr.w	r2, r3, #1
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	60fb      	str	r3, [r7, #12]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d04f      	beq.n	8003d62 <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003cd0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d104      	bne.n	8003cee <HAL_SPI_IRQHandler+0x13a>
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d034      	beq.n	8003d58 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0203 	bic.w	r2, r2, #3
 8003cfc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d011      	beq.n	8003d2a <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0a:	4a18      	ldr	r2, [pc, #96]	; (8003d6c <HAL_SPI_IRQHandler+0x1b8>)
 8003d0c:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fe fc60 	bl	80025d8 <HAL_DMA_Abort_IT>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d005      	beq.n	8003d2a <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d016      	beq.n	8003d60 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d36:	4a0d      	ldr	r2, [pc, #52]	; (8003d6c <HAL_SPI_IRQHandler+0x1b8>)
 8003d38:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fe fc4a 	bl	80025d8 <HAL_DMA_Abort_IT>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00a      	beq.n	8003d60 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003d56:	e003      	b.n	8003d60 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 f809 	bl	8003d70 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003d5e:	e000      	b.n	8003d62 <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 8003d60:	bf00      	nop
    return;
 8003d62:	bf00      	nop
  }
}
 8003d64:	3720      	adds	r7, #32
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	08003d9d 	.word	0x08003d9d

08003d70 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bc80      	pop	{r7}
 8003d80:	4770      	bx	lr

08003d82 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d90:	b2db      	uxtb	r3, r3
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bc80      	pop	{r7}
 8003d9a:	4770      	bx	lr

08003d9c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f7ff ffda 	bl	8003d70 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003dbc:	bf00      	nop
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b088      	sub	sp, #32
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	603b      	str	r3, [r7, #0]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003dd4:	f7fe fac4 	bl	8002360 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ddc:	1a9b      	subs	r3, r3, r2
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	4413      	add	r3, r2
 8003de2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003de4:	f7fe fabc 	bl	8002360 <HAL_GetTick>
 8003de8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003dea:	4b39      	ldr	r3, [pc, #228]	; (8003ed0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	015b      	lsls	r3, r3, #5
 8003df0:	0d1b      	lsrs	r3, r3, #20
 8003df2:	69fa      	ldr	r2, [r7, #28]
 8003df4:	fb02 f303 	mul.w	r3, r2, r3
 8003df8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dfa:	e054      	b.n	8003ea6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e02:	d050      	beq.n	8003ea6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e04:	f7fe faac 	bl	8002360 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	69fa      	ldr	r2, [r7, #28]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d902      	bls.n	8003e1a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d13d      	bne.n	8003e96 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e32:	d111      	bne.n	8003e58 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e3c:	d004      	beq.n	8003e48 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e46:	d107      	bne.n	8003e58 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e60:	d10f      	bne.n	8003e82 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e017      	b.n	8003ec6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689a      	ldr	r2, [r3, #8]
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	bf0c      	ite	eq
 8003eb6:	2301      	moveq	r3, #1
 8003eb8:	2300      	movne	r3, #0
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	79fb      	ldrb	r3, [r7, #7]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d19b      	bne.n	8003dfc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3720      	adds	r7, #32
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	20000000 	.word	0x20000000

08003ed4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af02      	add	r7, sp, #8
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ee8:	d111      	bne.n	8003f0e <SPI_EndRxTransaction+0x3a>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ef2:	d004      	beq.n	8003efe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003efc:	d107      	bne.n	8003f0e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f0c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f16:	d117      	bne.n	8003f48 <SPI_EndRxTransaction+0x74>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f20:	d112      	bne.n	8003f48 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f7ff ff49 	bl	8003dc4 <SPI_WaitFlagStateUntilTimeout>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d01a      	beq.n	8003f6e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3c:	f043 0220 	orr.w	r2, r3, #32
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e013      	b.n	8003f70 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	2180      	movs	r1, #128	; 0x80
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f7ff ff36 	bl	8003dc4 <SPI_WaitFlagStateUntilTimeout>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d007      	beq.n	8003f6e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f62:	f043 0220 	orr.w	r2, r3, #32
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e000      	b.n	8003f70 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af02      	add	r7, sp, #8
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	2180      	movs	r1, #128	; 0x80
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f7ff ff18 	bl	8003dc4 <SPI_WaitFlagStateUntilTimeout>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d007      	beq.n	8003faa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9e:	f043 0220 	orr.w	r2, r3, #32
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e000      	b.n	8003fac <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e041      	b.n	800404a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d106      	bne.n	8003fe0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7fd ffca 	bl	8001f74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3304      	adds	r3, #4
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	4610      	mov	r0, r2
 8003ff4:	f000 fa74 	bl	80044e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
	...

08004054 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b01      	cmp	r3, #1
 8004066:	d001      	beq.n	800406c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e032      	b.n	80040d2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a18      	ldr	r2, [pc, #96]	; (80040dc <HAL_TIM_Base_Start+0x88>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d00e      	beq.n	800409c <HAL_TIM_Base_Start+0x48>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004086:	d009      	beq.n	800409c <HAL_TIM_Base_Start+0x48>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a14      	ldr	r2, [pc, #80]	; (80040e0 <HAL_TIM_Base_Start+0x8c>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d004      	beq.n	800409c <HAL_TIM_Base_Start+0x48>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a13      	ldr	r2, [pc, #76]	; (80040e4 <HAL_TIM_Base_Start+0x90>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d111      	bne.n	80040c0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f003 0307 	and.w	r3, r3, #7
 80040a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2b06      	cmp	r3, #6
 80040ac:	d010      	beq.n	80040d0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f042 0201 	orr.w	r2, r2, #1
 80040bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040be:	e007      	b.n	80040d0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0201 	orr.w	r2, r2, #1
 80040ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bc80      	pop	{r7}
 80040da:	4770      	bx	lr
 80040dc:	40012c00 	.word	0x40012c00
 80040e0:	40000400 	.word	0x40000400
 80040e4:	40000800 	.word	0x40000800

080040e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d122      	bne.n	8004144 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b02      	cmp	r3, #2
 800410a:	d11b      	bne.n	8004144 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f06f 0202 	mvn.w	r2, #2
 8004114:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	f003 0303 	and.w	r3, r3, #3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f9bd 	bl	80044aa <HAL_TIM_IC_CaptureCallback>
 8004130:	e005      	b.n	800413e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f9b0 	bl	8004498 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 f9bf 	bl	80044bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	f003 0304 	and.w	r3, r3, #4
 800414e:	2b04      	cmp	r3, #4
 8004150:	d122      	bne.n	8004198 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b04      	cmp	r3, #4
 800415e:	d11b      	bne.n	8004198 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f06f 0204 	mvn.w	r2, #4
 8004168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2202      	movs	r2, #2
 800416e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f993 	bl	80044aa <HAL_TIM_IC_CaptureCallback>
 8004184:	e005      	b.n	8004192 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f986 	bl	8004498 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f995 	bl	80044bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	2b08      	cmp	r3, #8
 80041a4:	d122      	bne.n	80041ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f003 0308 	and.w	r3, r3, #8
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d11b      	bne.n	80041ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f06f 0208 	mvn.w	r2, #8
 80041bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2204      	movs	r2, #4
 80041c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	f003 0303 	and.w	r3, r3, #3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d003      	beq.n	80041da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 f969 	bl	80044aa <HAL_TIM_IC_CaptureCallback>
 80041d8:	e005      	b.n	80041e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f95c 	bl	8004498 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 f96b 	bl	80044bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f003 0310 	and.w	r3, r3, #16
 80041f6:	2b10      	cmp	r3, #16
 80041f8:	d122      	bne.n	8004240 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f003 0310 	and.w	r3, r3, #16
 8004204:	2b10      	cmp	r3, #16
 8004206:	d11b      	bne.n	8004240 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f06f 0210 	mvn.w	r2, #16
 8004210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2208      	movs	r2, #8
 8004216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004222:	2b00      	cmp	r3, #0
 8004224:	d003      	beq.n	800422e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f93f 	bl	80044aa <HAL_TIM_IC_CaptureCallback>
 800422c:	e005      	b.n	800423a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f932 	bl	8004498 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f941 	bl	80044bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b01      	cmp	r3, #1
 800424c:	d10e      	bne.n	800426c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f003 0301 	and.w	r3, r3, #1
 8004258:	2b01      	cmp	r3, #1
 800425a:	d107      	bne.n	800426c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f06f 0201 	mvn.w	r2, #1
 8004264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f90d 	bl	8004486 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004276:	2b80      	cmp	r3, #128	; 0x80
 8004278:	d10e      	bne.n	8004298 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004284:	2b80      	cmp	r3, #128	; 0x80
 8004286:	d107      	bne.n	8004298 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 fa83 	bl	800479e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a2:	2b40      	cmp	r3, #64	; 0x40
 80042a4:	d10e      	bne.n	80042c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b0:	2b40      	cmp	r3, #64	; 0x40
 80042b2:	d107      	bne.n	80042c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f905 	bl	80044ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	f003 0320 	and.w	r3, r3, #32
 80042ce:	2b20      	cmp	r3, #32
 80042d0:	d10e      	bne.n	80042f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f003 0320 	and.w	r3, r3, #32
 80042dc:	2b20      	cmp	r3, #32
 80042de:	d107      	bne.n	80042f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f06f 0220 	mvn.w	r2, #32
 80042e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 fa4e 	bl	800478c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042f0:	bf00      	nop
 80042f2:	3708      	adds	r7, #8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004302:	2300      	movs	r3, #0
 8004304:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800430c:	2b01      	cmp	r3, #1
 800430e:	d101      	bne.n	8004314 <HAL_TIM_ConfigClockSource+0x1c>
 8004310:	2302      	movs	r3, #2
 8004312:	e0b4      	b.n	800447e <HAL_TIM_ConfigClockSource+0x186>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2202      	movs	r2, #2
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004332:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800433a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800434c:	d03e      	beq.n	80043cc <HAL_TIM_ConfigClockSource+0xd4>
 800434e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004352:	f200 8087 	bhi.w	8004464 <HAL_TIM_ConfigClockSource+0x16c>
 8004356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800435a:	f000 8086 	beq.w	800446a <HAL_TIM_ConfigClockSource+0x172>
 800435e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004362:	d87f      	bhi.n	8004464 <HAL_TIM_ConfigClockSource+0x16c>
 8004364:	2b70      	cmp	r3, #112	; 0x70
 8004366:	d01a      	beq.n	800439e <HAL_TIM_ConfigClockSource+0xa6>
 8004368:	2b70      	cmp	r3, #112	; 0x70
 800436a:	d87b      	bhi.n	8004464 <HAL_TIM_ConfigClockSource+0x16c>
 800436c:	2b60      	cmp	r3, #96	; 0x60
 800436e:	d050      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0x11a>
 8004370:	2b60      	cmp	r3, #96	; 0x60
 8004372:	d877      	bhi.n	8004464 <HAL_TIM_ConfigClockSource+0x16c>
 8004374:	2b50      	cmp	r3, #80	; 0x50
 8004376:	d03c      	beq.n	80043f2 <HAL_TIM_ConfigClockSource+0xfa>
 8004378:	2b50      	cmp	r3, #80	; 0x50
 800437a:	d873      	bhi.n	8004464 <HAL_TIM_ConfigClockSource+0x16c>
 800437c:	2b40      	cmp	r3, #64	; 0x40
 800437e:	d058      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0x13a>
 8004380:	2b40      	cmp	r3, #64	; 0x40
 8004382:	d86f      	bhi.n	8004464 <HAL_TIM_ConfigClockSource+0x16c>
 8004384:	2b30      	cmp	r3, #48	; 0x30
 8004386:	d064      	beq.n	8004452 <HAL_TIM_ConfigClockSource+0x15a>
 8004388:	2b30      	cmp	r3, #48	; 0x30
 800438a:	d86b      	bhi.n	8004464 <HAL_TIM_ConfigClockSource+0x16c>
 800438c:	2b20      	cmp	r3, #32
 800438e:	d060      	beq.n	8004452 <HAL_TIM_ConfigClockSource+0x15a>
 8004390:	2b20      	cmp	r3, #32
 8004392:	d867      	bhi.n	8004464 <HAL_TIM_ConfigClockSource+0x16c>
 8004394:	2b00      	cmp	r3, #0
 8004396:	d05c      	beq.n	8004452 <HAL_TIM_ConfigClockSource+0x15a>
 8004398:	2b10      	cmp	r3, #16
 800439a:	d05a      	beq.n	8004452 <HAL_TIM_ConfigClockSource+0x15a>
 800439c:	e062      	b.n	8004464 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043ae:	f000 f970 	bl	8004692 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	609a      	str	r2, [r3, #8]
      break;
 80043ca:	e04f      	b.n	800446c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043dc:	f000 f959 	bl	8004692 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689a      	ldr	r2, [r3, #8]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043ee:	609a      	str	r2, [r3, #8]
      break;
 80043f0:	e03c      	b.n	800446c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043fe:	461a      	mov	r2, r3
 8004400:	f000 f8d0 	bl	80045a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2150      	movs	r1, #80	; 0x50
 800440a:	4618      	mov	r0, r3
 800440c:	f000 f927 	bl	800465e <TIM_ITRx_SetConfig>
      break;
 8004410:	e02c      	b.n	800446c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800441e:	461a      	mov	r2, r3
 8004420:	f000 f8ee 	bl	8004600 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2160      	movs	r1, #96	; 0x60
 800442a:	4618      	mov	r0, r3
 800442c:	f000 f917 	bl	800465e <TIM_ITRx_SetConfig>
      break;
 8004430:	e01c      	b.n	800446c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800443e:	461a      	mov	r2, r3
 8004440:	f000 f8b0 	bl	80045a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2140      	movs	r1, #64	; 0x40
 800444a:	4618      	mov	r0, r3
 800444c:	f000 f907 	bl	800465e <TIM_ITRx_SetConfig>
      break;
 8004450:	e00c      	b.n	800446c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4619      	mov	r1, r3
 800445c:	4610      	mov	r0, r2
 800445e:	f000 f8fe 	bl	800465e <TIM_ITRx_SetConfig>
      break;
 8004462:	e003      	b.n	800446c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	73fb      	strb	r3, [r7, #15]
      break;
 8004468:	e000      	b.n	800446c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800446a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800447c:	7bfb      	ldrb	r3, [r7, #15]
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004486:	b480      	push	{r7}
 8004488:	b083      	sub	sp, #12
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800448e:	bf00      	nop
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	bc80      	pop	{r7}
 8004496:	4770      	bx	lr

08004498 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bc80      	pop	{r7}
 80044a8:	4770      	bx	lr

080044aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b083      	sub	sp, #12
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044b2:	bf00      	nop
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bc80      	pop	{r7}
 80044ba:	4770      	bx	lr

080044bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bc80      	pop	{r7}
 80044cc:	4770      	bx	lr

080044ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b083      	sub	sp, #12
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	bc80      	pop	{r7}
 80044de:	4770      	bx	lr

080044e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a29      	ldr	r2, [pc, #164]	; (8004598 <TIM_Base_SetConfig+0xb8>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d00b      	beq.n	8004510 <TIM_Base_SetConfig+0x30>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044fe:	d007      	beq.n	8004510 <TIM_Base_SetConfig+0x30>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a26      	ldr	r2, [pc, #152]	; (800459c <TIM_Base_SetConfig+0xbc>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d003      	beq.n	8004510 <TIM_Base_SetConfig+0x30>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a25      	ldr	r2, [pc, #148]	; (80045a0 <TIM_Base_SetConfig+0xc0>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d108      	bne.n	8004522 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004516:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	4313      	orrs	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a1c      	ldr	r2, [pc, #112]	; (8004598 <TIM_Base_SetConfig+0xb8>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d00b      	beq.n	8004542 <TIM_Base_SetConfig+0x62>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004530:	d007      	beq.n	8004542 <TIM_Base_SetConfig+0x62>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a19      	ldr	r2, [pc, #100]	; (800459c <TIM_Base_SetConfig+0xbc>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d003      	beq.n	8004542 <TIM_Base_SetConfig+0x62>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a18      	ldr	r2, [pc, #96]	; (80045a0 <TIM_Base_SetConfig+0xc0>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d108      	bne.n	8004554 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004548:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	4313      	orrs	r3, r2
 8004552:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	4313      	orrs	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	689a      	ldr	r2, [r3, #8]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a07      	ldr	r2, [pc, #28]	; (8004598 <TIM_Base_SetConfig+0xb8>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d103      	bne.n	8004588 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	691a      	ldr	r2, [r3, #16]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	615a      	str	r2, [r3, #20]
}
 800458e:	bf00      	nop
 8004590:	3714      	adds	r7, #20
 8004592:	46bd      	mov	sp, r7
 8004594:	bc80      	pop	{r7}
 8004596:	4770      	bx	lr
 8004598:	40012c00 	.word	0x40012c00
 800459c:	40000400 	.word	0x40000400
 80045a0:	40000800 	.word	0x40000800

080045a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b087      	sub	sp, #28
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	f023 0201 	bic.w	r2, r3, #1
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	011b      	lsls	r3, r3, #4
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f023 030a 	bic.w	r3, r3, #10
 80045e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	621a      	str	r2, [r3, #32]
}
 80045f6:	bf00      	nop
 80045f8:	371c      	adds	r7, #28
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr

08004600 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004600:	b480      	push	{r7}
 8004602:	b087      	sub	sp, #28
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	f023 0210 	bic.w	r2, r3, #16
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800462a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	031b      	lsls	r3, r3, #12
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	4313      	orrs	r3, r2
 8004634:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800463c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	011b      	lsls	r3, r3, #4
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	4313      	orrs	r3, r2
 8004646:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	621a      	str	r2, [r3, #32]
}
 8004654:	bf00      	nop
 8004656:	371c      	adds	r7, #28
 8004658:	46bd      	mov	sp, r7
 800465a:	bc80      	pop	{r7}
 800465c:	4770      	bx	lr

0800465e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800465e:	b480      	push	{r7}
 8004660:	b085      	sub	sp, #20
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
 8004666:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004674:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	4313      	orrs	r3, r2
 800467c:	f043 0307 	orr.w	r3, r3, #7
 8004680:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	609a      	str	r2, [r3, #8]
}
 8004688:	bf00      	nop
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	bc80      	pop	{r7}
 8004690:	4770      	bx	lr

08004692 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004692:	b480      	push	{r7}
 8004694:	b087      	sub	sp, #28
 8004696:	af00      	add	r7, sp, #0
 8004698:	60f8      	str	r0, [r7, #12]
 800469a:	60b9      	str	r1, [r7, #8]
 800469c:	607a      	str	r2, [r7, #4]
 800469e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	021a      	lsls	r2, r3, #8
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	431a      	orrs	r2, r3
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	4313      	orrs	r3, r2
 80046be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	609a      	str	r2, [r3, #8]
}
 80046c6:	bf00      	nop
 80046c8:	371c      	adds	r7, #28
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bc80      	pop	{r7}
 80046ce:	4770      	bx	lr

080046d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d101      	bne.n	80046e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046e4:	2302      	movs	r3, #2
 80046e6:	e046      	b.n	8004776 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800470e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a16      	ldr	r2, [pc, #88]	; (8004780 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d00e      	beq.n	800474a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004734:	d009      	beq.n	800474a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a12      	ldr	r2, [pc, #72]	; (8004784 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d004      	beq.n	800474a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a10      	ldr	r2, [pc, #64]	; (8004788 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d10c      	bne.n	8004764 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004750:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	4313      	orrs	r3, r2
 800475a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3714      	adds	r7, #20
 800477a:	46bd      	mov	sp, r7
 800477c:	bc80      	pop	{r7}
 800477e:	4770      	bx	lr
 8004780:	40012c00 	.word	0x40012c00
 8004784:	40000400 	.word	0x40000400
 8004788:	40000800 	.word	0x40000800

0800478c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	bc80      	pop	{r7}
 800479c:	4770      	bx	lr

0800479e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047a6:	bf00      	nop
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bc80      	pop	{r7}
 80047ae:	4770      	bx	lr

080047b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e042      	b.n	8004848 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d106      	bne.n	80047dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7fd fbf0 	bl	8001fbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2224      	movs	r2, #36	; 0x24
 80047e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 f91d 	bl	8004a34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	691a      	ldr	r2, [r3, #16]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004808:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	695a      	ldr	r2, [r3, #20]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004818:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68da      	ldr	r2, [r3, #12]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004828:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2220      	movs	r2, #32
 8004834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2220      	movs	r2, #32
 800483c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3708      	adds	r7, #8
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b08a      	sub	sp, #40	; 0x28
 8004854:	af02      	add	r7, sp, #8
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	603b      	str	r3, [r7, #0]
 800485c:	4613      	mov	r3, r2
 800485e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004860:	2300      	movs	r3, #0
 8004862:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b20      	cmp	r3, #32
 800486e:	d16d      	bne.n	800494c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d002      	beq.n	800487c <HAL_UART_Transmit+0x2c>
 8004876:	88fb      	ldrh	r3, [r7, #6]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d101      	bne.n	8004880 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e066      	b.n	800494e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2221      	movs	r2, #33	; 0x21
 800488a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800488e:	f7fd fd67 	bl	8002360 <HAL_GetTick>
 8004892:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	88fa      	ldrh	r2, [r7, #6]
 8004898:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	88fa      	ldrh	r2, [r7, #6]
 800489e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a8:	d108      	bne.n	80048bc <HAL_UART_Transmit+0x6c>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d104      	bne.n	80048bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80048b2:	2300      	movs	r3, #0
 80048b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	61bb      	str	r3, [r7, #24]
 80048ba:	e003      	b.n	80048c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048c0:	2300      	movs	r3, #0
 80048c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048c4:	e02a      	b.n	800491c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	2200      	movs	r2, #0
 80048ce:	2180      	movs	r1, #128	; 0x80
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 f840 	bl	8004956 <UART_WaitOnFlagUntilTimeout>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e036      	b.n	800494e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10b      	bne.n	80048fe <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	881b      	ldrh	r3, [r3, #0]
 80048ea:	461a      	mov	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	3302      	adds	r3, #2
 80048fa:	61bb      	str	r3, [r7, #24]
 80048fc:	e007      	b.n	800490e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	781a      	ldrb	r2, [r3, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	3301      	adds	r3, #1
 800490c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004912:	b29b      	uxth	r3, r3
 8004914:	3b01      	subs	r3, #1
 8004916:	b29a      	uxth	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004920:	b29b      	uxth	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1cf      	bne.n	80048c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	2200      	movs	r2, #0
 800492e:	2140      	movs	r1, #64	; 0x40
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f000 f810 	bl	8004956 <UART_WaitOnFlagUntilTimeout>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d001      	beq.n	8004940 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e006      	b.n	800494e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2220      	movs	r2, #32
 8004944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004948:	2300      	movs	r3, #0
 800494a:	e000      	b.n	800494e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800494c:	2302      	movs	r3, #2
  }
}
 800494e:	4618      	mov	r0, r3
 8004950:	3720      	adds	r7, #32
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b090      	sub	sp, #64	; 0x40
 800495a:	af00      	add	r7, sp, #0
 800495c:	60f8      	str	r0, [r7, #12]
 800495e:	60b9      	str	r1, [r7, #8]
 8004960:	603b      	str	r3, [r7, #0]
 8004962:	4613      	mov	r3, r2
 8004964:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004966:	e050      	b.n	8004a0a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800496a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496e:	d04c      	beq.n	8004a0a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004972:	2b00      	cmp	r3, #0
 8004974:	d007      	beq.n	8004986 <UART_WaitOnFlagUntilTimeout+0x30>
 8004976:	f7fd fcf3 	bl	8002360 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004982:	429a      	cmp	r2, r3
 8004984:	d241      	bcs.n	8004a0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	330c      	adds	r3, #12
 800498c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004990:	e853 3f00 	ldrex	r3, [r3]
 8004994:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800499c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	330c      	adds	r3, #12
 80049a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049a6:	637a      	str	r2, [r7, #52]	; 0x34
 80049a8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049ae:	e841 2300 	strex	r3, r2, [r1]
 80049b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1e5      	bne.n	8004986 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	3314      	adds	r3, #20
 80049c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	e853 3f00 	ldrex	r3, [r3]
 80049c8:	613b      	str	r3, [r7, #16]
   return(result);
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	f023 0301 	bic.w	r3, r3, #1
 80049d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	3314      	adds	r3, #20
 80049d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049da:	623a      	str	r2, [r7, #32]
 80049dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049de:	69f9      	ldr	r1, [r7, #28]
 80049e0:	6a3a      	ldr	r2, [r7, #32]
 80049e2:	e841 2300 	strex	r3, r2, [r1]
 80049e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1e5      	bne.n	80049ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2220      	movs	r2, #32
 80049f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2220      	movs	r2, #32
 80049fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e00f      	b.n	8004a2a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	4013      	ands	r3, r2
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	bf0c      	ite	eq
 8004a1a:	2301      	moveq	r3, #1
 8004a1c:	2300      	movne	r3, #0
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	461a      	mov	r2, r3
 8004a22:	79fb      	ldrb	r3, [r7, #7]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d09f      	beq.n	8004968 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3740      	adds	r7, #64	; 0x40
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
	...

08004a34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68da      	ldr	r2, [r3, #12]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689a      	ldr	r2, [r3, #8]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004a6e:	f023 030c 	bic.w	r3, r3, #12
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6812      	ldr	r2, [r2, #0]
 8004a76:	68b9      	ldr	r1, [r7, #8]
 8004a78:	430b      	orrs	r3, r1
 8004a7a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	699a      	ldr	r2, [r3, #24]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a2c      	ldr	r2, [pc, #176]	; (8004b48 <UART_SetConfig+0x114>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d103      	bne.n	8004aa4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004a9c:	f7fe fbc8 	bl	8003230 <HAL_RCC_GetPCLK2Freq>
 8004aa0:	60f8      	str	r0, [r7, #12]
 8004aa2:	e002      	b.n	8004aaa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004aa4:	f7fe fbb0 	bl	8003208 <HAL_RCC_GetPCLK1Freq>
 8004aa8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	4613      	mov	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4413      	add	r3, r2
 8004ab2:	009a      	lsls	r2, r3, #2
 8004ab4:	441a      	add	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac0:	4a22      	ldr	r2, [pc, #136]	; (8004b4c <UART_SetConfig+0x118>)
 8004ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac6:	095b      	lsrs	r3, r3, #5
 8004ac8:	0119      	lsls	r1, r3, #4
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	4613      	mov	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	009a      	lsls	r2, r3, #2
 8004ad4:	441a      	add	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ae0:	4b1a      	ldr	r3, [pc, #104]	; (8004b4c <UART_SetConfig+0x118>)
 8004ae2:	fba3 0302 	umull	r0, r3, r3, r2
 8004ae6:	095b      	lsrs	r3, r3, #5
 8004ae8:	2064      	movs	r0, #100	; 0x64
 8004aea:	fb00 f303 	mul.w	r3, r0, r3
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	011b      	lsls	r3, r3, #4
 8004af2:	3332      	adds	r3, #50	; 0x32
 8004af4:	4a15      	ldr	r2, [pc, #84]	; (8004b4c <UART_SetConfig+0x118>)
 8004af6:	fba2 2303 	umull	r2, r3, r2, r3
 8004afa:	095b      	lsrs	r3, r3, #5
 8004afc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b00:	4419      	add	r1, r3
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	4613      	mov	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	009a      	lsls	r2, r3, #2
 8004b0c:	441a      	add	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b18:	4b0c      	ldr	r3, [pc, #48]	; (8004b4c <UART_SetConfig+0x118>)
 8004b1a:	fba3 0302 	umull	r0, r3, r3, r2
 8004b1e:	095b      	lsrs	r3, r3, #5
 8004b20:	2064      	movs	r0, #100	; 0x64
 8004b22:	fb00 f303 	mul.w	r3, r0, r3
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	011b      	lsls	r3, r3, #4
 8004b2a:	3332      	adds	r3, #50	; 0x32
 8004b2c:	4a07      	ldr	r2, [pc, #28]	; (8004b4c <UART_SetConfig+0x118>)
 8004b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b32:	095b      	lsrs	r3, r3, #5
 8004b34:	f003 020f 	and.w	r2, r3, #15
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	440a      	add	r2, r1
 8004b3e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004b40:	bf00      	nop
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	40013800 	.word	0x40013800
 8004b4c:	51eb851f 	.word	0x51eb851f

08004b50 <__cvt>:
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b56:	461f      	mov	r7, r3
 8004b58:	bfbb      	ittet	lt
 8004b5a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004b5e:	461f      	movlt	r7, r3
 8004b60:	2300      	movge	r3, #0
 8004b62:	232d      	movlt	r3, #45	; 0x2d
 8004b64:	b088      	sub	sp, #32
 8004b66:	4614      	mov	r4, r2
 8004b68:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004b6a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004b6c:	7013      	strb	r3, [r2, #0]
 8004b6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004b70:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004b74:	f023 0820 	bic.w	r8, r3, #32
 8004b78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004b7c:	d005      	beq.n	8004b8a <__cvt+0x3a>
 8004b7e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004b82:	d100      	bne.n	8004b86 <__cvt+0x36>
 8004b84:	3501      	adds	r5, #1
 8004b86:	2302      	movs	r3, #2
 8004b88:	e000      	b.n	8004b8c <__cvt+0x3c>
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	aa07      	add	r2, sp, #28
 8004b8e:	9204      	str	r2, [sp, #16]
 8004b90:	aa06      	add	r2, sp, #24
 8004b92:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004b96:	e9cd 3500 	strd	r3, r5, [sp]
 8004b9a:	4622      	mov	r2, r4
 8004b9c:	463b      	mov	r3, r7
 8004b9e:	f001 f87f 	bl	8005ca0 <_dtoa_r>
 8004ba2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004ba6:	4606      	mov	r6, r0
 8004ba8:	d102      	bne.n	8004bb0 <__cvt+0x60>
 8004baa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004bac:	07db      	lsls	r3, r3, #31
 8004bae:	d522      	bpl.n	8004bf6 <__cvt+0xa6>
 8004bb0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004bb4:	eb06 0905 	add.w	r9, r6, r5
 8004bb8:	d110      	bne.n	8004bdc <__cvt+0x8c>
 8004bba:	7833      	ldrb	r3, [r6, #0]
 8004bbc:	2b30      	cmp	r3, #48	; 0x30
 8004bbe:	d10a      	bne.n	8004bd6 <__cvt+0x86>
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	4620      	mov	r0, r4
 8004bc6:	4639      	mov	r1, r7
 8004bc8:	f7fb feee 	bl	80009a8 <__aeabi_dcmpeq>
 8004bcc:	b918      	cbnz	r0, 8004bd6 <__cvt+0x86>
 8004bce:	f1c5 0501 	rsb	r5, r5, #1
 8004bd2:	f8ca 5000 	str.w	r5, [sl]
 8004bd6:	f8da 3000 	ldr.w	r3, [sl]
 8004bda:	4499      	add	r9, r3
 8004bdc:	2200      	movs	r2, #0
 8004bde:	2300      	movs	r3, #0
 8004be0:	4620      	mov	r0, r4
 8004be2:	4639      	mov	r1, r7
 8004be4:	f7fb fee0 	bl	80009a8 <__aeabi_dcmpeq>
 8004be8:	b108      	cbz	r0, 8004bee <__cvt+0x9e>
 8004bea:	f8cd 901c 	str.w	r9, [sp, #28]
 8004bee:	2230      	movs	r2, #48	; 0x30
 8004bf0:	9b07      	ldr	r3, [sp, #28]
 8004bf2:	454b      	cmp	r3, r9
 8004bf4:	d307      	bcc.n	8004c06 <__cvt+0xb6>
 8004bf6:	4630      	mov	r0, r6
 8004bf8:	9b07      	ldr	r3, [sp, #28]
 8004bfa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004bfc:	1b9b      	subs	r3, r3, r6
 8004bfe:	6013      	str	r3, [r2, #0]
 8004c00:	b008      	add	sp, #32
 8004c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c06:	1c59      	adds	r1, r3, #1
 8004c08:	9107      	str	r1, [sp, #28]
 8004c0a:	701a      	strb	r2, [r3, #0]
 8004c0c:	e7f0      	b.n	8004bf0 <__cvt+0xa0>

08004c0e <__exponent>:
 8004c0e:	4603      	mov	r3, r0
 8004c10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c12:	2900      	cmp	r1, #0
 8004c14:	f803 2b02 	strb.w	r2, [r3], #2
 8004c18:	bfb6      	itet	lt
 8004c1a:	222d      	movlt	r2, #45	; 0x2d
 8004c1c:	222b      	movge	r2, #43	; 0x2b
 8004c1e:	4249      	neglt	r1, r1
 8004c20:	2909      	cmp	r1, #9
 8004c22:	7042      	strb	r2, [r0, #1]
 8004c24:	dd2a      	ble.n	8004c7c <__exponent+0x6e>
 8004c26:	f10d 0207 	add.w	r2, sp, #7
 8004c2a:	4617      	mov	r7, r2
 8004c2c:	260a      	movs	r6, #10
 8004c2e:	fb91 f5f6 	sdiv	r5, r1, r6
 8004c32:	4694      	mov	ip, r2
 8004c34:	fb06 1415 	mls	r4, r6, r5, r1
 8004c38:	3430      	adds	r4, #48	; 0x30
 8004c3a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004c3e:	460c      	mov	r4, r1
 8004c40:	2c63      	cmp	r4, #99	; 0x63
 8004c42:	4629      	mov	r1, r5
 8004c44:	f102 32ff 	add.w	r2, r2, #4294967295
 8004c48:	dcf1      	bgt.n	8004c2e <__exponent+0x20>
 8004c4a:	3130      	adds	r1, #48	; 0x30
 8004c4c:	f1ac 0402 	sub.w	r4, ip, #2
 8004c50:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004c54:	4622      	mov	r2, r4
 8004c56:	1c41      	adds	r1, r0, #1
 8004c58:	42ba      	cmp	r2, r7
 8004c5a:	d30a      	bcc.n	8004c72 <__exponent+0x64>
 8004c5c:	f10d 0209 	add.w	r2, sp, #9
 8004c60:	eba2 020c 	sub.w	r2, r2, ip
 8004c64:	42bc      	cmp	r4, r7
 8004c66:	bf88      	it	hi
 8004c68:	2200      	movhi	r2, #0
 8004c6a:	4413      	add	r3, r2
 8004c6c:	1a18      	subs	r0, r3, r0
 8004c6e:	b003      	add	sp, #12
 8004c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c72:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004c76:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004c7a:	e7ed      	b.n	8004c58 <__exponent+0x4a>
 8004c7c:	2330      	movs	r3, #48	; 0x30
 8004c7e:	3130      	adds	r1, #48	; 0x30
 8004c80:	7083      	strb	r3, [r0, #2]
 8004c82:	70c1      	strb	r1, [r0, #3]
 8004c84:	1d03      	adds	r3, r0, #4
 8004c86:	e7f1      	b.n	8004c6c <__exponent+0x5e>

08004c88 <_printf_float>:
 8004c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c8c:	b091      	sub	sp, #68	; 0x44
 8004c8e:	460c      	mov	r4, r1
 8004c90:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004c94:	4616      	mov	r6, r2
 8004c96:	461f      	mov	r7, r3
 8004c98:	4605      	mov	r5, r0
 8004c9a:	f000 feef 	bl	8005a7c <_localeconv_r>
 8004c9e:	6803      	ldr	r3, [r0, #0]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8004ca4:	f7fb fa54 	bl	8000150 <strlen>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	930e      	str	r3, [sp, #56]	; 0x38
 8004cac:	f8d8 3000 	ldr.w	r3, [r8]
 8004cb0:	900a      	str	r0, [sp, #40]	; 0x28
 8004cb2:	3307      	adds	r3, #7
 8004cb4:	f023 0307 	bic.w	r3, r3, #7
 8004cb8:	f103 0208 	add.w	r2, r3, #8
 8004cbc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004cc0:	f8d4 b000 	ldr.w	fp, [r4]
 8004cc4:	f8c8 2000 	str.w	r2, [r8]
 8004cc8:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004ccc:	4652      	mov	r2, sl
 8004cce:	4643      	mov	r3, r8
 8004cd0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004cd4:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004cd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8004cda:	f04f 32ff 	mov.w	r2, #4294967295
 8004cde:	4650      	mov	r0, sl
 8004ce0:	4b9c      	ldr	r3, [pc, #624]	; (8004f54 <_printf_float+0x2cc>)
 8004ce2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ce4:	f7fb fe92 	bl	8000a0c <__aeabi_dcmpun>
 8004ce8:	bb70      	cbnz	r0, 8004d48 <_printf_float+0xc0>
 8004cea:	f04f 32ff 	mov.w	r2, #4294967295
 8004cee:	4650      	mov	r0, sl
 8004cf0:	4b98      	ldr	r3, [pc, #608]	; (8004f54 <_printf_float+0x2cc>)
 8004cf2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004cf4:	f7fb fe6c 	bl	80009d0 <__aeabi_dcmple>
 8004cf8:	bb30      	cbnz	r0, 8004d48 <_printf_float+0xc0>
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	4650      	mov	r0, sl
 8004d00:	4641      	mov	r1, r8
 8004d02:	f7fb fe5b 	bl	80009bc <__aeabi_dcmplt>
 8004d06:	b110      	cbz	r0, 8004d0e <_printf_float+0x86>
 8004d08:	232d      	movs	r3, #45	; 0x2d
 8004d0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d0e:	4a92      	ldr	r2, [pc, #584]	; (8004f58 <_printf_float+0x2d0>)
 8004d10:	4b92      	ldr	r3, [pc, #584]	; (8004f5c <_printf_float+0x2d4>)
 8004d12:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004d16:	bf94      	ite	ls
 8004d18:	4690      	movls	r8, r2
 8004d1a:	4698      	movhi	r8, r3
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	f04f 0a00 	mov.w	sl, #0
 8004d22:	6123      	str	r3, [r4, #16]
 8004d24:	f02b 0304 	bic.w	r3, fp, #4
 8004d28:	6023      	str	r3, [r4, #0]
 8004d2a:	4633      	mov	r3, r6
 8004d2c:	4621      	mov	r1, r4
 8004d2e:	4628      	mov	r0, r5
 8004d30:	9700      	str	r7, [sp, #0]
 8004d32:	aa0f      	add	r2, sp, #60	; 0x3c
 8004d34:	f000 f9d6 	bl	80050e4 <_printf_common>
 8004d38:	3001      	adds	r0, #1
 8004d3a:	f040 8090 	bne.w	8004e5e <_printf_float+0x1d6>
 8004d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d42:	b011      	add	sp, #68	; 0x44
 8004d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d48:	4652      	mov	r2, sl
 8004d4a:	4643      	mov	r3, r8
 8004d4c:	4650      	mov	r0, sl
 8004d4e:	4641      	mov	r1, r8
 8004d50:	f7fb fe5c 	bl	8000a0c <__aeabi_dcmpun>
 8004d54:	b148      	cbz	r0, 8004d6a <_printf_float+0xe2>
 8004d56:	f1b8 0f00 	cmp.w	r8, #0
 8004d5a:	bfb8      	it	lt
 8004d5c:	232d      	movlt	r3, #45	; 0x2d
 8004d5e:	4a80      	ldr	r2, [pc, #512]	; (8004f60 <_printf_float+0x2d8>)
 8004d60:	bfb8      	it	lt
 8004d62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004d66:	4b7f      	ldr	r3, [pc, #508]	; (8004f64 <_printf_float+0x2dc>)
 8004d68:	e7d3      	b.n	8004d12 <_printf_float+0x8a>
 8004d6a:	6863      	ldr	r3, [r4, #4]
 8004d6c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004d70:	1c5a      	adds	r2, r3, #1
 8004d72:	d142      	bne.n	8004dfa <_printf_float+0x172>
 8004d74:	2306      	movs	r3, #6
 8004d76:	6063      	str	r3, [r4, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	9206      	str	r2, [sp, #24]
 8004d7c:	aa0e      	add	r2, sp, #56	; 0x38
 8004d7e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004d82:	aa0d      	add	r2, sp, #52	; 0x34
 8004d84:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004d88:	9203      	str	r2, [sp, #12]
 8004d8a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004d8e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004d92:	6023      	str	r3, [r4, #0]
 8004d94:	6863      	ldr	r3, [r4, #4]
 8004d96:	4652      	mov	r2, sl
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	4628      	mov	r0, r5
 8004d9c:	4643      	mov	r3, r8
 8004d9e:	910b      	str	r1, [sp, #44]	; 0x2c
 8004da0:	f7ff fed6 	bl	8004b50 <__cvt>
 8004da4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004da6:	4680      	mov	r8, r0
 8004da8:	2947      	cmp	r1, #71	; 0x47
 8004daa:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004dac:	d108      	bne.n	8004dc0 <_printf_float+0x138>
 8004dae:	1cc8      	adds	r0, r1, #3
 8004db0:	db02      	blt.n	8004db8 <_printf_float+0x130>
 8004db2:	6863      	ldr	r3, [r4, #4]
 8004db4:	4299      	cmp	r1, r3
 8004db6:	dd40      	ble.n	8004e3a <_printf_float+0x1b2>
 8004db8:	f1a9 0902 	sub.w	r9, r9, #2
 8004dbc:	fa5f f989 	uxtb.w	r9, r9
 8004dc0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004dc4:	d81f      	bhi.n	8004e06 <_printf_float+0x17e>
 8004dc6:	464a      	mov	r2, r9
 8004dc8:	3901      	subs	r1, #1
 8004dca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004dce:	910d      	str	r1, [sp, #52]	; 0x34
 8004dd0:	f7ff ff1d 	bl	8004c0e <__exponent>
 8004dd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004dd6:	4682      	mov	sl, r0
 8004dd8:	1813      	adds	r3, r2, r0
 8004dda:	2a01      	cmp	r2, #1
 8004ddc:	6123      	str	r3, [r4, #16]
 8004dde:	dc02      	bgt.n	8004de6 <_printf_float+0x15e>
 8004de0:	6822      	ldr	r2, [r4, #0]
 8004de2:	07d2      	lsls	r2, r2, #31
 8004de4:	d501      	bpl.n	8004dea <_printf_float+0x162>
 8004de6:	3301      	adds	r3, #1
 8004de8:	6123      	str	r3, [r4, #16]
 8004dea:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d09b      	beq.n	8004d2a <_printf_float+0xa2>
 8004df2:	232d      	movs	r3, #45	; 0x2d
 8004df4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004df8:	e797      	b.n	8004d2a <_printf_float+0xa2>
 8004dfa:	2947      	cmp	r1, #71	; 0x47
 8004dfc:	d1bc      	bne.n	8004d78 <_printf_float+0xf0>
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1ba      	bne.n	8004d78 <_printf_float+0xf0>
 8004e02:	2301      	movs	r3, #1
 8004e04:	e7b7      	b.n	8004d76 <_printf_float+0xee>
 8004e06:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004e0a:	d118      	bne.n	8004e3e <_printf_float+0x1b6>
 8004e0c:	2900      	cmp	r1, #0
 8004e0e:	6863      	ldr	r3, [r4, #4]
 8004e10:	dd0b      	ble.n	8004e2a <_printf_float+0x1a2>
 8004e12:	6121      	str	r1, [r4, #16]
 8004e14:	b913      	cbnz	r3, 8004e1c <_printf_float+0x194>
 8004e16:	6822      	ldr	r2, [r4, #0]
 8004e18:	07d0      	lsls	r0, r2, #31
 8004e1a:	d502      	bpl.n	8004e22 <_printf_float+0x19a>
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	440b      	add	r3, r1
 8004e20:	6123      	str	r3, [r4, #16]
 8004e22:	f04f 0a00 	mov.w	sl, #0
 8004e26:	65a1      	str	r1, [r4, #88]	; 0x58
 8004e28:	e7df      	b.n	8004dea <_printf_float+0x162>
 8004e2a:	b913      	cbnz	r3, 8004e32 <_printf_float+0x1aa>
 8004e2c:	6822      	ldr	r2, [r4, #0]
 8004e2e:	07d2      	lsls	r2, r2, #31
 8004e30:	d501      	bpl.n	8004e36 <_printf_float+0x1ae>
 8004e32:	3302      	adds	r3, #2
 8004e34:	e7f4      	b.n	8004e20 <_printf_float+0x198>
 8004e36:	2301      	movs	r3, #1
 8004e38:	e7f2      	b.n	8004e20 <_printf_float+0x198>
 8004e3a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004e3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e40:	4299      	cmp	r1, r3
 8004e42:	db05      	blt.n	8004e50 <_printf_float+0x1c8>
 8004e44:	6823      	ldr	r3, [r4, #0]
 8004e46:	6121      	str	r1, [r4, #16]
 8004e48:	07d8      	lsls	r0, r3, #31
 8004e4a:	d5ea      	bpl.n	8004e22 <_printf_float+0x19a>
 8004e4c:	1c4b      	adds	r3, r1, #1
 8004e4e:	e7e7      	b.n	8004e20 <_printf_float+0x198>
 8004e50:	2900      	cmp	r1, #0
 8004e52:	bfcc      	ite	gt
 8004e54:	2201      	movgt	r2, #1
 8004e56:	f1c1 0202 	rsble	r2, r1, #2
 8004e5a:	4413      	add	r3, r2
 8004e5c:	e7e0      	b.n	8004e20 <_printf_float+0x198>
 8004e5e:	6823      	ldr	r3, [r4, #0]
 8004e60:	055a      	lsls	r2, r3, #21
 8004e62:	d407      	bmi.n	8004e74 <_printf_float+0x1ec>
 8004e64:	6923      	ldr	r3, [r4, #16]
 8004e66:	4642      	mov	r2, r8
 8004e68:	4631      	mov	r1, r6
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	47b8      	blx	r7
 8004e6e:	3001      	adds	r0, #1
 8004e70:	d12b      	bne.n	8004eca <_printf_float+0x242>
 8004e72:	e764      	b.n	8004d3e <_printf_float+0xb6>
 8004e74:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004e78:	f240 80dd 	bls.w	8005036 <_printf_float+0x3ae>
 8004e7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e80:	2200      	movs	r2, #0
 8004e82:	2300      	movs	r3, #0
 8004e84:	f7fb fd90 	bl	80009a8 <__aeabi_dcmpeq>
 8004e88:	2800      	cmp	r0, #0
 8004e8a:	d033      	beq.n	8004ef4 <_printf_float+0x26c>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	4631      	mov	r1, r6
 8004e90:	4628      	mov	r0, r5
 8004e92:	4a35      	ldr	r2, [pc, #212]	; (8004f68 <_printf_float+0x2e0>)
 8004e94:	47b8      	blx	r7
 8004e96:	3001      	adds	r0, #1
 8004e98:	f43f af51 	beq.w	8004d3e <_printf_float+0xb6>
 8004e9c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	db02      	blt.n	8004eaa <_printf_float+0x222>
 8004ea4:	6823      	ldr	r3, [r4, #0]
 8004ea6:	07d8      	lsls	r0, r3, #31
 8004ea8:	d50f      	bpl.n	8004eca <_printf_float+0x242>
 8004eaa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004eae:	4631      	mov	r1, r6
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	47b8      	blx	r7
 8004eb4:	3001      	adds	r0, #1
 8004eb6:	f43f af42 	beq.w	8004d3e <_printf_float+0xb6>
 8004eba:	f04f 0800 	mov.w	r8, #0
 8004ebe:	f104 091a 	add.w	r9, r4, #26
 8004ec2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	4543      	cmp	r3, r8
 8004ec8:	dc09      	bgt.n	8004ede <_printf_float+0x256>
 8004eca:	6823      	ldr	r3, [r4, #0]
 8004ecc:	079b      	lsls	r3, r3, #30
 8004ece:	f100 8104 	bmi.w	80050da <_printf_float+0x452>
 8004ed2:	68e0      	ldr	r0, [r4, #12]
 8004ed4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ed6:	4298      	cmp	r0, r3
 8004ed8:	bfb8      	it	lt
 8004eda:	4618      	movlt	r0, r3
 8004edc:	e731      	b.n	8004d42 <_printf_float+0xba>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	464a      	mov	r2, r9
 8004ee2:	4631      	mov	r1, r6
 8004ee4:	4628      	mov	r0, r5
 8004ee6:	47b8      	blx	r7
 8004ee8:	3001      	adds	r0, #1
 8004eea:	f43f af28 	beq.w	8004d3e <_printf_float+0xb6>
 8004eee:	f108 0801 	add.w	r8, r8, #1
 8004ef2:	e7e6      	b.n	8004ec2 <_printf_float+0x23a>
 8004ef4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	dc38      	bgt.n	8004f6c <_printf_float+0x2e4>
 8004efa:	2301      	movs	r3, #1
 8004efc:	4631      	mov	r1, r6
 8004efe:	4628      	mov	r0, r5
 8004f00:	4a19      	ldr	r2, [pc, #100]	; (8004f68 <_printf_float+0x2e0>)
 8004f02:	47b8      	blx	r7
 8004f04:	3001      	adds	r0, #1
 8004f06:	f43f af1a 	beq.w	8004d3e <_printf_float+0xb6>
 8004f0a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	d102      	bne.n	8004f18 <_printf_float+0x290>
 8004f12:	6823      	ldr	r3, [r4, #0]
 8004f14:	07d9      	lsls	r1, r3, #31
 8004f16:	d5d8      	bpl.n	8004eca <_printf_float+0x242>
 8004f18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f1c:	4631      	mov	r1, r6
 8004f1e:	4628      	mov	r0, r5
 8004f20:	47b8      	blx	r7
 8004f22:	3001      	adds	r0, #1
 8004f24:	f43f af0b 	beq.w	8004d3e <_printf_float+0xb6>
 8004f28:	f04f 0900 	mov.w	r9, #0
 8004f2c:	f104 0a1a 	add.w	sl, r4, #26
 8004f30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f32:	425b      	negs	r3, r3
 8004f34:	454b      	cmp	r3, r9
 8004f36:	dc01      	bgt.n	8004f3c <_printf_float+0x2b4>
 8004f38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f3a:	e794      	b.n	8004e66 <_printf_float+0x1de>
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	4652      	mov	r2, sl
 8004f40:	4631      	mov	r1, r6
 8004f42:	4628      	mov	r0, r5
 8004f44:	47b8      	blx	r7
 8004f46:	3001      	adds	r0, #1
 8004f48:	f43f aef9 	beq.w	8004d3e <_printf_float+0xb6>
 8004f4c:	f109 0901 	add.w	r9, r9, #1
 8004f50:	e7ee      	b.n	8004f30 <_printf_float+0x2a8>
 8004f52:	bf00      	nop
 8004f54:	7fefffff 	.word	0x7fefffff
 8004f58:	08009332 	.word	0x08009332
 8004f5c:	08009336 	.word	0x08009336
 8004f60:	0800933a 	.word	0x0800933a
 8004f64:	0800933e 	.word	0x0800933e
 8004f68:	08009342 	.word	0x08009342
 8004f6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f70:	429a      	cmp	r2, r3
 8004f72:	bfa8      	it	ge
 8004f74:	461a      	movge	r2, r3
 8004f76:	2a00      	cmp	r2, #0
 8004f78:	4691      	mov	r9, r2
 8004f7a:	dc37      	bgt.n	8004fec <_printf_float+0x364>
 8004f7c:	f04f 0b00 	mov.w	fp, #0
 8004f80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f84:	f104 021a 	add.w	r2, r4, #26
 8004f88:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004f8c:	ebaa 0309 	sub.w	r3, sl, r9
 8004f90:	455b      	cmp	r3, fp
 8004f92:	dc33      	bgt.n	8004ffc <_printf_float+0x374>
 8004f94:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	db3b      	blt.n	8005014 <_printf_float+0x38c>
 8004f9c:	6823      	ldr	r3, [r4, #0]
 8004f9e:	07da      	lsls	r2, r3, #31
 8004fa0:	d438      	bmi.n	8005014 <_printf_float+0x38c>
 8004fa2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004fa6:	eba2 0903 	sub.w	r9, r2, r3
 8004faa:	eba2 020a 	sub.w	r2, r2, sl
 8004fae:	4591      	cmp	r9, r2
 8004fb0:	bfa8      	it	ge
 8004fb2:	4691      	movge	r9, r2
 8004fb4:	f1b9 0f00 	cmp.w	r9, #0
 8004fb8:	dc34      	bgt.n	8005024 <_printf_float+0x39c>
 8004fba:	f04f 0800 	mov.w	r8, #0
 8004fbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004fc2:	f104 0a1a 	add.w	sl, r4, #26
 8004fc6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004fca:	1a9b      	subs	r3, r3, r2
 8004fcc:	eba3 0309 	sub.w	r3, r3, r9
 8004fd0:	4543      	cmp	r3, r8
 8004fd2:	f77f af7a 	ble.w	8004eca <_printf_float+0x242>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	4652      	mov	r2, sl
 8004fda:	4631      	mov	r1, r6
 8004fdc:	4628      	mov	r0, r5
 8004fde:	47b8      	blx	r7
 8004fe0:	3001      	adds	r0, #1
 8004fe2:	f43f aeac 	beq.w	8004d3e <_printf_float+0xb6>
 8004fe6:	f108 0801 	add.w	r8, r8, #1
 8004fea:	e7ec      	b.n	8004fc6 <_printf_float+0x33e>
 8004fec:	4613      	mov	r3, r2
 8004fee:	4631      	mov	r1, r6
 8004ff0:	4642      	mov	r2, r8
 8004ff2:	4628      	mov	r0, r5
 8004ff4:	47b8      	blx	r7
 8004ff6:	3001      	adds	r0, #1
 8004ff8:	d1c0      	bne.n	8004f7c <_printf_float+0x2f4>
 8004ffa:	e6a0      	b.n	8004d3e <_printf_float+0xb6>
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	4631      	mov	r1, r6
 8005000:	4628      	mov	r0, r5
 8005002:	920b      	str	r2, [sp, #44]	; 0x2c
 8005004:	47b8      	blx	r7
 8005006:	3001      	adds	r0, #1
 8005008:	f43f ae99 	beq.w	8004d3e <_printf_float+0xb6>
 800500c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800500e:	f10b 0b01 	add.w	fp, fp, #1
 8005012:	e7b9      	b.n	8004f88 <_printf_float+0x300>
 8005014:	4631      	mov	r1, r6
 8005016:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800501a:	4628      	mov	r0, r5
 800501c:	47b8      	blx	r7
 800501e:	3001      	adds	r0, #1
 8005020:	d1bf      	bne.n	8004fa2 <_printf_float+0x31a>
 8005022:	e68c      	b.n	8004d3e <_printf_float+0xb6>
 8005024:	464b      	mov	r3, r9
 8005026:	4631      	mov	r1, r6
 8005028:	4628      	mov	r0, r5
 800502a:	eb08 020a 	add.w	r2, r8, sl
 800502e:	47b8      	blx	r7
 8005030:	3001      	adds	r0, #1
 8005032:	d1c2      	bne.n	8004fba <_printf_float+0x332>
 8005034:	e683      	b.n	8004d3e <_printf_float+0xb6>
 8005036:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005038:	2a01      	cmp	r2, #1
 800503a:	dc01      	bgt.n	8005040 <_printf_float+0x3b8>
 800503c:	07db      	lsls	r3, r3, #31
 800503e:	d539      	bpl.n	80050b4 <_printf_float+0x42c>
 8005040:	2301      	movs	r3, #1
 8005042:	4642      	mov	r2, r8
 8005044:	4631      	mov	r1, r6
 8005046:	4628      	mov	r0, r5
 8005048:	47b8      	blx	r7
 800504a:	3001      	adds	r0, #1
 800504c:	f43f ae77 	beq.w	8004d3e <_printf_float+0xb6>
 8005050:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005054:	4631      	mov	r1, r6
 8005056:	4628      	mov	r0, r5
 8005058:	47b8      	blx	r7
 800505a:	3001      	adds	r0, #1
 800505c:	f43f ae6f 	beq.w	8004d3e <_printf_float+0xb6>
 8005060:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005064:	2200      	movs	r2, #0
 8005066:	2300      	movs	r3, #0
 8005068:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800506c:	f7fb fc9c 	bl	80009a8 <__aeabi_dcmpeq>
 8005070:	b9d8      	cbnz	r0, 80050aa <_printf_float+0x422>
 8005072:	f109 33ff 	add.w	r3, r9, #4294967295
 8005076:	f108 0201 	add.w	r2, r8, #1
 800507a:	4631      	mov	r1, r6
 800507c:	4628      	mov	r0, r5
 800507e:	47b8      	blx	r7
 8005080:	3001      	adds	r0, #1
 8005082:	d10e      	bne.n	80050a2 <_printf_float+0x41a>
 8005084:	e65b      	b.n	8004d3e <_printf_float+0xb6>
 8005086:	2301      	movs	r3, #1
 8005088:	464a      	mov	r2, r9
 800508a:	4631      	mov	r1, r6
 800508c:	4628      	mov	r0, r5
 800508e:	47b8      	blx	r7
 8005090:	3001      	adds	r0, #1
 8005092:	f43f ae54 	beq.w	8004d3e <_printf_float+0xb6>
 8005096:	f108 0801 	add.w	r8, r8, #1
 800509a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800509c:	3b01      	subs	r3, #1
 800509e:	4543      	cmp	r3, r8
 80050a0:	dcf1      	bgt.n	8005086 <_printf_float+0x3fe>
 80050a2:	4653      	mov	r3, sl
 80050a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80050a8:	e6de      	b.n	8004e68 <_printf_float+0x1e0>
 80050aa:	f04f 0800 	mov.w	r8, #0
 80050ae:	f104 091a 	add.w	r9, r4, #26
 80050b2:	e7f2      	b.n	800509a <_printf_float+0x412>
 80050b4:	2301      	movs	r3, #1
 80050b6:	4642      	mov	r2, r8
 80050b8:	e7df      	b.n	800507a <_printf_float+0x3f2>
 80050ba:	2301      	movs	r3, #1
 80050bc:	464a      	mov	r2, r9
 80050be:	4631      	mov	r1, r6
 80050c0:	4628      	mov	r0, r5
 80050c2:	47b8      	blx	r7
 80050c4:	3001      	adds	r0, #1
 80050c6:	f43f ae3a 	beq.w	8004d3e <_printf_float+0xb6>
 80050ca:	f108 0801 	add.w	r8, r8, #1
 80050ce:	68e3      	ldr	r3, [r4, #12]
 80050d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80050d2:	1a5b      	subs	r3, r3, r1
 80050d4:	4543      	cmp	r3, r8
 80050d6:	dcf0      	bgt.n	80050ba <_printf_float+0x432>
 80050d8:	e6fb      	b.n	8004ed2 <_printf_float+0x24a>
 80050da:	f04f 0800 	mov.w	r8, #0
 80050de:	f104 0919 	add.w	r9, r4, #25
 80050e2:	e7f4      	b.n	80050ce <_printf_float+0x446>

080050e4 <_printf_common>:
 80050e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050e8:	4616      	mov	r6, r2
 80050ea:	4699      	mov	r9, r3
 80050ec:	688a      	ldr	r2, [r1, #8]
 80050ee:	690b      	ldr	r3, [r1, #16]
 80050f0:	4607      	mov	r7, r0
 80050f2:	4293      	cmp	r3, r2
 80050f4:	bfb8      	it	lt
 80050f6:	4613      	movlt	r3, r2
 80050f8:	6033      	str	r3, [r6, #0]
 80050fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050fe:	460c      	mov	r4, r1
 8005100:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005104:	b10a      	cbz	r2, 800510a <_printf_common+0x26>
 8005106:	3301      	adds	r3, #1
 8005108:	6033      	str	r3, [r6, #0]
 800510a:	6823      	ldr	r3, [r4, #0]
 800510c:	0699      	lsls	r1, r3, #26
 800510e:	bf42      	ittt	mi
 8005110:	6833      	ldrmi	r3, [r6, #0]
 8005112:	3302      	addmi	r3, #2
 8005114:	6033      	strmi	r3, [r6, #0]
 8005116:	6825      	ldr	r5, [r4, #0]
 8005118:	f015 0506 	ands.w	r5, r5, #6
 800511c:	d106      	bne.n	800512c <_printf_common+0x48>
 800511e:	f104 0a19 	add.w	sl, r4, #25
 8005122:	68e3      	ldr	r3, [r4, #12]
 8005124:	6832      	ldr	r2, [r6, #0]
 8005126:	1a9b      	subs	r3, r3, r2
 8005128:	42ab      	cmp	r3, r5
 800512a:	dc2b      	bgt.n	8005184 <_printf_common+0xa0>
 800512c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005130:	1e13      	subs	r3, r2, #0
 8005132:	6822      	ldr	r2, [r4, #0]
 8005134:	bf18      	it	ne
 8005136:	2301      	movne	r3, #1
 8005138:	0692      	lsls	r2, r2, #26
 800513a:	d430      	bmi.n	800519e <_printf_common+0xba>
 800513c:	4649      	mov	r1, r9
 800513e:	4638      	mov	r0, r7
 8005140:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005144:	47c0      	blx	r8
 8005146:	3001      	adds	r0, #1
 8005148:	d023      	beq.n	8005192 <_printf_common+0xae>
 800514a:	6823      	ldr	r3, [r4, #0]
 800514c:	6922      	ldr	r2, [r4, #16]
 800514e:	f003 0306 	and.w	r3, r3, #6
 8005152:	2b04      	cmp	r3, #4
 8005154:	bf14      	ite	ne
 8005156:	2500      	movne	r5, #0
 8005158:	6833      	ldreq	r3, [r6, #0]
 800515a:	f04f 0600 	mov.w	r6, #0
 800515e:	bf08      	it	eq
 8005160:	68e5      	ldreq	r5, [r4, #12]
 8005162:	f104 041a 	add.w	r4, r4, #26
 8005166:	bf08      	it	eq
 8005168:	1aed      	subeq	r5, r5, r3
 800516a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800516e:	bf08      	it	eq
 8005170:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005174:	4293      	cmp	r3, r2
 8005176:	bfc4      	itt	gt
 8005178:	1a9b      	subgt	r3, r3, r2
 800517a:	18ed      	addgt	r5, r5, r3
 800517c:	42b5      	cmp	r5, r6
 800517e:	d11a      	bne.n	80051b6 <_printf_common+0xd2>
 8005180:	2000      	movs	r0, #0
 8005182:	e008      	b.n	8005196 <_printf_common+0xb2>
 8005184:	2301      	movs	r3, #1
 8005186:	4652      	mov	r2, sl
 8005188:	4649      	mov	r1, r9
 800518a:	4638      	mov	r0, r7
 800518c:	47c0      	blx	r8
 800518e:	3001      	adds	r0, #1
 8005190:	d103      	bne.n	800519a <_printf_common+0xb6>
 8005192:	f04f 30ff 	mov.w	r0, #4294967295
 8005196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800519a:	3501      	adds	r5, #1
 800519c:	e7c1      	b.n	8005122 <_printf_common+0x3e>
 800519e:	2030      	movs	r0, #48	; 0x30
 80051a0:	18e1      	adds	r1, r4, r3
 80051a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051a6:	1c5a      	adds	r2, r3, #1
 80051a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051ac:	4422      	add	r2, r4
 80051ae:	3302      	adds	r3, #2
 80051b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051b4:	e7c2      	b.n	800513c <_printf_common+0x58>
 80051b6:	2301      	movs	r3, #1
 80051b8:	4622      	mov	r2, r4
 80051ba:	4649      	mov	r1, r9
 80051bc:	4638      	mov	r0, r7
 80051be:	47c0      	blx	r8
 80051c0:	3001      	adds	r0, #1
 80051c2:	d0e6      	beq.n	8005192 <_printf_common+0xae>
 80051c4:	3601      	adds	r6, #1
 80051c6:	e7d9      	b.n	800517c <_printf_common+0x98>

080051c8 <_printf_i>:
 80051c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051cc:	7e0f      	ldrb	r7, [r1, #24]
 80051ce:	4691      	mov	r9, r2
 80051d0:	2f78      	cmp	r7, #120	; 0x78
 80051d2:	4680      	mov	r8, r0
 80051d4:	460c      	mov	r4, r1
 80051d6:	469a      	mov	sl, r3
 80051d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80051da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80051de:	d807      	bhi.n	80051f0 <_printf_i+0x28>
 80051e0:	2f62      	cmp	r7, #98	; 0x62
 80051e2:	d80a      	bhi.n	80051fa <_printf_i+0x32>
 80051e4:	2f00      	cmp	r7, #0
 80051e6:	f000 80d5 	beq.w	8005394 <_printf_i+0x1cc>
 80051ea:	2f58      	cmp	r7, #88	; 0x58
 80051ec:	f000 80c1 	beq.w	8005372 <_printf_i+0x1aa>
 80051f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80051f8:	e03a      	b.n	8005270 <_printf_i+0xa8>
 80051fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051fe:	2b15      	cmp	r3, #21
 8005200:	d8f6      	bhi.n	80051f0 <_printf_i+0x28>
 8005202:	a101      	add	r1, pc, #4	; (adr r1, 8005208 <_printf_i+0x40>)
 8005204:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005208:	08005261 	.word	0x08005261
 800520c:	08005275 	.word	0x08005275
 8005210:	080051f1 	.word	0x080051f1
 8005214:	080051f1 	.word	0x080051f1
 8005218:	080051f1 	.word	0x080051f1
 800521c:	080051f1 	.word	0x080051f1
 8005220:	08005275 	.word	0x08005275
 8005224:	080051f1 	.word	0x080051f1
 8005228:	080051f1 	.word	0x080051f1
 800522c:	080051f1 	.word	0x080051f1
 8005230:	080051f1 	.word	0x080051f1
 8005234:	0800537b 	.word	0x0800537b
 8005238:	080052a1 	.word	0x080052a1
 800523c:	08005335 	.word	0x08005335
 8005240:	080051f1 	.word	0x080051f1
 8005244:	080051f1 	.word	0x080051f1
 8005248:	0800539d 	.word	0x0800539d
 800524c:	080051f1 	.word	0x080051f1
 8005250:	080052a1 	.word	0x080052a1
 8005254:	080051f1 	.word	0x080051f1
 8005258:	080051f1 	.word	0x080051f1
 800525c:	0800533d 	.word	0x0800533d
 8005260:	682b      	ldr	r3, [r5, #0]
 8005262:	1d1a      	adds	r2, r3, #4
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	602a      	str	r2, [r5, #0]
 8005268:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800526c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005270:	2301      	movs	r3, #1
 8005272:	e0a0      	b.n	80053b6 <_printf_i+0x1ee>
 8005274:	6820      	ldr	r0, [r4, #0]
 8005276:	682b      	ldr	r3, [r5, #0]
 8005278:	0607      	lsls	r7, r0, #24
 800527a:	f103 0104 	add.w	r1, r3, #4
 800527e:	6029      	str	r1, [r5, #0]
 8005280:	d501      	bpl.n	8005286 <_printf_i+0xbe>
 8005282:	681e      	ldr	r6, [r3, #0]
 8005284:	e003      	b.n	800528e <_printf_i+0xc6>
 8005286:	0646      	lsls	r6, r0, #25
 8005288:	d5fb      	bpl.n	8005282 <_printf_i+0xba>
 800528a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800528e:	2e00      	cmp	r6, #0
 8005290:	da03      	bge.n	800529a <_printf_i+0xd2>
 8005292:	232d      	movs	r3, #45	; 0x2d
 8005294:	4276      	negs	r6, r6
 8005296:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800529a:	230a      	movs	r3, #10
 800529c:	4859      	ldr	r0, [pc, #356]	; (8005404 <_printf_i+0x23c>)
 800529e:	e012      	b.n	80052c6 <_printf_i+0xfe>
 80052a0:	682b      	ldr	r3, [r5, #0]
 80052a2:	6820      	ldr	r0, [r4, #0]
 80052a4:	1d19      	adds	r1, r3, #4
 80052a6:	6029      	str	r1, [r5, #0]
 80052a8:	0605      	lsls	r5, r0, #24
 80052aa:	d501      	bpl.n	80052b0 <_printf_i+0xe8>
 80052ac:	681e      	ldr	r6, [r3, #0]
 80052ae:	e002      	b.n	80052b6 <_printf_i+0xee>
 80052b0:	0641      	lsls	r1, r0, #25
 80052b2:	d5fb      	bpl.n	80052ac <_printf_i+0xe4>
 80052b4:	881e      	ldrh	r6, [r3, #0]
 80052b6:	2f6f      	cmp	r7, #111	; 0x6f
 80052b8:	bf0c      	ite	eq
 80052ba:	2308      	moveq	r3, #8
 80052bc:	230a      	movne	r3, #10
 80052be:	4851      	ldr	r0, [pc, #324]	; (8005404 <_printf_i+0x23c>)
 80052c0:	2100      	movs	r1, #0
 80052c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052c6:	6865      	ldr	r5, [r4, #4]
 80052c8:	2d00      	cmp	r5, #0
 80052ca:	bfa8      	it	ge
 80052cc:	6821      	ldrge	r1, [r4, #0]
 80052ce:	60a5      	str	r5, [r4, #8]
 80052d0:	bfa4      	itt	ge
 80052d2:	f021 0104 	bicge.w	r1, r1, #4
 80052d6:	6021      	strge	r1, [r4, #0]
 80052d8:	b90e      	cbnz	r6, 80052de <_printf_i+0x116>
 80052da:	2d00      	cmp	r5, #0
 80052dc:	d04b      	beq.n	8005376 <_printf_i+0x1ae>
 80052de:	4615      	mov	r5, r2
 80052e0:	fbb6 f1f3 	udiv	r1, r6, r3
 80052e4:	fb03 6711 	mls	r7, r3, r1, r6
 80052e8:	5dc7      	ldrb	r7, [r0, r7]
 80052ea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80052ee:	4637      	mov	r7, r6
 80052f0:	42bb      	cmp	r3, r7
 80052f2:	460e      	mov	r6, r1
 80052f4:	d9f4      	bls.n	80052e0 <_printf_i+0x118>
 80052f6:	2b08      	cmp	r3, #8
 80052f8:	d10b      	bne.n	8005312 <_printf_i+0x14a>
 80052fa:	6823      	ldr	r3, [r4, #0]
 80052fc:	07de      	lsls	r6, r3, #31
 80052fe:	d508      	bpl.n	8005312 <_printf_i+0x14a>
 8005300:	6923      	ldr	r3, [r4, #16]
 8005302:	6861      	ldr	r1, [r4, #4]
 8005304:	4299      	cmp	r1, r3
 8005306:	bfde      	ittt	le
 8005308:	2330      	movle	r3, #48	; 0x30
 800530a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800530e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005312:	1b52      	subs	r2, r2, r5
 8005314:	6122      	str	r2, [r4, #16]
 8005316:	464b      	mov	r3, r9
 8005318:	4621      	mov	r1, r4
 800531a:	4640      	mov	r0, r8
 800531c:	f8cd a000 	str.w	sl, [sp]
 8005320:	aa03      	add	r2, sp, #12
 8005322:	f7ff fedf 	bl	80050e4 <_printf_common>
 8005326:	3001      	adds	r0, #1
 8005328:	d14a      	bne.n	80053c0 <_printf_i+0x1f8>
 800532a:	f04f 30ff 	mov.w	r0, #4294967295
 800532e:	b004      	add	sp, #16
 8005330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005334:	6823      	ldr	r3, [r4, #0]
 8005336:	f043 0320 	orr.w	r3, r3, #32
 800533a:	6023      	str	r3, [r4, #0]
 800533c:	2778      	movs	r7, #120	; 0x78
 800533e:	4832      	ldr	r0, [pc, #200]	; (8005408 <_printf_i+0x240>)
 8005340:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005344:	6823      	ldr	r3, [r4, #0]
 8005346:	6829      	ldr	r1, [r5, #0]
 8005348:	061f      	lsls	r7, r3, #24
 800534a:	f851 6b04 	ldr.w	r6, [r1], #4
 800534e:	d402      	bmi.n	8005356 <_printf_i+0x18e>
 8005350:	065f      	lsls	r7, r3, #25
 8005352:	bf48      	it	mi
 8005354:	b2b6      	uxthmi	r6, r6
 8005356:	07df      	lsls	r7, r3, #31
 8005358:	bf48      	it	mi
 800535a:	f043 0320 	orrmi.w	r3, r3, #32
 800535e:	6029      	str	r1, [r5, #0]
 8005360:	bf48      	it	mi
 8005362:	6023      	strmi	r3, [r4, #0]
 8005364:	b91e      	cbnz	r6, 800536e <_printf_i+0x1a6>
 8005366:	6823      	ldr	r3, [r4, #0]
 8005368:	f023 0320 	bic.w	r3, r3, #32
 800536c:	6023      	str	r3, [r4, #0]
 800536e:	2310      	movs	r3, #16
 8005370:	e7a6      	b.n	80052c0 <_printf_i+0xf8>
 8005372:	4824      	ldr	r0, [pc, #144]	; (8005404 <_printf_i+0x23c>)
 8005374:	e7e4      	b.n	8005340 <_printf_i+0x178>
 8005376:	4615      	mov	r5, r2
 8005378:	e7bd      	b.n	80052f6 <_printf_i+0x12e>
 800537a:	682b      	ldr	r3, [r5, #0]
 800537c:	6826      	ldr	r6, [r4, #0]
 800537e:	1d18      	adds	r0, r3, #4
 8005380:	6961      	ldr	r1, [r4, #20]
 8005382:	6028      	str	r0, [r5, #0]
 8005384:	0635      	lsls	r5, r6, #24
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	d501      	bpl.n	800538e <_printf_i+0x1c6>
 800538a:	6019      	str	r1, [r3, #0]
 800538c:	e002      	b.n	8005394 <_printf_i+0x1cc>
 800538e:	0670      	lsls	r0, r6, #25
 8005390:	d5fb      	bpl.n	800538a <_printf_i+0x1c2>
 8005392:	8019      	strh	r1, [r3, #0]
 8005394:	2300      	movs	r3, #0
 8005396:	4615      	mov	r5, r2
 8005398:	6123      	str	r3, [r4, #16]
 800539a:	e7bc      	b.n	8005316 <_printf_i+0x14e>
 800539c:	682b      	ldr	r3, [r5, #0]
 800539e:	2100      	movs	r1, #0
 80053a0:	1d1a      	adds	r2, r3, #4
 80053a2:	602a      	str	r2, [r5, #0]
 80053a4:	681d      	ldr	r5, [r3, #0]
 80053a6:	6862      	ldr	r2, [r4, #4]
 80053a8:	4628      	mov	r0, r5
 80053aa:	f000 fbdd 	bl	8005b68 <memchr>
 80053ae:	b108      	cbz	r0, 80053b4 <_printf_i+0x1ec>
 80053b0:	1b40      	subs	r0, r0, r5
 80053b2:	6060      	str	r0, [r4, #4]
 80053b4:	6863      	ldr	r3, [r4, #4]
 80053b6:	6123      	str	r3, [r4, #16]
 80053b8:	2300      	movs	r3, #0
 80053ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053be:	e7aa      	b.n	8005316 <_printf_i+0x14e>
 80053c0:	462a      	mov	r2, r5
 80053c2:	4649      	mov	r1, r9
 80053c4:	4640      	mov	r0, r8
 80053c6:	6923      	ldr	r3, [r4, #16]
 80053c8:	47d0      	blx	sl
 80053ca:	3001      	adds	r0, #1
 80053cc:	d0ad      	beq.n	800532a <_printf_i+0x162>
 80053ce:	6823      	ldr	r3, [r4, #0]
 80053d0:	079b      	lsls	r3, r3, #30
 80053d2:	d413      	bmi.n	80053fc <_printf_i+0x234>
 80053d4:	68e0      	ldr	r0, [r4, #12]
 80053d6:	9b03      	ldr	r3, [sp, #12]
 80053d8:	4298      	cmp	r0, r3
 80053da:	bfb8      	it	lt
 80053dc:	4618      	movlt	r0, r3
 80053de:	e7a6      	b.n	800532e <_printf_i+0x166>
 80053e0:	2301      	movs	r3, #1
 80053e2:	4632      	mov	r2, r6
 80053e4:	4649      	mov	r1, r9
 80053e6:	4640      	mov	r0, r8
 80053e8:	47d0      	blx	sl
 80053ea:	3001      	adds	r0, #1
 80053ec:	d09d      	beq.n	800532a <_printf_i+0x162>
 80053ee:	3501      	adds	r5, #1
 80053f0:	68e3      	ldr	r3, [r4, #12]
 80053f2:	9903      	ldr	r1, [sp, #12]
 80053f4:	1a5b      	subs	r3, r3, r1
 80053f6:	42ab      	cmp	r3, r5
 80053f8:	dcf2      	bgt.n	80053e0 <_printf_i+0x218>
 80053fa:	e7eb      	b.n	80053d4 <_printf_i+0x20c>
 80053fc:	2500      	movs	r5, #0
 80053fe:	f104 0619 	add.w	r6, r4, #25
 8005402:	e7f5      	b.n	80053f0 <_printf_i+0x228>
 8005404:	08009344 	.word	0x08009344
 8005408:	08009355 	.word	0x08009355

0800540c <_scanf_float>:
 800540c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005410:	b087      	sub	sp, #28
 8005412:	9303      	str	r3, [sp, #12]
 8005414:	688b      	ldr	r3, [r1, #8]
 8005416:	4617      	mov	r7, r2
 8005418:	1e5a      	subs	r2, r3, #1
 800541a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800541e:	bf85      	ittet	hi
 8005420:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005424:	195b      	addhi	r3, r3, r5
 8005426:	2300      	movls	r3, #0
 8005428:	9302      	strhi	r3, [sp, #8]
 800542a:	bf88      	it	hi
 800542c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005430:	468b      	mov	fp, r1
 8005432:	f04f 0500 	mov.w	r5, #0
 8005436:	bf8c      	ite	hi
 8005438:	608b      	strhi	r3, [r1, #8]
 800543a:	9302      	strls	r3, [sp, #8]
 800543c:	680b      	ldr	r3, [r1, #0]
 800543e:	4680      	mov	r8, r0
 8005440:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005444:	f84b 3b1c 	str.w	r3, [fp], #28
 8005448:	460c      	mov	r4, r1
 800544a:	465e      	mov	r6, fp
 800544c:	46aa      	mov	sl, r5
 800544e:	46a9      	mov	r9, r5
 8005450:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005454:	9501      	str	r5, [sp, #4]
 8005456:	68a2      	ldr	r2, [r4, #8]
 8005458:	b152      	cbz	r2, 8005470 <_scanf_float+0x64>
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	2b4e      	cmp	r3, #78	; 0x4e
 8005460:	d864      	bhi.n	800552c <_scanf_float+0x120>
 8005462:	2b40      	cmp	r3, #64	; 0x40
 8005464:	d83c      	bhi.n	80054e0 <_scanf_float+0xd4>
 8005466:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800546a:	b2c8      	uxtb	r0, r1
 800546c:	280e      	cmp	r0, #14
 800546e:	d93a      	bls.n	80054e6 <_scanf_float+0xda>
 8005470:	f1b9 0f00 	cmp.w	r9, #0
 8005474:	d003      	beq.n	800547e <_scanf_float+0x72>
 8005476:	6823      	ldr	r3, [r4, #0]
 8005478:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800547c:	6023      	str	r3, [r4, #0]
 800547e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005482:	f1ba 0f01 	cmp.w	sl, #1
 8005486:	f200 8113 	bhi.w	80056b0 <_scanf_float+0x2a4>
 800548a:	455e      	cmp	r6, fp
 800548c:	f200 8105 	bhi.w	800569a <_scanf_float+0x28e>
 8005490:	2501      	movs	r5, #1
 8005492:	4628      	mov	r0, r5
 8005494:	b007      	add	sp, #28
 8005496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800549a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800549e:	2a0d      	cmp	r2, #13
 80054a0:	d8e6      	bhi.n	8005470 <_scanf_float+0x64>
 80054a2:	a101      	add	r1, pc, #4	; (adr r1, 80054a8 <_scanf_float+0x9c>)
 80054a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80054a8:	080055e7 	.word	0x080055e7
 80054ac:	08005471 	.word	0x08005471
 80054b0:	08005471 	.word	0x08005471
 80054b4:	08005471 	.word	0x08005471
 80054b8:	08005647 	.word	0x08005647
 80054bc:	0800561f 	.word	0x0800561f
 80054c0:	08005471 	.word	0x08005471
 80054c4:	08005471 	.word	0x08005471
 80054c8:	080055f5 	.word	0x080055f5
 80054cc:	08005471 	.word	0x08005471
 80054d0:	08005471 	.word	0x08005471
 80054d4:	08005471 	.word	0x08005471
 80054d8:	08005471 	.word	0x08005471
 80054dc:	080055ad 	.word	0x080055ad
 80054e0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80054e4:	e7db      	b.n	800549e <_scanf_float+0x92>
 80054e6:	290e      	cmp	r1, #14
 80054e8:	d8c2      	bhi.n	8005470 <_scanf_float+0x64>
 80054ea:	a001      	add	r0, pc, #4	; (adr r0, 80054f0 <_scanf_float+0xe4>)
 80054ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80054f0:	0800559f 	.word	0x0800559f
 80054f4:	08005471 	.word	0x08005471
 80054f8:	0800559f 	.word	0x0800559f
 80054fc:	08005633 	.word	0x08005633
 8005500:	08005471 	.word	0x08005471
 8005504:	0800554d 	.word	0x0800554d
 8005508:	08005589 	.word	0x08005589
 800550c:	08005589 	.word	0x08005589
 8005510:	08005589 	.word	0x08005589
 8005514:	08005589 	.word	0x08005589
 8005518:	08005589 	.word	0x08005589
 800551c:	08005589 	.word	0x08005589
 8005520:	08005589 	.word	0x08005589
 8005524:	08005589 	.word	0x08005589
 8005528:	08005589 	.word	0x08005589
 800552c:	2b6e      	cmp	r3, #110	; 0x6e
 800552e:	d809      	bhi.n	8005544 <_scanf_float+0x138>
 8005530:	2b60      	cmp	r3, #96	; 0x60
 8005532:	d8b2      	bhi.n	800549a <_scanf_float+0x8e>
 8005534:	2b54      	cmp	r3, #84	; 0x54
 8005536:	d077      	beq.n	8005628 <_scanf_float+0x21c>
 8005538:	2b59      	cmp	r3, #89	; 0x59
 800553a:	d199      	bne.n	8005470 <_scanf_float+0x64>
 800553c:	2d07      	cmp	r5, #7
 800553e:	d197      	bne.n	8005470 <_scanf_float+0x64>
 8005540:	2508      	movs	r5, #8
 8005542:	e029      	b.n	8005598 <_scanf_float+0x18c>
 8005544:	2b74      	cmp	r3, #116	; 0x74
 8005546:	d06f      	beq.n	8005628 <_scanf_float+0x21c>
 8005548:	2b79      	cmp	r3, #121	; 0x79
 800554a:	e7f6      	b.n	800553a <_scanf_float+0x12e>
 800554c:	6821      	ldr	r1, [r4, #0]
 800554e:	05c8      	lsls	r0, r1, #23
 8005550:	d51a      	bpl.n	8005588 <_scanf_float+0x17c>
 8005552:	9b02      	ldr	r3, [sp, #8]
 8005554:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005558:	6021      	str	r1, [r4, #0]
 800555a:	f109 0901 	add.w	r9, r9, #1
 800555e:	b11b      	cbz	r3, 8005568 <_scanf_float+0x15c>
 8005560:	3b01      	subs	r3, #1
 8005562:	3201      	adds	r2, #1
 8005564:	9302      	str	r3, [sp, #8]
 8005566:	60a2      	str	r2, [r4, #8]
 8005568:	68a3      	ldr	r3, [r4, #8]
 800556a:	3b01      	subs	r3, #1
 800556c:	60a3      	str	r3, [r4, #8]
 800556e:	6923      	ldr	r3, [r4, #16]
 8005570:	3301      	adds	r3, #1
 8005572:	6123      	str	r3, [r4, #16]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	3b01      	subs	r3, #1
 8005578:	2b00      	cmp	r3, #0
 800557a:	607b      	str	r3, [r7, #4]
 800557c:	f340 8084 	ble.w	8005688 <_scanf_float+0x27c>
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	3301      	adds	r3, #1
 8005584:	603b      	str	r3, [r7, #0]
 8005586:	e766      	b.n	8005456 <_scanf_float+0x4a>
 8005588:	eb1a 0f05 	cmn.w	sl, r5
 800558c:	f47f af70 	bne.w	8005470 <_scanf_float+0x64>
 8005590:	6822      	ldr	r2, [r4, #0]
 8005592:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005596:	6022      	str	r2, [r4, #0]
 8005598:	f806 3b01 	strb.w	r3, [r6], #1
 800559c:	e7e4      	b.n	8005568 <_scanf_float+0x15c>
 800559e:	6822      	ldr	r2, [r4, #0]
 80055a0:	0610      	lsls	r0, r2, #24
 80055a2:	f57f af65 	bpl.w	8005470 <_scanf_float+0x64>
 80055a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055aa:	e7f4      	b.n	8005596 <_scanf_float+0x18a>
 80055ac:	f1ba 0f00 	cmp.w	sl, #0
 80055b0:	d10e      	bne.n	80055d0 <_scanf_float+0x1c4>
 80055b2:	f1b9 0f00 	cmp.w	r9, #0
 80055b6:	d10e      	bne.n	80055d6 <_scanf_float+0x1ca>
 80055b8:	6822      	ldr	r2, [r4, #0]
 80055ba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80055be:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80055c2:	d108      	bne.n	80055d6 <_scanf_float+0x1ca>
 80055c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80055c8:	f04f 0a01 	mov.w	sl, #1
 80055cc:	6022      	str	r2, [r4, #0]
 80055ce:	e7e3      	b.n	8005598 <_scanf_float+0x18c>
 80055d0:	f1ba 0f02 	cmp.w	sl, #2
 80055d4:	d055      	beq.n	8005682 <_scanf_float+0x276>
 80055d6:	2d01      	cmp	r5, #1
 80055d8:	d002      	beq.n	80055e0 <_scanf_float+0x1d4>
 80055da:	2d04      	cmp	r5, #4
 80055dc:	f47f af48 	bne.w	8005470 <_scanf_float+0x64>
 80055e0:	3501      	adds	r5, #1
 80055e2:	b2ed      	uxtb	r5, r5
 80055e4:	e7d8      	b.n	8005598 <_scanf_float+0x18c>
 80055e6:	f1ba 0f01 	cmp.w	sl, #1
 80055ea:	f47f af41 	bne.w	8005470 <_scanf_float+0x64>
 80055ee:	f04f 0a02 	mov.w	sl, #2
 80055f2:	e7d1      	b.n	8005598 <_scanf_float+0x18c>
 80055f4:	b97d      	cbnz	r5, 8005616 <_scanf_float+0x20a>
 80055f6:	f1b9 0f00 	cmp.w	r9, #0
 80055fa:	f47f af3c 	bne.w	8005476 <_scanf_float+0x6a>
 80055fe:	6822      	ldr	r2, [r4, #0]
 8005600:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005604:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005608:	f47f af39 	bne.w	800547e <_scanf_float+0x72>
 800560c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005610:	2501      	movs	r5, #1
 8005612:	6022      	str	r2, [r4, #0]
 8005614:	e7c0      	b.n	8005598 <_scanf_float+0x18c>
 8005616:	2d03      	cmp	r5, #3
 8005618:	d0e2      	beq.n	80055e0 <_scanf_float+0x1d4>
 800561a:	2d05      	cmp	r5, #5
 800561c:	e7de      	b.n	80055dc <_scanf_float+0x1d0>
 800561e:	2d02      	cmp	r5, #2
 8005620:	f47f af26 	bne.w	8005470 <_scanf_float+0x64>
 8005624:	2503      	movs	r5, #3
 8005626:	e7b7      	b.n	8005598 <_scanf_float+0x18c>
 8005628:	2d06      	cmp	r5, #6
 800562a:	f47f af21 	bne.w	8005470 <_scanf_float+0x64>
 800562e:	2507      	movs	r5, #7
 8005630:	e7b2      	b.n	8005598 <_scanf_float+0x18c>
 8005632:	6822      	ldr	r2, [r4, #0]
 8005634:	0591      	lsls	r1, r2, #22
 8005636:	f57f af1b 	bpl.w	8005470 <_scanf_float+0x64>
 800563a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800563e:	6022      	str	r2, [r4, #0]
 8005640:	f8cd 9004 	str.w	r9, [sp, #4]
 8005644:	e7a8      	b.n	8005598 <_scanf_float+0x18c>
 8005646:	6822      	ldr	r2, [r4, #0]
 8005648:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800564c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005650:	d006      	beq.n	8005660 <_scanf_float+0x254>
 8005652:	0550      	lsls	r0, r2, #21
 8005654:	f57f af0c 	bpl.w	8005470 <_scanf_float+0x64>
 8005658:	f1b9 0f00 	cmp.w	r9, #0
 800565c:	f43f af0f 	beq.w	800547e <_scanf_float+0x72>
 8005660:	0591      	lsls	r1, r2, #22
 8005662:	bf58      	it	pl
 8005664:	9901      	ldrpl	r1, [sp, #4]
 8005666:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800566a:	bf58      	it	pl
 800566c:	eba9 0101 	subpl.w	r1, r9, r1
 8005670:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005674:	f04f 0900 	mov.w	r9, #0
 8005678:	bf58      	it	pl
 800567a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800567e:	6022      	str	r2, [r4, #0]
 8005680:	e78a      	b.n	8005598 <_scanf_float+0x18c>
 8005682:	f04f 0a03 	mov.w	sl, #3
 8005686:	e787      	b.n	8005598 <_scanf_float+0x18c>
 8005688:	4639      	mov	r1, r7
 800568a:	4640      	mov	r0, r8
 800568c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005690:	4798      	blx	r3
 8005692:	2800      	cmp	r0, #0
 8005694:	f43f aedf 	beq.w	8005456 <_scanf_float+0x4a>
 8005698:	e6ea      	b.n	8005470 <_scanf_float+0x64>
 800569a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800569e:	463a      	mov	r2, r7
 80056a0:	4640      	mov	r0, r8
 80056a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80056a6:	4798      	blx	r3
 80056a8:	6923      	ldr	r3, [r4, #16]
 80056aa:	3b01      	subs	r3, #1
 80056ac:	6123      	str	r3, [r4, #16]
 80056ae:	e6ec      	b.n	800548a <_scanf_float+0x7e>
 80056b0:	1e6b      	subs	r3, r5, #1
 80056b2:	2b06      	cmp	r3, #6
 80056b4:	d825      	bhi.n	8005702 <_scanf_float+0x2f6>
 80056b6:	2d02      	cmp	r5, #2
 80056b8:	d836      	bhi.n	8005728 <_scanf_float+0x31c>
 80056ba:	455e      	cmp	r6, fp
 80056bc:	f67f aee8 	bls.w	8005490 <_scanf_float+0x84>
 80056c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056c4:	463a      	mov	r2, r7
 80056c6:	4640      	mov	r0, r8
 80056c8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80056cc:	4798      	blx	r3
 80056ce:	6923      	ldr	r3, [r4, #16]
 80056d0:	3b01      	subs	r3, #1
 80056d2:	6123      	str	r3, [r4, #16]
 80056d4:	e7f1      	b.n	80056ba <_scanf_float+0x2ae>
 80056d6:	9802      	ldr	r0, [sp, #8]
 80056d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056dc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80056e0:	463a      	mov	r2, r7
 80056e2:	9002      	str	r0, [sp, #8]
 80056e4:	4640      	mov	r0, r8
 80056e6:	4798      	blx	r3
 80056e8:	6923      	ldr	r3, [r4, #16]
 80056ea:	3b01      	subs	r3, #1
 80056ec:	6123      	str	r3, [r4, #16]
 80056ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056f2:	fa5f fa8a 	uxtb.w	sl, sl
 80056f6:	f1ba 0f02 	cmp.w	sl, #2
 80056fa:	d1ec      	bne.n	80056d6 <_scanf_float+0x2ca>
 80056fc:	3d03      	subs	r5, #3
 80056fe:	b2ed      	uxtb	r5, r5
 8005700:	1b76      	subs	r6, r6, r5
 8005702:	6823      	ldr	r3, [r4, #0]
 8005704:	05da      	lsls	r2, r3, #23
 8005706:	d52f      	bpl.n	8005768 <_scanf_float+0x35c>
 8005708:	055b      	lsls	r3, r3, #21
 800570a:	d510      	bpl.n	800572e <_scanf_float+0x322>
 800570c:	455e      	cmp	r6, fp
 800570e:	f67f aebf 	bls.w	8005490 <_scanf_float+0x84>
 8005712:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005716:	463a      	mov	r2, r7
 8005718:	4640      	mov	r0, r8
 800571a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800571e:	4798      	blx	r3
 8005720:	6923      	ldr	r3, [r4, #16]
 8005722:	3b01      	subs	r3, #1
 8005724:	6123      	str	r3, [r4, #16]
 8005726:	e7f1      	b.n	800570c <_scanf_float+0x300>
 8005728:	46aa      	mov	sl, r5
 800572a:	9602      	str	r6, [sp, #8]
 800572c:	e7df      	b.n	80056ee <_scanf_float+0x2e2>
 800572e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005732:	6923      	ldr	r3, [r4, #16]
 8005734:	2965      	cmp	r1, #101	; 0x65
 8005736:	f103 33ff 	add.w	r3, r3, #4294967295
 800573a:	f106 35ff 	add.w	r5, r6, #4294967295
 800573e:	6123      	str	r3, [r4, #16]
 8005740:	d00c      	beq.n	800575c <_scanf_float+0x350>
 8005742:	2945      	cmp	r1, #69	; 0x45
 8005744:	d00a      	beq.n	800575c <_scanf_float+0x350>
 8005746:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800574a:	463a      	mov	r2, r7
 800574c:	4640      	mov	r0, r8
 800574e:	4798      	blx	r3
 8005750:	6923      	ldr	r3, [r4, #16]
 8005752:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005756:	3b01      	subs	r3, #1
 8005758:	1eb5      	subs	r5, r6, #2
 800575a:	6123      	str	r3, [r4, #16]
 800575c:	463a      	mov	r2, r7
 800575e:	4640      	mov	r0, r8
 8005760:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005764:	4798      	blx	r3
 8005766:	462e      	mov	r6, r5
 8005768:	6825      	ldr	r5, [r4, #0]
 800576a:	f015 0510 	ands.w	r5, r5, #16
 800576e:	d155      	bne.n	800581c <_scanf_float+0x410>
 8005770:	7035      	strb	r5, [r6, #0]
 8005772:	6823      	ldr	r3, [r4, #0]
 8005774:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800577c:	d11d      	bne.n	80057ba <_scanf_float+0x3ae>
 800577e:	9b01      	ldr	r3, [sp, #4]
 8005780:	454b      	cmp	r3, r9
 8005782:	eba3 0209 	sub.w	r2, r3, r9
 8005786:	d125      	bne.n	80057d4 <_scanf_float+0x3c8>
 8005788:	2200      	movs	r2, #0
 800578a:	4659      	mov	r1, fp
 800578c:	4640      	mov	r0, r8
 800578e:	f002 fc1b 	bl	8007fc8 <_strtod_r>
 8005792:	9b03      	ldr	r3, [sp, #12]
 8005794:	f8d4 c000 	ldr.w	ip, [r4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f01c 0f02 	tst.w	ip, #2
 800579e:	4606      	mov	r6, r0
 80057a0:	460f      	mov	r7, r1
 80057a2:	f103 0204 	add.w	r2, r3, #4
 80057a6:	d020      	beq.n	80057ea <_scanf_float+0x3de>
 80057a8:	9903      	ldr	r1, [sp, #12]
 80057aa:	600a      	str	r2, [r1, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	e9c3 6700 	strd	r6, r7, [r3]
 80057b2:	68e3      	ldr	r3, [r4, #12]
 80057b4:	3301      	adds	r3, #1
 80057b6:	60e3      	str	r3, [r4, #12]
 80057b8:	e66b      	b.n	8005492 <_scanf_float+0x86>
 80057ba:	9b04      	ldr	r3, [sp, #16]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d0e3      	beq.n	8005788 <_scanf_float+0x37c>
 80057c0:	9905      	ldr	r1, [sp, #20]
 80057c2:	230a      	movs	r3, #10
 80057c4:	462a      	mov	r2, r5
 80057c6:	4640      	mov	r0, r8
 80057c8:	3101      	adds	r1, #1
 80057ca:	f002 fc81 	bl	80080d0 <_strtol_r>
 80057ce:	9b04      	ldr	r3, [sp, #16]
 80057d0:	9e05      	ldr	r6, [sp, #20]
 80057d2:	1ac2      	subs	r2, r0, r3
 80057d4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80057d8:	429e      	cmp	r6, r3
 80057da:	bf28      	it	cs
 80057dc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80057e0:	4630      	mov	r0, r6
 80057e2:	490f      	ldr	r1, [pc, #60]	; (8005820 <_scanf_float+0x414>)
 80057e4:	f000 f8d0 	bl	8005988 <siprintf>
 80057e8:	e7ce      	b.n	8005788 <_scanf_float+0x37c>
 80057ea:	f01c 0f04 	tst.w	ip, #4
 80057ee:	d1db      	bne.n	80057a8 <_scanf_float+0x39c>
 80057f0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80057f4:	f8cc 2000 	str.w	r2, [ip]
 80057f8:	f8d3 8000 	ldr.w	r8, [r3]
 80057fc:	4602      	mov	r2, r0
 80057fe:	460b      	mov	r3, r1
 8005800:	f7fb f904 	bl	8000a0c <__aeabi_dcmpun>
 8005804:	b128      	cbz	r0, 8005812 <_scanf_float+0x406>
 8005806:	4807      	ldr	r0, [pc, #28]	; (8005824 <_scanf_float+0x418>)
 8005808:	f000 f9bc 	bl	8005b84 <nanf>
 800580c:	f8c8 0000 	str.w	r0, [r8]
 8005810:	e7cf      	b.n	80057b2 <_scanf_float+0x3a6>
 8005812:	4630      	mov	r0, r6
 8005814:	4639      	mov	r1, r7
 8005816:	f7fb f957 	bl	8000ac8 <__aeabi_d2f>
 800581a:	e7f7      	b.n	800580c <_scanf_float+0x400>
 800581c:	2500      	movs	r5, #0
 800581e:	e638      	b.n	8005492 <_scanf_float+0x86>
 8005820:	08009366 	.word	0x08009366
 8005824:	080096fd 	.word	0x080096fd

08005828 <std>:
 8005828:	2300      	movs	r3, #0
 800582a:	b510      	push	{r4, lr}
 800582c:	4604      	mov	r4, r0
 800582e:	e9c0 3300 	strd	r3, r3, [r0]
 8005832:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005836:	6083      	str	r3, [r0, #8]
 8005838:	8181      	strh	r1, [r0, #12]
 800583a:	6643      	str	r3, [r0, #100]	; 0x64
 800583c:	81c2      	strh	r2, [r0, #14]
 800583e:	6183      	str	r3, [r0, #24]
 8005840:	4619      	mov	r1, r3
 8005842:	2208      	movs	r2, #8
 8005844:	305c      	adds	r0, #92	; 0x5c
 8005846:	f000 f902 	bl	8005a4e <memset>
 800584a:	4b05      	ldr	r3, [pc, #20]	; (8005860 <std+0x38>)
 800584c:	6224      	str	r4, [r4, #32]
 800584e:	6263      	str	r3, [r4, #36]	; 0x24
 8005850:	4b04      	ldr	r3, [pc, #16]	; (8005864 <std+0x3c>)
 8005852:	62a3      	str	r3, [r4, #40]	; 0x28
 8005854:	4b04      	ldr	r3, [pc, #16]	; (8005868 <std+0x40>)
 8005856:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005858:	4b04      	ldr	r3, [pc, #16]	; (800586c <std+0x44>)
 800585a:	6323      	str	r3, [r4, #48]	; 0x30
 800585c:	bd10      	pop	{r4, pc}
 800585e:	bf00      	nop
 8005860:	080059c9 	.word	0x080059c9
 8005864:	080059eb 	.word	0x080059eb
 8005868:	08005a23 	.word	0x08005a23
 800586c:	08005a47 	.word	0x08005a47

08005870 <stdio_exit_handler>:
 8005870:	4a02      	ldr	r2, [pc, #8]	; (800587c <stdio_exit_handler+0xc>)
 8005872:	4903      	ldr	r1, [pc, #12]	; (8005880 <stdio_exit_handler+0x10>)
 8005874:	4803      	ldr	r0, [pc, #12]	; (8005884 <stdio_exit_handler+0x14>)
 8005876:	f000 b869 	b.w	800594c <_fwalk_sglue>
 800587a:	bf00      	nop
 800587c:	2000000c 	.word	0x2000000c
 8005880:	08008489 	.word	0x08008489
 8005884:	20000018 	.word	0x20000018

08005888 <cleanup_stdio>:
 8005888:	6841      	ldr	r1, [r0, #4]
 800588a:	4b0c      	ldr	r3, [pc, #48]	; (80058bc <cleanup_stdio+0x34>)
 800588c:	b510      	push	{r4, lr}
 800588e:	4299      	cmp	r1, r3
 8005890:	4604      	mov	r4, r0
 8005892:	d001      	beq.n	8005898 <cleanup_stdio+0x10>
 8005894:	f002 fdf8 	bl	8008488 <_fflush_r>
 8005898:	68a1      	ldr	r1, [r4, #8]
 800589a:	4b09      	ldr	r3, [pc, #36]	; (80058c0 <cleanup_stdio+0x38>)
 800589c:	4299      	cmp	r1, r3
 800589e:	d002      	beq.n	80058a6 <cleanup_stdio+0x1e>
 80058a0:	4620      	mov	r0, r4
 80058a2:	f002 fdf1 	bl	8008488 <_fflush_r>
 80058a6:	68e1      	ldr	r1, [r4, #12]
 80058a8:	4b06      	ldr	r3, [pc, #24]	; (80058c4 <cleanup_stdio+0x3c>)
 80058aa:	4299      	cmp	r1, r3
 80058ac:	d004      	beq.n	80058b8 <cleanup_stdio+0x30>
 80058ae:	4620      	mov	r0, r4
 80058b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058b4:	f002 bde8 	b.w	8008488 <_fflush_r>
 80058b8:	bd10      	pop	{r4, pc}
 80058ba:	bf00      	nop
 80058bc:	20000374 	.word	0x20000374
 80058c0:	200003dc 	.word	0x200003dc
 80058c4:	20000444 	.word	0x20000444

080058c8 <global_stdio_init.part.0>:
 80058c8:	b510      	push	{r4, lr}
 80058ca:	4b0b      	ldr	r3, [pc, #44]	; (80058f8 <global_stdio_init.part.0+0x30>)
 80058cc:	4c0b      	ldr	r4, [pc, #44]	; (80058fc <global_stdio_init.part.0+0x34>)
 80058ce:	4a0c      	ldr	r2, [pc, #48]	; (8005900 <global_stdio_init.part.0+0x38>)
 80058d0:	4620      	mov	r0, r4
 80058d2:	601a      	str	r2, [r3, #0]
 80058d4:	2104      	movs	r1, #4
 80058d6:	2200      	movs	r2, #0
 80058d8:	f7ff ffa6 	bl	8005828 <std>
 80058dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80058e0:	2201      	movs	r2, #1
 80058e2:	2109      	movs	r1, #9
 80058e4:	f7ff ffa0 	bl	8005828 <std>
 80058e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80058ec:	2202      	movs	r2, #2
 80058ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058f2:	2112      	movs	r1, #18
 80058f4:	f7ff bf98 	b.w	8005828 <std>
 80058f8:	200004ac 	.word	0x200004ac
 80058fc:	20000374 	.word	0x20000374
 8005900:	08005871 	.word	0x08005871

08005904 <__sfp_lock_acquire>:
 8005904:	4801      	ldr	r0, [pc, #4]	; (800590c <__sfp_lock_acquire+0x8>)
 8005906:	f000 b92d 	b.w	8005b64 <__retarget_lock_acquire_recursive>
 800590a:	bf00      	nop
 800590c:	200004b5 	.word	0x200004b5

08005910 <__sfp_lock_release>:
 8005910:	4801      	ldr	r0, [pc, #4]	; (8005918 <__sfp_lock_release+0x8>)
 8005912:	f000 b928 	b.w	8005b66 <__retarget_lock_release_recursive>
 8005916:	bf00      	nop
 8005918:	200004b5 	.word	0x200004b5

0800591c <__sinit>:
 800591c:	b510      	push	{r4, lr}
 800591e:	4604      	mov	r4, r0
 8005920:	f7ff fff0 	bl	8005904 <__sfp_lock_acquire>
 8005924:	6a23      	ldr	r3, [r4, #32]
 8005926:	b11b      	cbz	r3, 8005930 <__sinit+0x14>
 8005928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800592c:	f7ff bff0 	b.w	8005910 <__sfp_lock_release>
 8005930:	4b04      	ldr	r3, [pc, #16]	; (8005944 <__sinit+0x28>)
 8005932:	6223      	str	r3, [r4, #32]
 8005934:	4b04      	ldr	r3, [pc, #16]	; (8005948 <__sinit+0x2c>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1f5      	bne.n	8005928 <__sinit+0xc>
 800593c:	f7ff ffc4 	bl	80058c8 <global_stdio_init.part.0>
 8005940:	e7f2      	b.n	8005928 <__sinit+0xc>
 8005942:	bf00      	nop
 8005944:	08005889 	.word	0x08005889
 8005948:	200004ac 	.word	0x200004ac

0800594c <_fwalk_sglue>:
 800594c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005950:	4607      	mov	r7, r0
 8005952:	4688      	mov	r8, r1
 8005954:	4614      	mov	r4, r2
 8005956:	2600      	movs	r6, #0
 8005958:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800595c:	f1b9 0901 	subs.w	r9, r9, #1
 8005960:	d505      	bpl.n	800596e <_fwalk_sglue+0x22>
 8005962:	6824      	ldr	r4, [r4, #0]
 8005964:	2c00      	cmp	r4, #0
 8005966:	d1f7      	bne.n	8005958 <_fwalk_sglue+0xc>
 8005968:	4630      	mov	r0, r6
 800596a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800596e:	89ab      	ldrh	r3, [r5, #12]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d907      	bls.n	8005984 <_fwalk_sglue+0x38>
 8005974:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005978:	3301      	adds	r3, #1
 800597a:	d003      	beq.n	8005984 <_fwalk_sglue+0x38>
 800597c:	4629      	mov	r1, r5
 800597e:	4638      	mov	r0, r7
 8005980:	47c0      	blx	r8
 8005982:	4306      	orrs	r6, r0
 8005984:	3568      	adds	r5, #104	; 0x68
 8005986:	e7e9      	b.n	800595c <_fwalk_sglue+0x10>

08005988 <siprintf>:
 8005988:	b40e      	push	{r1, r2, r3}
 800598a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800598e:	b500      	push	{lr}
 8005990:	b09c      	sub	sp, #112	; 0x70
 8005992:	ab1d      	add	r3, sp, #116	; 0x74
 8005994:	9002      	str	r0, [sp, #8]
 8005996:	9006      	str	r0, [sp, #24]
 8005998:	9107      	str	r1, [sp, #28]
 800599a:	9104      	str	r1, [sp, #16]
 800599c:	4808      	ldr	r0, [pc, #32]	; (80059c0 <siprintf+0x38>)
 800599e:	4909      	ldr	r1, [pc, #36]	; (80059c4 <siprintf+0x3c>)
 80059a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80059a4:	9105      	str	r1, [sp, #20]
 80059a6:	6800      	ldr	r0, [r0, #0]
 80059a8:	a902      	add	r1, sp, #8
 80059aa:	9301      	str	r3, [sp, #4]
 80059ac:	f002 fbec 	bl	8008188 <_svfiprintf_r>
 80059b0:	2200      	movs	r2, #0
 80059b2:	9b02      	ldr	r3, [sp, #8]
 80059b4:	701a      	strb	r2, [r3, #0]
 80059b6:	b01c      	add	sp, #112	; 0x70
 80059b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80059bc:	b003      	add	sp, #12
 80059be:	4770      	bx	lr
 80059c0:	20000064 	.word	0x20000064
 80059c4:	ffff0208 	.word	0xffff0208

080059c8 <__sread>:
 80059c8:	b510      	push	{r4, lr}
 80059ca:	460c      	mov	r4, r1
 80059cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059d0:	f000 f87a 	bl	8005ac8 <_read_r>
 80059d4:	2800      	cmp	r0, #0
 80059d6:	bfab      	itete	ge
 80059d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80059da:	89a3      	ldrhlt	r3, [r4, #12]
 80059dc:	181b      	addge	r3, r3, r0
 80059de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80059e2:	bfac      	ite	ge
 80059e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80059e6:	81a3      	strhlt	r3, [r4, #12]
 80059e8:	bd10      	pop	{r4, pc}

080059ea <__swrite>:
 80059ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059ee:	461f      	mov	r7, r3
 80059f0:	898b      	ldrh	r3, [r1, #12]
 80059f2:	4605      	mov	r5, r0
 80059f4:	05db      	lsls	r3, r3, #23
 80059f6:	460c      	mov	r4, r1
 80059f8:	4616      	mov	r6, r2
 80059fa:	d505      	bpl.n	8005a08 <__swrite+0x1e>
 80059fc:	2302      	movs	r3, #2
 80059fe:	2200      	movs	r2, #0
 8005a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a04:	f000 f84e 	bl	8005aa4 <_lseek_r>
 8005a08:	89a3      	ldrh	r3, [r4, #12]
 8005a0a:	4632      	mov	r2, r6
 8005a0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a10:	81a3      	strh	r3, [r4, #12]
 8005a12:	4628      	mov	r0, r5
 8005a14:	463b      	mov	r3, r7
 8005a16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a1e:	f000 b865 	b.w	8005aec <_write_r>

08005a22 <__sseek>:
 8005a22:	b510      	push	{r4, lr}
 8005a24:	460c      	mov	r4, r1
 8005a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a2a:	f000 f83b 	bl	8005aa4 <_lseek_r>
 8005a2e:	1c43      	adds	r3, r0, #1
 8005a30:	89a3      	ldrh	r3, [r4, #12]
 8005a32:	bf15      	itete	ne
 8005a34:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a3e:	81a3      	strheq	r3, [r4, #12]
 8005a40:	bf18      	it	ne
 8005a42:	81a3      	strhne	r3, [r4, #12]
 8005a44:	bd10      	pop	{r4, pc}

08005a46 <__sclose>:
 8005a46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a4a:	f000 b81b 	b.w	8005a84 <_close_r>

08005a4e <memset>:
 8005a4e:	4603      	mov	r3, r0
 8005a50:	4402      	add	r2, r0
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d100      	bne.n	8005a58 <memset+0xa>
 8005a56:	4770      	bx	lr
 8005a58:	f803 1b01 	strb.w	r1, [r3], #1
 8005a5c:	e7f9      	b.n	8005a52 <memset+0x4>

08005a5e <strcat>:
 8005a5e:	4602      	mov	r2, r0
 8005a60:	b510      	push	{r4, lr}
 8005a62:	7814      	ldrb	r4, [r2, #0]
 8005a64:	4613      	mov	r3, r2
 8005a66:	3201      	adds	r2, #1
 8005a68:	2c00      	cmp	r4, #0
 8005a6a:	d1fa      	bne.n	8005a62 <strcat+0x4>
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a76:	2a00      	cmp	r2, #0
 8005a78:	d1f9      	bne.n	8005a6e <strcat+0x10>
 8005a7a:	bd10      	pop	{r4, pc}

08005a7c <_localeconv_r>:
 8005a7c:	4800      	ldr	r0, [pc, #0]	; (8005a80 <_localeconv_r+0x4>)
 8005a7e:	4770      	bx	lr
 8005a80:	20000158 	.word	0x20000158

08005a84 <_close_r>:
 8005a84:	b538      	push	{r3, r4, r5, lr}
 8005a86:	2300      	movs	r3, #0
 8005a88:	4d05      	ldr	r5, [pc, #20]	; (8005aa0 <_close_r+0x1c>)
 8005a8a:	4604      	mov	r4, r0
 8005a8c:	4608      	mov	r0, r1
 8005a8e:	602b      	str	r3, [r5, #0]
 8005a90:	f7fc fb7c 	bl	800218c <_close>
 8005a94:	1c43      	adds	r3, r0, #1
 8005a96:	d102      	bne.n	8005a9e <_close_r+0x1a>
 8005a98:	682b      	ldr	r3, [r5, #0]
 8005a9a:	b103      	cbz	r3, 8005a9e <_close_r+0x1a>
 8005a9c:	6023      	str	r3, [r4, #0]
 8005a9e:	bd38      	pop	{r3, r4, r5, pc}
 8005aa0:	200004b0 	.word	0x200004b0

08005aa4 <_lseek_r>:
 8005aa4:	b538      	push	{r3, r4, r5, lr}
 8005aa6:	4604      	mov	r4, r0
 8005aa8:	4608      	mov	r0, r1
 8005aaa:	4611      	mov	r1, r2
 8005aac:	2200      	movs	r2, #0
 8005aae:	4d05      	ldr	r5, [pc, #20]	; (8005ac4 <_lseek_r+0x20>)
 8005ab0:	602a      	str	r2, [r5, #0]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	f7fc fb8e 	bl	80021d4 <_lseek>
 8005ab8:	1c43      	adds	r3, r0, #1
 8005aba:	d102      	bne.n	8005ac2 <_lseek_r+0x1e>
 8005abc:	682b      	ldr	r3, [r5, #0]
 8005abe:	b103      	cbz	r3, 8005ac2 <_lseek_r+0x1e>
 8005ac0:	6023      	str	r3, [r4, #0]
 8005ac2:	bd38      	pop	{r3, r4, r5, pc}
 8005ac4:	200004b0 	.word	0x200004b0

08005ac8 <_read_r>:
 8005ac8:	b538      	push	{r3, r4, r5, lr}
 8005aca:	4604      	mov	r4, r0
 8005acc:	4608      	mov	r0, r1
 8005ace:	4611      	mov	r1, r2
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	4d05      	ldr	r5, [pc, #20]	; (8005ae8 <_read_r+0x20>)
 8005ad4:	602a      	str	r2, [r5, #0]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	f7fc fb1f 	bl	800211a <_read>
 8005adc:	1c43      	adds	r3, r0, #1
 8005ade:	d102      	bne.n	8005ae6 <_read_r+0x1e>
 8005ae0:	682b      	ldr	r3, [r5, #0]
 8005ae2:	b103      	cbz	r3, 8005ae6 <_read_r+0x1e>
 8005ae4:	6023      	str	r3, [r4, #0]
 8005ae6:	bd38      	pop	{r3, r4, r5, pc}
 8005ae8:	200004b0 	.word	0x200004b0

08005aec <_write_r>:
 8005aec:	b538      	push	{r3, r4, r5, lr}
 8005aee:	4604      	mov	r4, r0
 8005af0:	4608      	mov	r0, r1
 8005af2:	4611      	mov	r1, r2
 8005af4:	2200      	movs	r2, #0
 8005af6:	4d05      	ldr	r5, [pc, #20]	; (8005b0c <_write_r+0x20>)
 8005af8:	602a      	str	r2, [r5, #0]
 8005afa:	461a      	mov	r2, r3
 8005afc:	f7fc fb2a 	bl	8002154 <_write>
 8005b00:	1c43      	adds	r3, r0, #1
 8005b02:	d102      	bne.n	8005b0a <_write_r+0x1e>
 8005b04:	682b      	ldr	r3, [r5, #0]
 8005b06:	b103      	cbz	r3, 8005b0a <_write_r+0x1e>
 8005b08:	6023      	str	r3, [r4, #0]
 8005b0a:	bd38      	pop	{r3, r4, r5, pc}
 8005b0c:	200004b0 	.word	0x200004b0

08005b10 <__errno>:
 8005b10:	4b01      	ldr	r3, [pc, #4]	; (8005b18 <__errno+0x8>)
 8005b12:	6818      	ldr	r0, [r3, #0]
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	20000064 	.word	0x20000064

08005b1c <__libc_init_array>:
 8005b1c:	b570      	push	{r4, r5, r6, lr}
 8005b1e:	2600      	movs	r6, #0
 8005b20:	4d0c      	ldr	r5, [pc, #48]	; (8005b54 <__libc_init_array+0x38>)
 8005b22:	4c0d      	ldr	r4, [pc, #52]	; (8005b58 <__libc_init_array+0x3c>)
 8005b24:	1b64      	subs	r4, r4, r5
 8005b26:	10a4      	asrs	r4, r4, #2
 8005b28:	42a6      	cmp	r6, r4
 8005b2a:	d109      	bne.n	8005b40 <__libc_init_array+0x24>
 8005b2c:	f003 fbbe 	bl	80092ac <_init>
 8005b30:	2600      	movs	r6, #0
 8005b32:	4d0a      	ldr	r5, [pc, #40]	; (8005b5c <__libc_init_array+0x40>)
 8005b34:	4c0a      	ldr	r4, [pc, #40]	; (8005b60 <__libc_init_array+0x44>)
 8005b36:	1b64      	subs	r4, r4, r5
 8005b38:	10a4      	asrs	r4, r4, #2
 8005b3a:	42a6      	cmp	r6, r4
 8005b3c:	d105      	bne.n	8005b4a <__libc_init_array+0x2e>
 8005b3e:	bd70      	pop	{r4, r5, r6, pc}
 8005b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b44:	4798      	blx	r3
 8005b46:	3601      	adds	r6, #1
 8005b48:	e7ee      	b.n	8005b28 <__libc_init_array+0xc>
 8005b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b4e:	4798      	blx	r3
 8005b50:	3601      	adds	r6, #1
 8005b52:	e7f2      	b.n	8005b3a <__libc_init_array+0x1e>
 8005b54:	08009768 	.word	0x08009768
 8005b58:	08009768 	.word	0x08009768
 8005b5c:	08009768 	.word	0x08009768
 8005b60:	0800976c 	.word	0x0800976c

08005b64 <__retarget_lock_acquire_recursive>:
 8005b64:	4770      	bx	lr

08005b66 <__retarget_lock_release_recursive>:
 8005b66:	4770      	bx	lr

08005b68 <memchr>:
 8005b68:	4603      	mov	r3, r0
 8005b6a:	b510      	push	{r4, lr}
 8005b6c:	b2c9      	uxtb	r1, r1
 8005b6e:	4402      	add	r2, r0
 8005b70:	4293      	cmp	r3, r2
 8005b72:	4618      	mov	r0, r3
 8005b74:	d101      	bne.n	8005b7a <memchr+0x12>
 8005b76:	2000      	movs	r0, #0
 8005b78:	e003      	b.n	8005b82 <memchr+0x1a>
 8005b7a:	7804      	ldrb	r4, [r0, #0]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	428c      	cmp	r4, r1
 8005b80:	d1f6      	bne.n	8005b70 <memchr+0x8>
 8005b82:	bd10      	pop	{r4, pc}

08005b84 <nanf>:
 8005b84:	4800      	ldr	r0, [pc, #0]	; (8005b88 <nanf+0x4>)
 8005b86:	4770      	bx	lr
 8005b88:	7fc00000 	.word	0x7fc00000

08005b8c <quorem>:
 8005b8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b90:	6903      	ldr	r3, [r0, #16]
 8005b92:	690c      	ldr	r4, [r1, #16]
 8005b94:	4607      	mov	r7, r0
 8005b96:	42a3      	cmp	r3, r4
 8005b98:	db7f      	blt.n	8005c9a <quorem+0x10e>
 8005b9a:	3c01      	subs	r4, #1
 8005b9c:	f100 0514 	add.w	r5, r0, #20
 8005ba0:	f101 0814 	add.w	r8, r1, #20
 8005ba4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ba8:	9301      	str	r3, [sp, #4]
 8005baa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005bae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	fbb2 f6f3 	udiv	r6, r2, r3
 8005bba:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005bbe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005bc2:	d331      	bcc.n	8005c28 <quorem+0x9c>
 8005bc4:	f04f 0e00 	mov.w	lr, #0
 8005bc8:	4640      	mov	r0, r8
 8005bca:	46ac      	mov	ip, r5
 8005bcc:	46f2      	mov	sl, lr
 8005bce:	f850 2b04 	ldr.w	r2, [r0], #4
 8005bd2:	b293      	uxth	r3, r2
 8005bd4:	fb06 e303 	mla	r3, r6, r3, lr
 8005bd8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005bdc:	0c1a      	lsrs	r2, r3, #16
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	fb06 220e 	mla	r2, r6, lr, r2
 8005be4:	ebaa 0303 	sub.w	r3, sl, r3
 8005be8:	f8dc a000 	ldr.w	sl, [ip]
 8005bec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005bf0:	fa1f fa8a 	uxth.w	sl, sl
 8005bf4:	4453      	add	r3, sl
 8005bf6:	f8dc a000 	ldr.w	sl, [ip]
 8005bfa:	b292      	uxth	r2, r2
 8005bfc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005c00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c0a:	4581      	cmp	r9, r0
 8005c0c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005c10:	f84c 3b04 	str.w	r3, [ip], #4
 8005c14:	d2db      	bcs.n	8005bce <quorem+0x42>
 8005c16:	f855 300b 	ldr.w	r3, [r5, fp]
 8005c1a:	b92b      	cbnz	r3, 8005c28 <quorem+0x9c>
 8005c1c:	9b01      	ldr	r3, [sp, #4]
 8005c1e:	3b04      	subs	r3, #4
 8005c20:	429d      	cmp	r5, r3
 8005c22:	461a      	mov	r2, r3
 8005c24:	d32d      	bcc.n	8005c82 <quorem+0xf6>
 8005c26:	613c      	str	r4, [r7, #16]
 8005c28:	4638      	mov	r0, r7
 8005c2a:	f001 f9dd 	bl	8006fe8 <__mcmp>
 8005c2e:	2800      	cmp	r0, #0
 8005c30:	db23      	blt.n	8005c7a <quorem+0xee>
 8005c32:	4629      	mov	r1, r5
 8005c34:	2000      	movs	r0, #0
 8005c36:	3601      	adds	r6, #1
 8005c38:	f858 2b04 	ldr.w	r2, [r8], #4
 8005c3c:	f8d1 c000 	ldr.w	ip, [r1]
 8005c40:	b293      	uxth	r3, r2
 8005c42:	1ac3      	subs	r3, r0, r3
 8005c44:	0c12      	lsrs	r2, r2, #16
 8005c46:	fa1f f08c 	uxth.w	r0, ip
 8005c4a:	4403      	add	r3, r0
 8005c4c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005c50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c5a:	45c1      	cmp	r9, r8
 8005c5c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005c60:	f841 3b04 	str.w	r3, [r1], #4
 8005c64:	d2e8      	bcs.n	8005c38 <quorem+0xac>
 8005c66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c6e:	b922      	cbnz	r2, 8005c7a <quorem+0xee>
 8005c70:	3b04      	subs	r3, #4
 8005c72:	429d      	cmp	r5, r3
 8005c74:	461a      	mov	r2, r3
 8005c76:	d30a      	bcc.n	8005c8e <quorem+0x102>
 8005c78:	613c      	str	r4, [r7, #16]
 8005c7a:	4630      	mov	r0, r6
 8005c7c:	b003      	add	sp, #12
 8005c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c82:	6812      	ldr	r2, [r2, #0]
 8005c84:	3b04      	subs	r3, #4
 8005c86:	2a00      	cmp	r2, #0
 8005c88:	d1cd      	bne.n	8005c26 <quorem+0x9a>
 8005c8a:	3c01      	subs	r4, #1
 8005c8c:	e7c8      	b.n	8005c20 <quorem+0x94>
 8005c8e:	6812      	ldr	r2, [r2, #0]
 8005c90:	3b04      	subs	r3, #4
 8005c92:	2a00      	cmp	r2, #0
 8005c94:	d1f0      	bne.n	8005c78 <quorem+0xec>
 8005c96:	3c01      	subs	r4, #1
 8005c98:	e7eb      	b.n	8005c72 <quorem+0xe6>
 8005c9a:	2000      	movs	r0, #0
 8005c9c:	e7ee      	b.n	8005c7c <quorem+0xf0>
	...

08005ca0 <_dtoa_r>:
 8005ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca4:	4616      	mov	r6, r2
 8005ca6:	461f      	mov	r7, r3
 8005ca8:	69c4      	ldr	r4, [r0, #28]
 8005caa:	b099      	sub	sp, #100	; 0x64
 8005cac:	4605      	mov	r5, r0
 8005cae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005cb2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005cb6:	b974      	cbnz	r4, 8005cd6 <_dtoa_r+0x36>
 8005cb8:	2010      	movs	r0, #16
 8005cba:	f000 fe1d 	bl	80068f8 <malloc>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	61e8      	str	r0, [r5, #28]
 8005cc2:	b920      	cbnz	r0, 8005cce <_dtoa_r+0x2e>
 8005cc4:	21ef      	movs	r1, #239	; 0xef
 8005cc6:	4bac      	ldr	r3, [pc, #688]	; (8005f78 <_dtoa_r+0x2d8>)
 8005cc8:	48ac      	ldr	r0, [pc, #688]	; (8005f7c <_dtoa_r+0x2dc>)
 8005cca:	f002 fc55 	bl	8008578 <__assert_func>
 8005cce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005cd2:	6004      	str	r4, [r0, #0]
 8005cd4:	60c4      	str	r4, [r0, #12]
 8005cd6:	69eb      	ldr	r3, [r5, #28]
 8005cd8:	6819      	ldr	r1, [r3, #0]
 8005cda:	b151      	cbz	r1, 8005cf2 <_dtoa_r+0x52>
 8005cdc:	685a      	ldr	r2, [r3, #4]
 8005cde:	2301      	movs	r3, #1
 8005ce0:	4093      	lsls	r3, r2
 8005ce2:	604a      	str	r2, [r1, #4]
 8005ce4:	608b      	str	r3, [r1, #8]
 8005ce6:	4628      	mov	r0, r5
 8005ce8:	f000 fefa 	bl	8006ae0 <_Bfree>
 8005cec:	2200      	movs	r2, #0
 8005cee:	69eb      	ldr	r3, [r5, #28]
 8005cf0:	601a      	str	r2, [r3, #0]
 8005cf2:	1e3b      	subs	r3, r7, #0
 8005cf4:	bfaf      	iteee	ge
 8005cf6:	2300      	movge	r3, #0
 8005cf8:	2201      	movlt	r2, #1
 8005cfa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005cfe:	9305      	strlt	r3, [sp, #20]
 8005d00:	bfa8      	it	ge
 8005d02:	f8c8 3000 	strge.w	r3, [r8]
 8005d06:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005d0a:	4b9d      	ldr	r3, [pc, #628]	; (8005f80 <_dtoa_r+0x2e0>)
 8005d0c:	bfb8      	it	lt
 8005d0e:	f8c8 2000 	strlt.w	r2, [r8]
 8005d12:	ea33 0309 	bics.w	r3, r3, r9
 8005d16:	d119      	bne.n	8005d4c <_dtoa_r+0xac>
 8005d18:	f242 730f 	movw	r3, #9999	; 0x270f
 8005d1c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005d1e:	6013      	str	r3, [r2, #0]
 8005d20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005d24:	4333      	orrs	r3, r6
 8005d26:	f000 8589 	beq.w	800683c <_dtoa_r+0xb9c>
 8005d2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005d2c:	b953      	cbnz	r3, 8005d44 <_dtoa_r+0xa4>
 8005d2e:	4b95      	ldr	r3, [pc, #596]	; (8005f84 <_dtoa_r+0x2e4>)
 8005d30:	e023      	b.n	8005d7a <_dtoa_r+0xda>
 8005d32:	4b95      	ldr	r3, [pc, #596]	; (8005f88 <_dtoa_r+0x2e8>)
 8005d34:	9303      	str	r3, [sp, #12]
 8005d36:	3308      	adds	r3, #8
 8005d38:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005d3a:	6013      	str	r3, [r2, #0]
 8005d3c:	9803      	ldr	r0, [sp, #12]
 8005d3e:	b019      	add	sp, #100	; 0x64
 8005d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d44:	4b8f      	ldr	r3, [pc, #572]	; (8005f84 <_dtoa_r+0x2e4>)
 8005d46:	9303      	str	r3, [sp, #12]
 8005d48:	3303      	adds	r3, #3
 8005d4a:	e7f5      	b.n	8005d38 <_dtoa_r+0x98>
 8005d4c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005d50:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005d54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d58:	2200      	movs	r2, #0
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	f7fa fe24 	bl	80009a8 <__aeabi_dcmpeq>
 8005d60:	4680      	mov	r8, r0
 8005d62:	b160      	cbz	r0, 8005d7e <_dtoa_r+0xde>
 8005d64:	2301      	movs	r3, #1
 8005d66:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005d68:	6013      	str	r3, [r2, #0]
 8005d6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f000 8562 	beq.w	8006836 <_dtoa_r+0xb96>
 8005d72:	4b86      	ldr	r3, [pc, #536]	; (8005f8c <_dtoa_r+0x2ec>)
 8005d74:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005d76:	6013      	str	r3, [r2, #0]
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	9303      	str	r3, [sp, #12]
 8005d7c:	e7de      	b.n	8005d3c <_dtoa_r+0x9c>
 8005d7e:	ab16      	add	r3, sp, #88	; 0x58
 8005d80:	9301      	str	r3, [sp, #4]
 8005d82:	ab17      	add	r3, sp, #92	; 0x5c
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	4628      	mov	r0, r5
 8005d88:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005d8c:	f001 fa3c 	bl	8007208 <__d2b>
 8005d90:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005d94:	4682      	mov	sl, r0
 8005d96:	2c00      	cmp	r4, #0
 8005d98:	d07e      	beq.n	8005e98 <_dtoa_r+0x1f8>
 8005d9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005da0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005da4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005da8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005dac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005db0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005db4:	4619      	mov	r1, r3
 8005db6:	2200      	movs	r2, #0
 8005db8:	4b75      	ldr	r3, [pc, #468]	; (8005f90 <_dtoa_r+0x2f0>)
 8005dba:	f7fa f9d5 	bl	8000168 <__aeabi_dsub>
 8005dbe:	a368      	add	r3, pc, #416	; (adr r3, 8005f60 <_dtoa_r+0x2c0>)
 8005dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc4:	f7fa fb88 	bl	80004d8 <__aeabi_dmul>
 8005dc8:	a367      	add	r3, pc, #412	; (adr r3, 8005f68 <_dtoa_r+0x2c8>)
 8005dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dce:	f7fa f9cd 	bl	800016c <__adddf3>
 8005dd2:	4606      	mov	r6, r0
 8005dd4:	4620      	mov	r0, r4
 8005dd6:	460f      	mov	r7, r1
 8005dd8:	f7fa fb14 	bl	8000404 <__aeabi_i2d>
 8005ddc:	a364      	add	r3, pc, #400	; (adr r3, 8005f70 <_dtoa_r+0x2d0>)
 8005dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de2:	f7fa fb79 	bl	80004d8 <__aeabi_dmul>
 8005de6:	4602      	mov	r2, r0
 8005de8:	460b      	mov	r3, r1
 8005dea:	4630      	mov	r0, r6
 8005dec:	4639      	mov	r1, r7
 8005dee:	f7fa f9bd 	bl	800016c <__adddf3>
 8005df2:	4606      	mov	r6, r0
 8005df4:	460f      	mov	r7, r1
 8005df6:	f7fa fe1f 	bl	8000a38 <__aeabi_d2iz>
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	4683      	mov	fp, r0
 8005dfe:	2300      	movs	r3, #0
 8005e00:	4630      	mov	r0, r6
 8005e02:	4639      	mov	r1, r7
 8005e04:	f7fa fdda 	bl	80009bc <__aeabi_dcmplt>
 8005e08:	b148      	cbz	r0, 8005e1e <_dtoa_r+0x17e>
 8005e0a:	4658      	mov	r0, fp
 8005e0c:	f7fa fafa 	bl	8000404 <__aeabi_i2d>
 8005e10:	4632      	mov	r2, r6
 8005e12:	463b      	mov	r3, r7
 8005e14:	f7fa fdc8 	bl	80009a8 <__aeabi_dcmpeq>
 8005e18:	b908      	cbnz	r0, 8005e1e <_dtoa_r+0x17e>
 8005e1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005e1e:	f1bb 0f16 	cmp.w	fp, #22
 8005e22:	d857      	bhi.n	8005ed4 <_dtoa_r+0x234>
 8005e24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e28:	4b5a      	ldr	r3, [pc, #360]	; (8005f94 <_dtoa_r+0x2f4>)
 8005e2a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e32:	f7fa fdc3 	bl	80009bc <__aeabi_dcmplt>
 8005e36:	2800      	cmp	r0, #0
 8005e38:	d04e      	beq.n	8005ed8 <_dtoa_r+0x238>
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005e40:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e42:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005e44:	1b1b      	subs	r3, r3, r4
 8005e46:	1e5a      	subs	r2, r3, #1
 8005e48:	bf46      	itte	mi
 8005e4a:	f1c3 0901 	rsbmi	r9, r3, #1
 8005e4e:	2300      	movmi	r3, #0
 8005e50:	f04f 0900 	movpl.w	r9, #0
 8005e54:	9209      	str	r2, [sp, #36]	; 0x24
 8005e56:	bf48      	it	mi
 8005e58:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005e5a:	f1bb 0f00 	cmp.w	fp, #0
 8005e5e:	db3d      	blt.n	8005edc <_dtoa_r+0x23c>
 8005e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e62:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005e66:	445b      	add	r3, fp
 8005e68:	9309      	str	r3, [sp, #36]	; 0x24
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	930a      	str	r3, [sp, #40]	; 0x28
 8005e6e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e70:	2b09      	cmp	r3, #9
 8005e72:	d867      	bhi.n	8005f44 <_dtoa_r+0x2a4>
 8005e74:	2b05      	cmp	r3, #5
 8005e76:	bfc4      	itt	gt
 8005e78:	3b04      	subgt	r3, #4
 8005e7a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005e7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e7e:	bfc8      	it	gt
 8005e80:	2400      	movgt	r4, #0
 8005e82:	f1a3 0302 	sub.w	r3, r3, #2
 8005e86:	bfd8      	it	le
 8005e88:	2401      	movle	r4, #1
 8005e8a:	2b03      	cmp	r3, #3
 8005e8c:	f200 8086 	bhi.w	8005f9c <_dtoa_r+0x2fc>
 8005e90:	e8df f003 	tbb	[pc, r3]
 8005e94:	5637392c 	.word	0x5637392c
 8005e98:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005e9c:	441c      	add	r4, r3
 8005e9e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005ea2:	2b20      	cmp	r3, #32
 8005ea4:	bfc1      	itttt	gt
 8005ea6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005eaa:	fa09 f903 	lslgt.w	r9, r9, r3
 8005eae:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005eb2:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005eb6:	bfd6      	itet	le
 8005eb8:	f1c3 0320 	rsble	r3, r3, #32
 8005ebc:	ea49 0003 	orrgt.w	r0, r9, r3
 8005ec0:	fa06 f003 	lslle.w	r0, r6, r3
 8005ec4:	f7fa fa8e 	bl	80003e4 <__aeabi_ui2d>
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005ece:	3c01      	subs	r4, #1
 8005ed0:	9213      	str	r2, [sp, #76]	; 0x4c
 8005ed2:	e76f      	b.n	8005db4 <_dtoa_r+0x114>
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e7b3      	b.n	8005e40 <_dtoa_r+0x1a0>
 8005ed8:	900f      	str	r0, [sp, #60]	; 0x3c
 8005eda:	e7b2      	b.n	8005e42 <_dtoa_r+0x1a2>
 8005edc:	f1cb 0300 	rsb	r3, fp, #0
 8005ee0:	930a      	str	r3, [sp, #40]	; 0x28
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	eba9 090b 	sub.w	r9, r9, fp
 8005ee8:	930e      	str	r3, [sp, #56]	; 0x38
 8005eea:	e7c0      	b.n	8005e6e <_dtoa_r+0x1ce>
 8005eec:	2300      	movs	r3, #0
 8005eee:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ef0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	dc55      	bgt.n	8005fa2 <_dtoa_r+0x302>
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	461a      	mov	r2, r3
 8005efa:	9306      	str	r3, [sp, #24]
 8005efc:	9308      	str	r3, [sp, #32]
 8005efe:	9223      	str	r2, [sp, #140]	; 0x8c
 8005f00:	e00b      	b.n	8005f1a <_dtoa_r+0x27a>
 8005f02:	2301      	movs	r3, #1
 8005f04:	e7f3      	b.n	8005eee <_dtoa_r+0x24e>
 8005f06:	2300      	movs	r3, #0
 8005f08:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f0c:	445b      	add	r3, fp
 8005f0e:	9306      	str	r3, [sp, #24]
 8005f10:	3301      	adds	r3, #1
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	9308      	str	r3, [sp, #32]
 8005f16:	bfb8      	it	lt
 8005f18:	2301      	movlt	r3, #1
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	2204      	movs	r2, #4
 8005f1e:	69e8      	ldr	r0, [r5, #28]
 8005f20:	f102 0614 	add.w	r6, r2, #20
 8005f24:	429e      	cmp	r6, r3
 8005f26:	d940      	bls.n	8005faa <_dtoa_r+0x30a>
 8005f28:	6041      	str	r1, [r0, #4]
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	f000 fd98 	bl	8006a60 <_Balloc>
 8005f30:	9003      	str	r0, [sp, #12]
 8005f32:	2800      	cmp	r0, #0
 8005f34:	d13c      	bne.n	8005fb0 <_dtoa_r+0x310>
 8005f36:	4602      	mov	r2, r0
 8005f38:	f240 11af 	movw	r1, #431	; 0x1af
 8005f3c:	4b16      	ldr	r3, [pc, #88]	; (8005f98 <_dtoa_r+0x2f8>)
 8005f3e:	e6c3      	b.n	8005cc8 <_dtoa_r+0x28>
 8005f40:	2301      	movs	r3, #1
 8005f42:	e7e1      	b.n	8005f08 <_dtoa_r+0x268>
 8005f44:	2401      	movs	r4, #1
 8005f46:	2300      	movs	r3, #0
 8005f48:	940b      	str	r4, [sp, #44]	; 0x2c
 8005f4a:	9322      	str	r3, [sp, #136]	; 0x88
 8005f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f50:	2200      	movs	r2, #0
 8005f52:	9306      	str	r3, [sp, #24]
 8005f54:	9308      	str	r3, [sp, #32]
 8005f56:	2312      	movs	r3, #18
 8005f58:	e7d1      	b.n	8005efe <_dtoa_r+0x25e>
 8005f5a:	bf00      	nop
 8005f5c:	f3af 8000 	nop.w
 8005f60:	636f4361 	.word	0x636f4361
 8005f64:	3fd287a7 	.word	0x3fd287a7
 8005f68:	8b60c8b3 	.word	0x8b60c8b3
 8005f6c:	3fc68a28 	.word	0x3fc68a28
 8005f70:	509f79fb 	.word	0x509f79fb
 8005f74:	3fd34413 	.word	0x3fd34413
 8005f78:	08009378 	.word	0x08009378
 8005f7c:	0800938f 	.word	0x0800938f
 8005f80:	7ff00000 	.word	0x7ff00000
 8005f84:	08009374 	.word	0x08009374
 8005f88:	0800936b 	.word	0x0800936b
 8005f8c:	08009343 	.word	0x08009343
 8005f90:	3ff80000 	.word	0x3ff80000
 8005f94:	08009480 	.word	0x08009480
 8005f98:	080093e7 	.word	0x080093e7
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fa0:	e7d4      	b.n	8005f4c <_dtoa_r+0x2ac>
 8005fa2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005fa4:	9306      	str	r3, [sp, #24]
 8005fa6:	9308      	str	r3, [sp, #32]
 8005fa8:	e7b7      	b.n	8005f1a <_dtoa_r+0x27a>
 8005faa:	3101      	adds	r1, #1
 8005fac:	0052      	lsls	r2, r2, #1
 8005fae:	e7b7      	b.n	8005f20 <_dtoa_r+0x280>
 8005fb0:	69eb      	ldr	r3, [r5, #28]
 8005fb2:	9a03      	ldr	r2, [sp, #12]
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	9b08      	ldr	r3, [sp, #32]
 8005fb8:	2b0e      	cmp	r3, #14
 8005fba:	f200 80a8 	bhi.w	800610e <_dtoa_r+0x46e>
 8005fbe:	2c00      	cmp	r4, #0
 8005fc0:	f000 80a5 	beq.w	800610e <_dtoa_r+0x46e>
 8005fc4:	f1bb 0f00 	cmp.w	fp, #0
 8005fc8:	dd34      	ble.n	8006034 <_dtoa_r+0x394>
 8005fca:	4b9a      	ldr	r3, [pc, #616]	; (8006234 <_dtoa_r+0x594>)
 8005fcc:	f00b 020f 	and.w	r2, fp, #15
 8005fd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fd4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005fd8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005fdc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005fe0:	ea4f 142b 	mov.w	r4, fp, asr #4
 8005fe4:	d016      	beq.n	8006014 <_dtoa_r+0x374>
 8005fe6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005fea:	4b93      	ldr	r3, [pc, #588]	; (8006238 <_dtoa_r+0x598>)
 8005fec:	2703      	movs	r7, #3
 8005fee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005ff2:	f7fa fb9b 	bl	800072c <__aeabi_ddiv>
 8005ff6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ffa:	f004 040f 	and.w	r4, r4, #15
 8005ffe:	4e8e      	ldr	r6, [pc, #568]	; (8006238 <_dtoa_r+0x598>)
 8006000:	b954      	cbnz	r4, 8006018 <_dtoa_r+0x378>
 8006002:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006006:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800600a:	f7fa fb8f 	bl	800072c <__aeabi_ddiv>
 800600e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006012:	e029      	b.n	8006068 <_dtoa_r+0x3c8>
 8006014:	2702      	movs	r7, #2
 8006016:	e7f2      	b.n	8005ffe <_dtoa_r+0x35e>
 8006018:	07e1      	lsls	r1, r4, #31
 800601a:	d508      	bpl.n	800602e <_dtoa_r+0x38e>
 800601c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006020:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006024:	f7fa fa58 	bl	80004d8 <__aeabi_dmul>
 8006028:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800602c:	3701      	adds	r7, #1
 800602e:	1064      	asrs	r4, r4, #1
 8006030:	3608      	adds	r6, #8
 8006032:	e7e5      	b.n	8006000 <_dtoa_r+0x360>
 8006034:	f000 80a5 	beq.w	8006182 <_dtoa_r+0x4e2>
 8006038:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800603c:	f1cb 0400 	rsb	r4, fp, #0
 8006040:	4b7c      	ldr	r3, [pc, #496]	; (8006234 <_dtoa_r+0x594>)
 8006042:	f004 020f 	and.w	r2, r4, #15
 8006046:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800604a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604e:	f7fa fa43 	bl	80004d8 <__aeabi_dmul>
 8006052:	2702      	movs	r7, #2
 8006054:	2300      	movs	r3, #0
 8006056:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800605a:	4e77      	ldr	r6, [pc, #476]	; (8006238 <_dtoa_r+0x598>)
 800605c:	1124      	asrs	r4, r4, #4
 800605e:	2c00      	cmp	r4, #0
 8006060:	f040 8084 	bne.w	800616c <_dtoa_r+0x4cc>
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1d2      	bne.n	800600e <_dtoa_r+0x36e>
 8006068:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800606c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006070:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006072:	2b00      	cmp	r3, #0
 8006074:	f000 8087 	beq.w	8006186 <_dtoa_r+0x4e6>
 8006078:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800607c:	2200      	movs	r2, #0
 800607e:	4b6f      	ldr	r3, [pc, #444]	; (800623c <_dtoa_r+0x59c>)
 8006080:	f7fa fc9c 	bl	80009bc <__aeabi_dcmplt>
 8006084:	2800      	cmp	r0, #0
 8006086:	d07e      	beq.n	8006186 <_dtoa_r+0x4e6>
 8006088:	9b08      	ldr	r3, [sp, #32]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d07b      	beq.n	8006186 <_dtoa_r+0x4e6>
 800608e:	9b06      	ldr	r3, [sp, #24]
 8006090:	2b00      	cmp	r3, #0
 8006092:	dd38      	ble.n	8006106 <_dtoa_r+0x466>
 8006094:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006098:	2200      	movs	r2, #0
 800609a:	4b69      	ldr	r3, [pc, #420]	; (8006240 <_dtoa_r+0x5a0>)
 800609c:	f7fa fa1c 	bl	80004d8 <__aeabi_dmul>
 80060a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060a4:	9c06      	ldr	r4, [sp, #24]
 80060a6:	f10b 38ff 	add.w	r8, fp, #4294967295
 80060aa:	3701      	adds	r7, #1
 80060ac:	4638      	mov	r0, r7
 80060ae:	f7fa f9a9 	bl	8000404 <__aeabi_i2d>
 80060b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060b6:	f7fa fa0f 	bl	80004d8 <__aeabi_dmul>
 80060ba:	2200      	movs	r2, #0
 80060bc:	4b61      	ldr	r3, [pc, #388]	; (8006244 <_dtoa_r+0x5a4>)
 80060be:	f7fa f855 	bl	800016c <__adddf3>
 80060c2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80060c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80060ca:	9611      	str	r6, [sp, #68]	; 0x44
 80060cc:	2c00      	cmp	r4, #0
 80060ce:	d15d      	bne.n	800618c <_dtoa_r+0x4ec>
 80060d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060d4:	2200      	movs	r2, #0
 80060d6:	4b5c      	ldr	r3, [pc, #368]	; (8006248 <_dtoa_r+0x5a8>)
 80060d8:	f7fa f846 	bl	8000168 <__aeabi_dsub>
 80060dc:	4602      	mov	r2, r0
 80060de:	460b      	mov	r3, r1
 80060e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80060e4:	4633      	mov	r3, r6
 80060e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80060e8:	f7fa fc86 	bl	80009f8 <__aeabi_dcmpgt>
 80060ec:	2800      	cmp	r0, #0
 80060ee:	f040 8295 	bne.w	800661c <_dtoa_r+0x97c>
 80060f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80060f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80060fc:	f7fa fc5e 	bl	80009bc <__aeabi_dcmplt>
 8006100:	2800      	cmp	r0, #0
 8006102:	f040 8289 	bne.w	8006618 <_dtoa_r+0x978>
 8006106:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800610a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800610e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006110:	2b00      	cmp	r3, #0
 8006112:	f2c0 8151 	blt.w	80063b8 <_dtoa_r+0x718>
 8006116:	f1bb 0f0e 	cmp.w	fp, #14
 800611a:	f300 814d 	bgt.w	80063b8 <_dtoa_r+0x718>
 800611e:	4b45      	ldr	r3, [pc, #276]	; (8006234 <_dtoa_r+0x594>)
 8006120:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006124:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006128:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800612c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800612e:	2b00      	cmp	r3, #0
 8006130:	f280 80da 	bge.w	80062e8 <_dtoa_r+0x648>
 8006134:	9b08      	ldr	r3, [sp, #32]
 8006136:	2b00      	cmp	r3, #0
 8006138:	f300 80d6 	bgt.w	80062e8 <_dtoa_r+0x648>
 800613c:	f040 826b 	bne.w	8006616 <_dtoa_r+0x976>
 8006140:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006144:	2200      	movs	r2, #0
 8006146:	4b40      	ldr	r3, [pc, #256]	; (8006248 <_dtoa_r+0x5a8>)
 8006148:	f7fa f9c6 	bl	80004d8 <__aeabi_dmul>
 800614c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006150:	f7fa fc48 	bl	80009e4 <__aeabi_dcmpge>
 8006154:	9c08      	ldr	r4, [sp, #32]
 8006156:	4626      	mov	r6, r4
 8006158:	2800      	cmp	r0, #0
 800615a:	f040 8241 	bne.w	80065e0 <_dtoa_r+0x940>
 800615e:	2331      	movs	r3, #49	; 0x31
 8006160:	9f03      	ldr	r7, [sp, #12]
 8006162:	f10b 0b01 	add.w	fp, fp, #1
 8006166:	f807 3b01 	strb.w	r3, [r7], #1
 800616a:	e23d      	b.n	80065e8 <_dtoa_r+0x948>
 800616c:	07e2      	lsls	r2, r4, #31
 800616e:	d505      	bpl.n	800617c <_dtoa_r+0x4dc>
 8006170:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006174:	f7fa f9b0 	bl	80004d8 <__aeabi_dmul>
 8006178:	2301      	movs	r3, #1
 800617a:	3701      	adds	r7, #1
 800617c:	1064      	asrs	r4, r4, #1
 800617e:	3608      	adds	r6, #8
 8006180:	e76d      	b.n	800605e <_dtoa_r+0x3be>
 8006182:	2702      	movs	r7, #2
 8006184:	e770      	b.n	8006068 <_dtoa_r+0x3c8>
 8006186:	46d8      	mov	r8, fp
 8006188:	9c08      	ldr	r4, [sp, #32]
 800618a:	e78f      	b.n	80060ac <_dtoa_r+0x40c>
 800618c:	9903      	ldr	r1, [sp, #12]
 800618e:	4b29      	ldr	r3, [pc, #164]	; (8006234 <_dtoa_r+0x594>)
 8006190:	4421      	add	r1, r4
 8006192:	9112      	str	r1, [sp, #72]	; 0x48
 8006194:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006196:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800619a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800619e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80061a2:	2900      	cmp	r1, #0
 80061a4:	d054      	beq.n	8006250 <_dtoa_r+0x5b0>
 80061a6:	2000      	movs	r0, #0
 80061a8:	4928      	ldr	r1, [pc, #160]	; (800624c <_dtoa_r+0x5ac>)
 80061aa:	f7fa fabf 	bl	800072c <__aeabi_ddiv>
 80061ae:	463b      	mov	r3, r7
 80061b0:	4632      	mov	r2, r6
 80061b2:	f7f9 ffd9 	bl	8000168 <__aeabi_dsub>
 80061b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80061ba:	9f03      	ldr	r7, [sp, #12]
 80061bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061c0:	f7fa fc3a 	bl	8000a38 <__aeabi_d2iz>
 80061c4:	4604      	mov	r4, r0
 80061c6:	f7fa f91d 	bl	8000404 <__aeabi_i2d>
 80061ca:	4602      	mov	r2, r0
 80061cc:	460b      	mov	r3, r1
 80061ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061d2:	f7f9 ffc9 	bl	8000168 <__aeabi_dsub>
 80061d6:	4602      	mov	r2, r0
 80061d8:	460b      	mov	r3, r1
 80061da:	3430      	adds	r4, #48	; 0x30
 80061dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80061e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80061e4:	f807 4b01 	strb.w	r4, [r7], #1
 80061e8:	f7fa fbe8 	bl	80009bc <__aeabi_dcmplt>
 80061ec:	2800      	cmp	r0, #0
 80061ee:	d173      	bne.n	80062d8 <_dtoa_r+0x638>
 80061f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061f4:	2000      	movs	r0, #0
 80061f6:	4911      	ldr	r1, [pc, #68]	; (800623c <_dtoa_r+0x59c>)
 80061f8:	f7f9 ffb6 	bl	8000168 <__aeabi_dsub>
 80061fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006200:	f7fa fbdc 	bl	80009bc <__aeabi_dcmplt>
 8006204:	2800      	cmp	r0, #0
 8006206:	f040 80b6 	bne.w	8006376 <_dtoa_r+0x6d6>
 800620a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800620c:	429f      	cmp	r7, r3
 800620e:	f43f af7a 	beq.w	8006106 <_dtoa_r+0x466>
 8006212:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006216:	2200      	movs	r2, #0
 8006218:	4b09      	ldr	r3, [pc, #36]	; (8006240 <_dtoa_r+0x5a0>)
 800621a:	f7fa f95d 	bl	80004d8 <__aeabi_dmul>
 800621e:	2200      	movs	r2, #0
 8006220:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006224:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006228:	4b05      	ldr	r3, [pc, #20]	; (8006240 <_dtoa_r+0x5a0>)
 800622a:	f7fa f955 	bl	80004d8 <__aeabi_dmul>
 800622e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006232:	e7c3      	b.n	80061bc <_dtoa_r+0x51c>
 8006234:	08009480 	.word	0x08009480
 8006238:	08009458 	.word	0x08009458
 800623c:	3ff00000 	.word	0x3ff00000
 8006240:	40240000 	.word	0x40240000
 8006244:	401c0000 	.word	0x401c0000
 8006248:	40140000 	.word	0x40140000
 800624c:	3fe00000 	.word	0x3fe00000
 8006250:	4630      	mov	r0, r6
 8006252:	4639      	mov	r1, r7
 8006254:	f7fa f940 	bl	80004d8 <__aeabi_dmul>
 8006258:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800625a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800625e:	9c03      	ldr	r4, [sp, #12]
 8006260:	9314      	str	r3, [sp, #80]	; 0x50
 8006262:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006266:	f7fa fbe7 	bl	8000a38 <__aeabi_d2iz>
 800626a:	9015      	str	r0, [sp, #84]	; 0x54
 800626c:	f7fa f8ca 	bl	8000404 <__aeabi_i2d>
 8006270:	4602      	mov	r2, r0
 8006272:	460b      	mov	r3, r1
 8006274:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006278:	f7f9 ff76 	bl	8000168 <__aeabi_dsub>
 800627c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800627e:	4606      	mov	r6, r0
 8006280:	3330      	adds	r3, #48	; 0x30
 8006282:	f804 3b01 	strb.w	r3, [r4], #1
 8006286:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006288:	460f      	mov	r7, r1
 800628a:	429c      	cmp	r4, r3
 800628c:	f04f 0200 	mov.w	r2, #0
 8006290:	d124      	bne.n	80062dc <_dtoa_r+0x63c>
 8006292:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006296:	4baf      	ldr	r3, [pc, #700]	; (8006554 <_dtoa_r+0x8b4>)
 8006298:	f7f9 ff68 	bl	800016c <__adddf3>
 800629c:	4602      	mov	r2, r0
 800629e:	460b      	mov	r3, r1
 80062a0:	4630      	mov	r0, r6
 80062a2:	4639      	mov	r1, r7
 80062a4:	f7fa fba8 	bl	80009f8 <__aeabi_dcmpgt>
 80062a8:	2800      	cmp	r0, #0
 80062aa:	d163      	bne.n	8006374 <_dtoa_r+0x6d4>
 80062ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80062b0:	2000      	movs	r0, #0
 80062b2:	49a8      	ldr	r1, [pc, #672]	; (8006554 <_dtoa_r+0x8b4>)
 80062b4:	f7f9 ff58 	bl	8000168 <__aeabi_dsub>
 80062b8:	4602      	mov	r2, r0
 80062ba:	460b      	mov	r3, r1
 80062bc:	4630      	mov	r0, r6
 80062be:	4639      	mov	r1, r7
 80062c0:	f7fa fb7c 	bl	80009bc <__aeabi_dcmplt>
 80062c4:	2800      	cmp	r0, #0
 80062c6:	f43f af1e 	beq.w	8006106 <_dtoa_r+0x466>
 80062ca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80062cc:	1e7b      	subs	r3, r7, #1
 80062ce:	9314      	str	r3, [sp, #80]	; 0x50
 80062d0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80062d4:	2b30      	cmp	r3, #48	; 0x30
 80062d6:	d0f8      	beq.n	80062ca <_dtoa_r+0x62a>
 80062d8:	46c3      	mov	fp, r8
 80062da:	e03b      	b.n	8006354 <_dtoa_r+0x6b4>
 80062dc:	4b9e      	ldr	r3, [pc, #632]	; (8006558 <_dtoa_r+0x8b8>)
 80062de:	f7fa f8fb 	bl	80004d8 <__aeabi_dmul>
 80062e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062e6:	e7bc      	b.n	8006262 <_dtoa_r+0x5c2>
 80062e8:	9f03      	ldr	r7, [sp, #12]
 80062ea:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80062ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80062f2:	4640      	mov	r0, r8
 80062f4:	4649      	mov	r1, r9
 80062f6:	f7fa fa19 	bl	800072c <__aeabi_ddiv>
 80062fa:	f7fa fb9d 	bl	8000a38 <__aeabi_d2iz>
 80062fe:	4604      	mov	r4, r0
 8006300:	f7fa f880 	bl	8000404 <__aeabi_i2d>
 8006304:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006308:	f7fa f8e6 	bl	80004d8 <__aeabi_dmul>
 800630c:	4602      	mov	r2, r0
 800630e:	460b      	mov	r3, r1
 8006310:	4640      	mov	r0, r8
 8006312:	4649      	mov	r1, r9
 8006314:	f7f9 ff28 	bl	8000168 <__aeabi_dsub>
 8006318:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800631c:	f807 6b01 	strb.w	r6, [r7], #1
 8006320:	9e03      	ldr	r6, [sp, #12]
 8006322:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006326:	1bbe      	subs	r6, r7, r6
 8006328:	45b4      	cmp	ip, r6
 800632a:	4602      	mov	r2, r0
 800632c:	460b      	mov	r3, r1
 800632e:	d136      	bne.n	800639e <_dtoa_r+0x6fe>
 8006330:	f7f9 ff1c 	bl	800016c <__adddf3>
 8006334:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006338:	4680      	mov	r8, r0
 800633a:	4689      	mov	r9, r1
 800633c:	f7fa fb5c 	bl	80009f8 <__aeabi_dcmpgt>
 8006340:	bb58      	cbnz	r0, 800639a <_dtoa_r+0x6fa>
 8006342:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006346:	4640      	mov	r0, r8
 8006348:	4649      	mov	r1, r9
 800634a:	f7fa fb2d 	bl	80009a8 <__aeabi_dcmpeq>
 800634e:	b108      	cbz	r0, 8006354 <_dtoa_r+0x6b4>
 8006350:	07e3      	lsls	r3, r4, #31
 8006352:	d422      	bmi.n	800639a <_dtoa_r+0x6fa>
 8006354:	4651      	mov	r1, sl
 8006356:	4628      	mov	r0, r5
 8006358:	f000 fbc2 	bl	8006ae0 <_Bfree>
 800635c:	2300      	movs	r3, #0
 800635e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006360:	703b      	strb	r3, [r7, #0]
 8006362:	f10b 0301 	add.w	r3, fp, #1
 8006366:	6013      	str	r3, [r2, #0]
 8006368:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800636a:	2b00      	cmp	r3, #0
 800636c:	f43f ace6 	beq.w	8005d3c <_dtoa_r+0x9c>
 8006370:	601f      	str	r7, [r3, #0]
 8006372:	e4e3      	b.n	8005d3c <_dtoa_r+0x9c>
 8006374:	4627      	mov	r7, r4
 8006376:	463b      	mov	r3, r7
 8006378:	461f      	mov	r7, r3
 800637a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800637e:	2a39      	cmp	r2, #57	; 0x39
 8006380:	d107      	bne.n	8006392 <_dtoa_r+0x6f2>
 8006382:	9a03      	ldr	r2, [sp, #12]
 8006384:	429a      	cmp	r2, r3
 8006386:	d1f7      	bne.n	8006378 <_dtoa_r+0x6d8>
 8006388:	2230      	movs	r2, #48	; 0x30
 800638a:	9903      	ldr	r1, [sp, #12]
 800638c:	f108 0801 	add.w	r8, r8, #1
 8006390:	700a      	strb	r2, [r1, #0]
 8006392:	781a      	ldrb	r2, [r3, #0]
 8006394:	3201      	adds	r2, #1
 8006396:	701a      	strb	r2, [r3, #0]
 8006398:	e79e      	b.n	80062d8 <_dtoa_r+0x638>
 800639a:	46d8      	mov	r8, fp
 800639c:	e7eb      	b.n	8006376 <_dtoa_r+0x6d6>
 800639e:	2200      	movs	r2, #0
 80063a0:	4b6d      	ldr	r3, [pc, #436]	; (8006558 <_dtoa_r+0x8b8>)
 80063a2:	f7fa f899 	bl	80004d8 <__aeabi_dmul>
 80063a6:	2200      	movs	r2, #0
 80063a8:	2300      	movs	r3, #0
 80063aa:	4680      	mov	r8, r0
 80063ac:	4689      	mov	r9, r1
 80063ae:	f7fa fafb 	bl	80009a8 <__aeabi_dcmpeq>
 80063b2:	2800      	cmp	r0, #0
 80063b4:	d09b      	beq.n	80062ee <_dtoa_r+0x64e>
 80063b6:	e7cd      	b.n	8006354 <_dtoa_r+0x6b4>
 80063b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80063ba:	2a00      	cmp	r2, #0
 80063bc:	f000 80c4 	beq.w	8006548 <_dtoa_r+0x8a8>
 80063c0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80063c2:	2a01      	cmp	r2, #1
 80063c4:	f300 80a8 	bgt.w	8006518 <_dtoa_r+0x878>
 80063c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80063ca:	2a00      	cmp	r2, #0
 80063cc:	f000 80a0 	beq.w	8006510 <_dtoa_r+0x870>
 80063d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80063d4:	464f      	mov	r7, r9
 80063d6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80063d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063da:	2101      	movs	r1, #1
 80063dc:	441a      	add	r2, r3
 80063de:	4628      	mov	r0, r5
 80063e0:	4499      	add	r9, r3
 80063e2:	9209      	str	r2, [sp, #36]	; 0x24
 80063e4:	f000 fc7c 	bl	8006ce0 <__i2b>
 80063e8:	4606      	mov	r6, r0
 80063ea:	b15f      	cbz	r7, 8006404 <_dtoa_r+0x764>
 80063ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	dd08      	ble.n	8006404 <_dtoa_r+0x764>
 80063f2:	42bb      	cmp	r3, r7
 80063f4:	bfa8      	it	ge
 80063f6:	463b      	movge	r3, r7
 80063f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063fa:	eba9 0903 	sub.w	r9, r9, r3
 80063fe:	1aff      	subs	r7, r7, r3
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	9309      	str	r3, [sp, #36]	; 0x24
 8006404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006406:	b1f3      	cbz	r3, 8006446 <_dtoa_r+0x7a6>
 8006408:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800640a:	2b00      	cmp	r3, #0
 800640c:	f000 80a0 	beq.w	8006550 <_dtoa_r+0x8b0>
 8006410:	2c00      	cmp	r4, #0
 8006412:	dd10      	ble.n	8006436 <_dtoa_r+0x796>
 8006414:	4631      	mov	r1, r6
 8006416:	4622      	mov	r2, r4
 8006418:	4628      	mov	r0, r5
 800641a:	f000 fd1f 	bl	8006e5c <__pow5mult>
 800641e:	4652      	mov	r2, sl
 8006420:	4601      	mov	r1, r0
 8006422:	4606      	mov	r6, r0
 8006424:	4628      	mov	r0, r5
 8006426:	f000 fc71 	bl	8006d0c <__multiply>
 800642a:	4680      	mov	r8, r0
 800642c:	4651      	mov	r1, sl
 800642e:	4628      	mov	r0, r5
 8006430:	f000 fb56 	bl	8006ae0 <_Bfree>
 8006434:	46c2      	mov	sl, r8
 8006436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006438:	1b1a      	subs	r2, r3, r4
 800643a:	d004      	beq.n	8006446 <_dtoa_r+0x7a6>
 800643c:	4651      	mov	r1, sl
 800643e:	4628      	mov	r0, r5
 8006440:	f000 fd0c 	bl	8006e5c <__pow5mult>
 8006444:	4682      	mov	sl, r0
 8006446:	2101      	movs	r1, #1
 8006448:	4628      	mov	r0, r5
 800644a:	f000 fc49 	bl	8006ce0 <__i2b>
 800644e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006450:	4604      	mov	r4, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	f340 8082 	ble.w	800655c <_dtoa_r+0x8bc>
 8006458:	461a      	mov	r2, r3
 800645a:	4601      	mov	r1, r0
 800645c:	4628      	mov	r0, r5
 800645e:	f000 fcfd 	bl	8006e5c <__pow5mult>
 8006462:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006464:	4604      	mov	r4, r0
 8006466:	2b01      	cmp	r3, #1
 8006468:	dd7b      	ble.n	8006562 <_dtoa_r+0x8c2>
 800646a:	f04f 0800 	mov.w	r8, #0
 800646e:	6923      	ldr	r3, [r4, #16]
 8006470:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006474:	6918      	ldr	r0, [r3, #16]
 8006476:	f000 fbe5 	bl	8006c44 <__hi0bits>
 800647a:	f1c0 0020 	rsb	r0, r0, #32
 800647e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006480:	4418      	add	r0, r3
 8006482:	f010 001f 	ands.w	r0, r0, #31
 8006486:	f000 8092 	beq.w	80065ae <_dtoa_r+0x90e>
 800648a:	f1c0 0320 	rsb	r3, r0, #32
 800648e:	2b04      	cmp	r3, #4
 8006490:	f340 8085 	ble.w	800659e <_dtoa_r+0x8fe>
 8006494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006496:	f1c0 001c 	rsb	r0, r0, #28
 800649a:	4403      	add	r3, r0
 800649c:	4481      	add	r9, r0
 800649e:	4407      	add	r7, r0
 80064a0:	9309      	str	r3, [sp, #36]	; 0x24
 80064a2:	f1b9 0f00 	cmp.w	r9, #0
 80064a6:	dd05      	ble.n	80064b4 <_dtoa_r+0x814>
 80064a8:	4651      	mov	r1, sl
 80064aa:	464a      	mov	r2, r9
 80064ac:	4628      	mov	r0, r5
 80064ae:	f000 fd2f 	bl	8006f10 <__lshift>
 80064b2:	4682      	mov	sl, r0
 80064b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	dd05      	ble.n	80064c6 <_dtoa_r+0x826>
 80064ba:	4621      	mov	r1, r4
 80064bc:	461a      	mov	r2, r3
 80064be:	4628      	mov	r0, r5
 80064c0:	f000 fd26 	bl	8006f10 <__lshift>
 80064c4:	4604      	mov	r4, r0
 80064c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d072      	beq.n	80065b2 <_dtoa_r+0x912>
 80064cc:	4621      	mov	r1, r4
 80064ce:	4650      	mov	r0, sl
 80064d0:	f000 fd8a 	bl	8006fe8 <__mcmp>
 80064d4:	2800      	cmp	r0, #0
 80064d6:	da6c      	bge.n	80065b2 <_dtoa_r+0x912>
 80064d8:	2300      	movs	r3, #0
 80064da:	4651      	mov	r1, sl
 80064dc:	220a      	movs	r2, #10
 80064de:	4628      	mov	r0, r5
 80064e0:	f000 fb20 	bl	8006b24 <__multadd>
 80064e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064e6:	4682      	mov	sl, r0
 80064e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f000 81ac 	beq.w	800684a <_dtoa_r+0xbaa>
 80064f2:	2300      	movs	r3, #0
 80064f4:	4631      	mov	r1, r6
 80064f6:	220a      	movs	r2, #10
 80064f8:	4628      	mov	r0, r5
 80064fa:	f000 fb13 	bl	8006b24 <__multadd>
 80064fe:	9b06      	ldr	r3, [sp, #24]
 8006500:	4606      	mov	r6, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	f300 8093 	bgt.w	800662e <_dtoa_r+0x98e>
 8006508:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800650a:	2b02      	cmp	r3, #2
 800650c:	dc59      	bgt.n	80065c2 <_dtoa_r+0x922>
 800650e:	e08e      	b.n	800662e <_dtoa_r+0x98e>
 8006510:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006512:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006516:	e75d      	b.n	80063d4 <_dtoa_r+0x734>
 8006518:	9b08      	ldr	r3, [sp, #32]
 800651a:	1e5c      	subs	r4, r3, #1
 800651c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800651e:	42a3      	cmp	r3, r4
 8006520:	bfbf      	itttt	lt
 8006522:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006524:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8006526:	1ae3      	sublt	r3, r4, r3
 8006528:	18d2      	addlt	r2, r2, r3
 800652a:	bfa8      	it	ge
 800652c:	1b1c      	subge	r4, r3, r4
 800652e:	9b08      	ldr	r3, [sp, #32]
 8006530:	bfbe      	ittt	lt
 8006532:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006534:	920e      	strlt	r2, [sp, #56]	; 0x38
 8006536:	2400      	movlt	r4, #0
 8006538:	2b00      	cmp	r3, #0
 800653a:	bfb5      	itete	lt
 800653c:	eba9 0703 	sublt.w	r7, r9, r3
 8006540:	464f      	movge	r7, r9
 8006542:	2300      	movlt	r3, #0
 8006544:	9b08      	ldrge	r3, [sp, #32]
 8006546:	e747      	b.n	80063d8 <_dtoa_r+0x738>
 8006548:	464f      	mov	r7, r9
 800654a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800654c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800654e:	e74c      	b.n	80063ea <_dtoa_r+0x74a>
 8006550:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006552:	e773      	b.n	800643c <_dtoa_r+0x79c>
 8006554:	3fe00000 	.word	0x3fe00000
 8006558:	40240000 	.word	0x40240000
 800655c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800655e:	2b01      	cmp	r3, #1
 8006560:	dc18      	bgt.n	8006594 <_dtoa_r+0x8f4>
 8006562:	9b04      	ldr	r3, [sp, #16]
 8006564:	b9b3      	cbnz	r3, 8006594 <_dtoa_r+0x8f4>
 8006566:	9b05      	ldr	r3, [sp, #20]
 8006568:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800656c:	b993      	cbnz	r3, 8006594 <_dtoa_r+0x8f4>
 800656e:	9b05      	ldr	r3, [sp, #20]
 8006570:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006574:	0d1b      	lsrs	r3, r3, #20
 8006576:	051b      	lsls	r3, r3, #20
 8006578:	b17b      	cbz	r3, 800659a <_dtoa_r+0x8fa>
 800657a:	f04f 0801 	mov.w	r8, #1
 800657e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006580:	f109 0901 	add.w	r9, r9, #1
 8006584:	3301      	adds	r3, #1
 8006586:	9309      	str	r3, [sp, #36]	; 0x24
 8006588:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800658a:	2b00      	cmp	r3, #0
 800658c:	f47f af6f 	bne.w	800646e <_dtoa_r+0x7ce>
 8006590:	2001      	movs	r0, #1
 8006592:	e774      	b.n	800647e <_dtoa_r+0x7de>
 8006594:	f04f 0800 	mov.w	r8, #0
 8006598:	e7f6      	b.n	8006588 <_dtoa_r+0x8e8>
 800659a:	4698      	mov	r8, r3
 800659c:	e7f4      	b.n	8006588 <_dtoa_r+0x8e8>
 800659e:	d080      	beq.n	80064a2 <_dtoa_r+0x802>
 80065a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065a2:	331c      	adds	r3, #28
 80065a4:	441a      	add	r2, r3
 80065a6:	4499      	add	r9, r3
 80065a8:	441f      	add	r7, r3
 80065aa:	9209      	str	r2, [sp, #36]	; 0x24
 80065ac:	e779      	b.n	80064a2 <_dtoa_r+0x802>
 80065ae:	4603      	mov	r3, r0
 80065b0:	e7f6      	b.n	80065a0 <_dtoa_r+0x900>
 80065b2:	9b08      	ldr	r3, [sp, #32]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	dc34      	bgt.n	8006622 <_dtoa_r+0x982>
 80065b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	dd31      	ble.n	8006622 <_dtoa_r+0x982>
 80065be:	9b08      	ldr	r3, [sp, #32]
 80065c0:	9306      	str	r3, [sp, #24]
 80065c2:	9b06      	ldr	r3, [sp, #24]
 80065c4:	b963      	cbnz	r3, 80065e0 <_dtoa_r+0x940>
 80065c6:	4621      	mov	r1, r4
 80065c8:	2205      	movs	r2, #5
 80065ca:	4628      	mov	r0, r5
 80065cc:	f000 faaa 	bl	8006b24 <__multadd>
 80065d0:	4601      	mov	r1, r0
 80065d2:	4604      	mov	r4, r0
 80065d4:	4650      	mov	r0, sl
 80065d6:	f000 fd07 	bl	8006fe8 <__mcmp>
 80065da:	2800      	cmp	r0, #0
 80065dc:	f73f adbf 	bgt.w	800615e <_dtoa_r+0x4be>
 80065e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80065e2:	9f03      	ldr	r7, [sp, #12]
 80065e4:	ea6f 0b03 	mvn.w	fp, r3
 80065e8:	f04f 0800 	mov.w	r8, #0
 80065ec:	4621      	mov	r1, r4
 80065ee:	4628      	mov	r0, r5
 80065f0:	f000 fa76 	bl	8006ae0 <_Bfree>
 80065f4:	2e00      	cmp	r6, #0
 80065f6:	f43f aead 	beq.w	8006354 <_dtoa_r+0x6b4>
 80065fa:	f1b8 0f00 	cmp.w	r8, #0
 80065fe:	d005      	beq.n	800660c <_dtoa_r+0x96c>
 8006600:	45b0      	cmp	r8, r6
 8006602:	d003      	beq.n	800660c <_dtoa_r+0x96c>
 8006604:	4641      	mov	r1, r8
 8006606:	4628      	mov	r0, r5
 8006608:	f000 fa6a 	bl	8006ae0 <_Bfree>
 800660c:	4631      	mov	r1, r6
 800660e:	4628      	mov	r0, r5
 8006610:	f000 fa66 	bl	8006ae0 <_Bfree>
 8006614:	e69e      	b.n	8006354 <_dtoa_r+0x6b4>
 8006616:	2400      	movs	r4, #0
 8006618:	4626      	mov	r6, r4
 800661a:	e7e1      	b.n	80065e0 <_dtoa_r+0x940>
 800661c:	46c3      	mov	fp, r8
 800661e:	4626      	mov	r6, r4
 8006620:	e59d      	b.n	800615e <_dtoa_r+0x4be>
 8006622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006624:	2b00      	cmp	r3, #0
 8006626:	f000 80c8 	beq.w	80067ba <_dtoa_r+0xb1a>
 800662a:	9b08      	ldr	r3, [sp, #32]
 800662c:	9306      	str	r3, [sp, #24]
 800662e:	2f00      	cmp	r7, #0
 8006630:	dd05      	ble.n	800663e <_dtoa_r+0x99e>
 8006632:	4631      	mov	r1, r6
 8006634:	463a      	mov	r2, r7
 8006636:	4628      	mov	r0, r5
 8006638:	f000 fc6a 	bl	8006f10 <__lshift>
 800663c:	4606      	mov	r6, r0
 800663e:	f1b8 0f00 	cmp.w	r8, #0
 8006642:	d05b      	beq.n	80066fc <_dtoa_r+0xa5c>
 8006644:	4628      	mov	r0, r5
 8006646:	6871      	ldr	r1, [r6, #4]
 8006648:	f000 fa0a 	bl	8006a60 <_Balloc>
 800664c:	4607      	mov	r7, r0
 800664e:	b928      	cbnz	r0, 800665c <_dtoa_r+0x9bc>
 8006650:	4602      	mov	r2, r0
 8006652:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006656:	4b81      	ldr	r3, [pc, #516]	; (800685c <_dtoa_r+0xbbc>)
 8006658:	f7ff bb36 	b.w	8005cc8 <_dtoa_r+0x28>
 800665c:	6932      	ldr	r2, [r6, #16]
 800665e:	f106 010c 	add.w	r1, r6, #12
 8006662:	3202      	adds	r2, #2
 8006664:	0092      	lsls	r2, r2, #2
 8006666:	300c      	adds	r0, #12
 8006668:	f001 ff72 	bl	8008550 <memcpy>
 800666c:	2201      	movs	r2, #1
 800666e:	4639      	mov	r1, r7
 8006670:	4628      	mov	r0, r5
 8006672:	f000 fc4d 	bl	8006f10 <__lshift>
 8006676:	46b0      	mov	r8, r6
 8006678:	4606      	mov	r6, r0
 800667a:	9b03      	ldr	r3, [sp, #12]
 800667c:	9a03      	ldr	r2, [sp, #12]
 800667e:	3301      	adds	r3, #1
 8006680:	9308      	str	r3, [sp, #32]
 8006682:	9b06      	ldr	r3, [sp, #24]
 8006684:	4413      	add	r3, r2
 8006686:	930b      	str	r3, [sp, #44]	; 0x2c
 8006688:	9b04      	ldr	r3, [sp, #16]
 800668a:	f003 0301 	and.w	r3, r3, #1
 800668e:	930a      	str	r3, [sp, #40]	; 0x28
 8006690:	9b08      	ldr	r3, [sp, #32]
 8006692:	4621      	mov	r1, r4
 8006694:	3b01      	subs	r3, #1
 8006696:	4650      	mov	r0, sl
 8006698:	9304      	str	r3, [sp, #16]
 800669a:	f7ff fa77 	bl	8005b8c <quorem>
 800669e:	4641      	mov	r1, r8
 80066a0:	9006      	str	r0, [sp, #24]
 80066a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80066a6:	4650      	mov	r0, sl
 80066a8:	f000 fc9e 	bl	8006fe8 <__mcmp>
 80066ac:	4632      	mov	r2, r6
 80066ae:	9009      	str	r0, [sp, #36]	; 0x24
 80066b0:	4621      	mov	r1, r4
 80066b2:	4628      	mov	r0, r5
 80066b4:	f000 fcb4 	bl	8007020 <__mdiff>
 80066b8:	68c2      	ldr	r2, [r0, #12]
 80066ba:	4607      	mov	r7, r0
 80066bc:	bb02      	cbnz	r2, 8006700 <_dtoa_r+0xa60>
 80066be:	4601      	mov	r1, r0
 80066c0:	4650      	mov	r0, sl
 80066c2:	f000 fc91 	bl	8006fe8 <__mcmp>
 80066c6:	4602      	mov	r2, r0
 80066c8:	4639      	mov	r1, r7
 80066ca:	4628      	mov	r0, r5
 80066cc:	920c      	str	r2, [sp, #48]	; 0x30
 80066ce:	f000 fa07 	bl	8006ae0 <_Bfree>
 80066d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80066d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066d6:	9f08      	ldr	r7, [sp, #32]
 80066d8:	ea43 0102 	orr.w	r1, r3, r2
 80066dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066de:	4319      	orrs	r1, r3
 80066e0:	d110      	bne.n	8006704 <_dtoa_r+0xa64>
 80066e2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80066e6:	d029      	beq.n	800673c <_dtoa_r+0xa9c>
 80066e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	dd02      	ble.n	80066f4 <_dtoa_r+0xa54>
 80066ee:	9b06      	ldr	r3, [sp, #24]
 80066f0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80066f4:	9b04      	ldr	r3, [sp, #16]
 80066f6:	f883 9000 	strb.w	r9, [r3]
 80066fa:	e777      	b.n	80065ec <_dtoa_r+0x94c>
 80066fc:	4630      	mov	r0, r6
 80066fe:	e7ba      	b.n	8006676 <_dtoa_r+0x9d6>
 8006700:	2201      	movs	r2, #1
 8006702:	e7e1      	b.n	80066c8 <_dtoa_r+0xa28>
 8006704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006706:	2b00      	cmp	r3, #0
 8006708:	db04      	blt.n	8006714 <_dtoa_r+0xa74>
 800670a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800670c:	430b      	orrs	r3, r1
 800670e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006710:	430b      	orrs	r3, r1
 8006712:	d120      	bne.n	8006756 <_dtoa_r+0xab6>
 8006714:	2a00      	cmp	r2, #0
 8006716:	dded      	ble.n	80066f4 <_dtoa_r+0xa54>
 8006718:	4651      	mov	r1, sl
 800671a:	2201      	movs	r2, #1
 800671c:	4628      	mov	r0, r5
 800671e:	f000 fbf7 	bl	8006f10 <__lshift>
 8006722:	4621      	mov	r1, r4
 8006724:	4682      	mov	sl, r0
 8006726:	f000 fc5f 	bl	8006fe8 <__mcmp>
 800672a:	2800      	cmp	r0, #0
 800672c:	dc03      	bgt.n	8006736 <_dtoa_r+0xa96>
 800672e:	d1e1      	bne.n	80066f4 <_dtoa_r+0xa54>
 8006730:	f019 0f01 	tst.w	r9, #1
 8006734:	d0de      	beq.n	80066f4 <_dtoa_r+0xa54>
 8006736:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800673a:	d1d8      	bne.n	80066ee <_dtoa_r+0xa4e>
 800673c:	2339      	movs	r3, #57	; 0x39
 800673e:	9a04      	ldr	r2, [sp, #16]
 8006740:	7013      	strb	r3, [r2, #0]
 8006742:	463b      	mov	r3, r7
 8006744:	461f      	mov	r7, r3
 8006746:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800674a:	3b01      	subs	r3, #1
 800674c:	2a39      	cmp	r2, #57	; 0x39
 800674e:	d06b      	beq.n	8006828 <_dtoa_r+0xb88>
 8006750:	3201      	adds	r2, #1
 8006752:	701a      	strb	r2, [r3, #0]
 8006754:	e74a      	b.n	80065ec <_dtoa_r+0x94c>
 8006756:	2a00      	cmp	r2, #0
 8006758:	dd07      	ble.n	800676a <_dtoa_r+0xaca>
 800675a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800675e:	d0ed      	beq.n	800673c <_dtoa_r+0xa9c>
 8006760:	9a04      	ldr	r2, [sp, #16]
 8006762:	f109 0301 	add.w	r3, r9, #1
 8006766:	7013      	strb	r3, [r2, #0]
 8006768:	e740      	b.n	80065ec <_dtoa_r+0x94c>
 800676a:	9b08      	ldr	r3, [sp, #32]
 800676c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800676e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006772:	4293      	cmp	r3, r2
 8006774:	d042      	beq.n	80067fc <_dtoa_r+0xb5c>
 8006776:	4651      	mov	r1, sl
 8006778:	2300      	movs	r3, #0
 800677a:	220a      	movs	r2, #10
 800677c:	4628      	mov	r0, r5
 800677e:	f000 f9d1 	bl	8006b24 <__multadd>
 8006782:	45b0      	cmp	r8, r6
 8006784:	4682      	mov	sl, r0
 8006786:	f04f 0300 	mov.w	r3, #0
 800678a:	f04f 020a 	mov.w	r2, #10
 800678e:	4641      	mov	r1, r8
 8006790:	4628      	mov	r0, r5
 8006792:	d107      	bne.n	80067a4 <_dtoa_r+0xb04>
 8006794:	f000 f9c6 	bl	8006b24 <__multadd>
 8006798:	4680      	mov	r8, r0
 800679a:	4606      	mov	r6, r0
 800679c:	9b08      	ldr	r3, [sp, #32]
 800679e:	3301      	adds	r3, #1
 80067a0:	9308      	str	r3, [sp, #32]
 80067a2:	e775      	b.n	8006690 <_dtoa_r+0x9f0>
 80067a4:	f000 f9be 	bl	8006b24 <__multadd>
 80067a8:	4631      	mov	r1, r6
 80067aa:	4680      	mov	r8, r0
 80067ac:	2300      	movs	r3, #0
 80067ae:	220a      	movs	r2, #10
 80067b0:	4628      	mov	r0, r5
 80067b2:	f000 f9b7 	bl	8006b24 <__multadd>
 80067b6:	4606      	mov	r6, r0
 80067b8:	e7f0      	b.n	800679c <_dtoa_r+0xafc>
 80067ba:	9b08      	ldr	r3, [sp, #32]
 80067bc:	9306      	str	r3, [sp, #24]
 80067be:	9f03      	ldr	r7, [sp, #12]
 80067c0:	4621      	mov	r1, r4
 80067c2:	4650      	mov	r0, sl
 80067c4:	f7ff f9e2 	bl	8005b8c <quorem>
 80067c8:	9b03      	ldr	r3, [sp, #12]
 80067ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80067ce:	f807 9b01 	strb.w	r9, [r7], #1
 80067d2:	1afa      	subs	r2, r7, r3
 80067d4:	9b06      	ldr	r3, [sp, #24]
 80067d6:	4293      	cmp	r3, r2
 80067d8:	dd07      	ble.n	80067ea <_dtoa_r+0xb4a>
 80067da:	4651      	mov	r1, sl
 80067dc:	2300      	movs	r3, #0
 80067de:	220a      	movs	r2, #10
 80067e0:	4628      	mov	r0, r5
 80067e2:	f000 f99f 	bl	8006b24 <__multadd>
 80067e6:	4682      	mov	sl, r0
 80067e8:	e7ea      	b.n	80067c0 <_dtoa_r+0xb20>
 80067ea:	9b06      	ldr	r3, [sp, #24]
 80067ec:	f04f 0800 	mov.w	r8, #0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	bfcc      	ite	gt
 80067f4:	461f      	movgt	r7, r3
 80067f6:	2701      	movle	r7, #1
 80067f8:	9b03      	ldr	r3, [sp, #12]
 80067fa:	441f      	add	r7, r3
 80067fc:	4651      	mov	r1, sl
 80067fe:	2201      	movs	r2, #1
 8006800:	4628      	mov	r0, r5
 8006802:	f000 fb85 	bl	8006f10 <__lshift>
 8006806:	4621      	mov	r1, r4
 8006808:	4682      	mov	sl, r0
 800680a:	f000 fbed 	bl	8006fe8 <__mcmp>
 800680e:	2800      	cmp	r0, #0
 8006810:	dc97      	bgt.n	8006742 <_dtoa_r+0xaa2>
 8006812:	d102      	bne.n	800681a <_dtoa_r+0xb7a>
 8006814:	f019 0f01 	tst.w	r9, #1
 8006818:	d193      	bne.n	8006742 <_dtoa_r+0xaa2>
 800681a:	463b      	mov	r3, r7
 800681c:	461f      	mov	r7, r3
 800681e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006822:	2a30      	cmp	r2, #48	; 0x30
 8006824:	d0fa      	beq.n	800681c <_dtoa_r+0xb7c>
 8006826:	e6e1      	b.n	80065ec <_dtoa_r+0x94c>
 8006828:	9a03      	ldr	r2, [sp, #12]
 800682a:	429a      	cmp	r2, r3
 800682c:	d18a      	bne.n	8006744 <_dtoa_r+0xaa4>
 800682e:	2331      	movs	r3, #49	; 0x31
 8006830:	f10b 0b01 	add.w	fp, fp, #1
 8006834:	e797      	b.n	8006766 <_dtoa_r+0xac6>
 8006836:	4b0a      	ldr	r3, [pc, #40]	; (8006860 <_dtoa_r+0xbc0>)
 8006838:	f7ff ba9f 	b.w	8005d7a <_dtoa_r+0xda>
 800683c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800683e:	2b00      	cmp	r3, #0
 8006840:	f47f aa77 	bne.w	8005d32 <_dtoa_r+0x92>
 8006844:	4b07      	ldr	r3, [pc, #28]	; (8006864 <_dtoa_r+0xbc4>)
 8006846:	f7ff ba98 	b.w	8005d7a <_dtoa_r+0xda>
 800684a:	9b06      	ldr	r3, [sp, #24]
 800684c:	2b00      	cmp	r3, #0
 800684e:	dcb6      	bgt.n	80067be <_dtoa_r+0xb1e>
 8006850:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006852:	2b02      	cmp	r3, #2
 8006854:	f73f aeb5 	bgt.w	80065c2 <_dtoa_r+0x922>
 8006858:	e7b1      	b.n	80067be <_dtoa_r+0xb1e>
 800685a:	bf00      	nop
 800685c:	080093e7 	.word	0x080093e7
 8006860:	08009342 	.word	0x08009342
 8006864:	0800936b 	.word	0x0800936b

08006868 <_free_r>:
 8006868:	b538      	push	{r3, r4, r5, lr}
 800686a:	4605      	mov	r5, r0
 800686c:	2900      	cmp	r1, #0
 800686e:	d040      	beq.n	80068f2 <_free_r+0x8a>
 8006870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006874:	1f0c      	subs	r4, r1, #4
 8006876:	2b00      	cmp	r3, #0
 8006878:	bfb8      	it	lt
 800687a:	18e4      	addlt	r4, r4, r3
 800687c:	f000 f8e4 	bl	8006a48 <__malloc_lock>
 8006880:	4a1c      	ldr	r2, [pc, #112]	; (80068f4 <_free_r+0x8c>)
 8006882:	6813      	ldr	r3, [r2, #0]
 8006884:	b933      	cbnz	r3, 8006894 <_free_r+0x2c>
 8006886:	6063      	str	r3, [r4, #4]
 8006888:	6014      	str	r4, [r2, #0]
 800688a:	4628      	mov	r0, r5
 800688c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006890:	f000 b8e0 	b.w	8006a54 <__malloc_unlock>
 8006894:	42a3      	cmp	r3, r4
 8006896:	d908      	bls.n	80068aa <_free_r+0x42>
 8006898:	6820      	ldr	r0, [r4, #0]
 800689a:	1821      	adds	r1, r4, r0
 800689c:	428b      	cmp	r3, r1
 800689e:	bf01      	itttt	eq
 80068a0:	6819      	ldreq	r1, [r3, #0]
 80068a2:	685b      	ldreq	r3, [r3, #4]
 80068a4:	1809      	addeq	r1, r1, r0
 80068a6:	6021      	streq	r1, [r4, #0]
 80068a8:	e7ed      	b.n	8006886 <_free_r+0x1e>
 80068aa:	461a      	mov	r2, r3
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	b10b      	cbz	r3, 80068b4 <_free_r+0x4c>
 80068b0:	42a3      	cmp	r3, r4
 80068b2:	d9fa      	bls.n	80068aa <_free_r+0x42>
 80068b4:	6811      	ldr	r1, [r2, #0]
 80068b6:	1850      	adds	r0, r2, r1
 80068b8:	42a0      	cmp	r0, r4
 80068ba:	d10b      	bne.n	80068d4 <_free_r+0x6c>
 80068bc:	6820      	ldr	r0, [r4, #0]
 80068be:	4401      	add	r1, r0
 80068c0:	1850      	adds	r0, r2, r1
 80068c2:	4283      	cmp	r3, r0
 80068c4:	6011      	str	r1, [r2, #0]
 80068c6:	d1e0      	bne.n	800688a <_free_r+0x22>
 80068c8:	6818      	ldr	r0, [r3, #0]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	4408      	add	r0, r1
 80068ce:	6010      	str	r0, [r2, #0]
 80068d0:	6053      	str	r3, [r2, #4]
 80068d2:	e7da      	b.n	800688a <_free_r+0x22>
 80068d4:	d902      	bls.n	80068dc <_free_r+0x74>
 80068d6:	230c      	movs	r3, #12
 80068d8:	602b      	str	r3, [r5, #0]
 80068da:	e7d6      	b.n	800688a <_free_r+0x22>
 80068dc:	6820      	ldr	r0, [r4, #0]
 80068de:	1821      	adds	r1, r4, r0
 80068e0:	428b      	cmp	r3, r1
 80068e2:	bf01      	itttt	eq
 80068e4:	6819      	ldreq	r1, [r3, #0]
 80068e6:	685b      	ldreq	r3, [r3, #4]
 80068e8:	1809      	addeq	r1, r1, r0
 80068ea:	6021      	streq	r1, [r4, #0]
 80068ec:	6063      	str	r3, [r4, #4]
 80068ee:	6054      	str	r4, [r2, #4]
 80068f0:	e7cb      	b.n	800688a <_free_r+0x22>
 80068f2:	bd38      	pop	{r3, r4, r5, pc}
 80068f4:	200004b8 	.word	0x200004b8

080068f8 <malloc>:
 80068f8:	4b02      	ldr	r3, [pc, #8]	; (8006904 <malloc+0xc>)
 80068fa:	4601      	mov	r1, r0
 80068fc:	6818      	ldr	r0, [r3, #0]
 80068fe:	f000 b823 	b.w	8006948 <_malloc_r>
 8006902:	bf00      	nop
 8006904:	20000064 	.word	0x20000064

08006908 <sbrk_aligned>:
 8006908:	b570      	push	{r4, r5, r6, lr}
 800690a:	4e0e      	ldr	r6, [pc, #56]	; (8006944 <sbrk_aligned+0x3c>)
 800690c:	460c      	mov	r4, r1
 800690e:	6831      	ldr	r1, [r6, #0]
 8006910:	4605      	mov	r5, r0
 8006912:	b911      	cbnz	r1, 800691a <sbrk_aligned+0x12>
 8006914:	f001 fe0c 	bl	8008530 <_sbrk_r>
 8006918:	6030      	str	r0, [r6, #0]
 800691a:	4621      	mov	r1, r4
 800691c:	4628      	mov	r0, r5
 800691e:	f001 fe07 	bl	8008530 <_sbrk_r>
 8006922:	1c43      	adds	r3, r0, #1
 8006924:	d00a      	beq.n	800693c <sbrk_aligned+0x34>
 8006926:	1cc4      	adds	r4, r0, #3
 8006928:	f024 0403 	bic.w	r4, r4, #3
 800692c:	42a0      	cmp	r0, r4
 800692e:	d007      	beq.n	8006940 <sbrk_aligned+0x38>
 8006930:	1a21      	subs	r1, r4, r0
 8006932:	4628      	mov	r0, r5
 8006934:	f001 fdfc 	bl	8008530 <_sbrk_r>
 8006938:	3001      	adds	r0, #1
 800693a:	d101      	bne.n	8006940 <sbrk_aligned+0x38>
 800693c:	f04f 34ff 	mov.w	r4, #4294967295
 8006940:	4620      	mov	r0, r4
 8006942:	bd70      	pop	{r4, r5, r6, pc}
 8006944:	200004bc 	.word	0x200004bc

08006948 <_malloc_r>:
 8006948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800694c:	1ccd      	adds	r5, r1, #3
 800694e:	f025 0503 	bic.w	r5, r5, #3
 8006952:	3508      	adds	r5, #8
 8006954:	2d0c      	cmp	r5, #12
 8006956:	bf38      	it	cc
 8006958:	250c      	movcc	r5, #12
 800695a:	2d00      	cmp	r5, #0
 800695c:	4607      	mov	r7, r0
 800695e:	db01      	blt.n	8006964 <_malloc_r+0x1c>
 8006960:	42a9      	cmp	r1, r5
 8006962:	d905      	bls.n	8006970 <_malloc_r+0x28>
 8006964:	230c      	movs	r3, #12
 8006966:	2600      	movs	r6, #0
 8006968:	603b      	str	r3, [r7, #0]
 800696a:	4630      	mov	r0, r6
 800696c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006970:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006a44 <_malloc_r+0xfc>
 8006974:	f000 f868 	bl	8006a48 <__malloc_lock>
 8006978:	f8d8 3000 	ldr.w	r3, [r8]
 800697c:	461c      	mov	r4, r3
 800697e:	bb5c      	cbnz	r4, 80069d8 <_malloc_r+0x90>
 8006980:	4629      	mov	r1, r5
 8006982:	4638      	mov	r0, r7
 8006984:	f7ff ffc0 	bl	8006908 <sbrk_aligned>
 8006988:	1c43      	adds	r3, r0, #1
 800698a:	4604      	mov	r4, r0
 800698c:	d155      	bne.n	8006a3a <_malloc_r+0xf2>
 800698e:	f8d8 4000 	ldr.w	r4, [r8]
 8006992:	4626      	mov	r6, r4
 8006994:	2e00      	cmp	r6, #0
 8006996:	d145      	bne.n	8006a24 <_malloc_r+0xdc>
 8006998:	2c00      	cmp	r4, #0
 800699a:	d048      	beq.n	8006a2e <_malloc_r+0xe6>
 800699c:	6823      	ldr	r3, [r4, #0]
 800699e:	4631      	mov	r1, r6
 80069a0:	4638      	mov	r0, r7
 80069a2:	eb04 0903 	add.w	r9, r4, r3
 80069a6:	f001 fdc3 	bl	8008530 <_sbrk_r>
 80069aa:	4581      	cmp	r9, r0
 80069ac:	d13f      	bne.n	8006a2e <_malloc_r+0xe6>
 80069ae:	6821      	ldr	r1, [r4, #0]
 80069b0:	4638      	mov	r0, r7
 80069b2:	1a6d      	subs	r5, r5, r1
 80069b4:	4629      	mov	r1, r5
 80069b6:	f7ff ffa7 	bl	8006908 <sbrk_aligned>
 80069ba:	3001      	adds	r0, #1
 80069bc:	d037      	beq.n	8006a2e <_malloc_r+0xe6>
 80069be:	6823      	ldr	r3, [r4, #0]
 80069c0:	442b      	add	r3, r5
 80069c2:	6023      	str	r3, [r4, #0]
 80069c4:	f8d8 3000 	ldr.w	r3, [r8]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d038      	beq.n	8006a3e <_malloc_r+0xf6>
 80069cc:	685a      	ldr	r2, [r3, #4]
 80069ce:	42a2      	cmp	r2, r4
 80069d0:	d12b      	bne.n	8006a2a <_malloc_r+0xe2>
 80069d2:	2200      	movs	r2, #0
 80069d4:	605a      	str	r2, [r3, #4]
 80069d6:	e00f      	b.n	80069f8 <_malloc_r+0xb0>
 80069d8:	6822      	ldr	r2, [r4, #0]
 80069da:	1b52      	subs	r2, r2, r5
 80069dc:	d41f      	bmi.n	8006a1e <_malloc_r+0xd6>
 80069de:	2a0b      	cmp	r2, #11
 80069e0:	d917      	bls.n	8006a12 <_malloc_r+0xca>
 80069e2:	1961      	adds	r1, r4, r5
 80069e4:	42a3      	cmp	r3, r4
 80069e6:	6025      	str	r5, [r4, #0]
 80069e8:	bf18      	it	ne
 80069ea:	6059      	strne	r1, [r3, #4]
 80069ec:	6863      	ldr	r3, [r4, #4]
 80069ee:	bf08      	it	eq
 80069f0:	f8c8 1000 	streq.w	r1, [r8]
 80069f4:	5162      	str	r2, [r4, r5]
 80069f6:	604b      	str	r3, [r1, #4]
 80069f8:	4638      	mov	r0, r7
 80069fa:	f104 060b 	add.w	r6, r4, #11
 80069fe:	f000 f829 	bl	8006a54 <__malloc_unlock>
 8006a02:	f026 0607 	bic.w	r6, r6, #7
 8006a06:	1d23      	adds	r3, r4, #4
 8006a08:	1af2      	subs	r2, r6, r3
 8006a0a:	d0ae      	beq.n	800696a <_malloc_r+0x22>
 8006a0c:	1b9b      	subs	r3, r3, r6
 8006a0e:	50a3      	str	r3, [r4, r2]
 8006a10:	e7ab      	b.n	800696a <_malloc_r+0x22>
 8006a12:	42a3      	cmp	r3, r4
 8006a14:	6862      	ldr	r2, [r4, #4]
 8006a16:	d1dd      	bne.n	80069d4 <_malloc_r+0x8c>
 8006a18:	f8c8 2000 	str.w	r2, [r8]
 8006a1c:	e7ec      	b.n	80069f8 <_malloc_r+0xb0>
 8006a1e:	4623      	mov	r3, r4
 8006a20:	6864      	ldr	r4, [r4, #4]
 8006a22:	e7ac      	b.n	800697e <_malloc_r+0x36>
 8006a24:	4634      	mov	r4, r6
 8006a26:	6876      	ldr	r6, [r6, #4]
 8006a28:	e7b4      	b.n	8006994 <_malloc_r+0x4c>
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	e7cc      	b.n	80069c8 <_malloc_r+0x80>
 8006a2e:	230c      	movs	r3, #12
 8006a30:	4638      	mov	r0, r7
 8006a32:	603b      	str	r3, [r7, #0]
 8006a34:	f000 f80e 	bl	8006a54 <__malloc_unlock>
 8006a38:	e797      	b.n	800696a <_malloc_r+0x22>
 8006a3a:	6025      	str	r5, [r4, #0]
 8006a3c:	e7dc      	b.n	80069f8 <_malloc_r+0xb0>
 8006a3e:	605b      	str	r3, [r3, #4]
 8006a40:	deff      	udf	#255	; 0xff
 8006a42:	bf00      	nop
 8006a44:	200004b8 	.word	0x200004b8

08006a48 <__malloc_lock>:
 8006a48:	4801      	ldr	r0, [pc, #4]	; (8006a50 <__malloc_lock+0x8>)
 8006a4a:	f7ff b88b 	b.w	8005b64 <__retarget_lock_acquire_recursive>
 8006a4e:	bf00      	nop
 8006a50:	200004b4 	.word	0x200004b4

08006a54 <__malloc_unlock>:
 8006a54:	4801      	ldr	r0, [pc, #4]	; (8006a5c <__malloc_unlock+0x8>)
 8006a56:	f7ff b886 	b.w	8005b66 <__retarget_lock_release_recursive>
 8006a5a:	bf00      	nop
 8006a5c:	200004b4 	.word	0x200004b4

08006a60 <_Balloc>:
 8006a60:	b570      	push	{r4, r5, r6, lr}
 8006a62:	69c6      	ldr	r6, [r0, #28]
 8006a64:	4604      	mov	r4, r0
 8006a66:	460d      	mov	r5, r1
 8006a68:	b976      	cbnz	r6, 8006a88 <_Balloc+0x28>
 8006a6a:	2010      	movs	r0, #16
 8006a6c:	f7ff ff44 	bl	80068f8 <malloc>
 8006a70:	4602      	mov	r2, r0
 8006a72:	61e0      	str	r0, [r4, #28]
 8006a74:	b920      	cbnz	r0, 8006a80 <_Balloc+0x20>
 8006a76:	216b      	movs	r1, #107	; 0x6b
 8006a78:	4b17      	ldr	r3, [pc, #92]	; (8006ad8 <_Balloc+0x78>)
 8006a7a:	4818      	ldr	r0, [pc, #96]	; (8006adc <_Balloc+0x7c>)
 8006a7c:	f001 fd7c 	bl	8008578 <__assert_func>
 8006a80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a84:	6006      	str	r6, [r0, #0]
 8006a86:	60c6      	str	r6, [r0, #12]
 8006a88:	69e6      	ldr	r6, [r4, #28]
 8006a8a:	68f3      	ldr	r3, [r6, #12]
 8006a8c:	b183      	cbz	r3, 8006ab0 <_Balloc+0x50>
 8006a8e:	69e3      	ldr	r3, [r4, #28]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006a96:	b9b8      	cbnz	r0, 8006ac8 <_Balloc+0x68>
 8006a98:	2101      	movs	r1, #1
 8006a9a:	fa01 f605 	lsl.w	r6, r1, r5
 8006a9e:	1d72      	adds	r2, r6, #5
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	0092      	lsls	r2, r2, #2
 8006aa4:	f001 fd86 	bl	80085b4 <_calloc_r>
 8006aa8:	b160      	cbz	r0, 8006ac4 <_Balloc+0x64>
 8006aaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006aae:	e00e      	b.n	8006ace <_Balloc+0x6e>
 8006ab0:	2221      	movs	r2, #33	; 0x21
 8006ab2:	2104      	movs	r1, #4
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	f001 fd7d 	bl	80085b4 <_calloc_r>
 8006aba:	69e3      	ldr	r3, [r4, #28]
 8006abc:	60f0      	str	r0, [r6, #12]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d1e4      	bne.n	8006a8e <_Balloc+0x2e>
 8006ac4:	2000      	movs	r0, #0
 8006ac6:	bd70      	pop	{r4, r5, r6, pc}
 8006ac8:	6802      	ldr	r2, [r0, #0]
 8006aca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006ace:	2300      	movs	r3, #0
 8006ad0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ad4:	e7f7      	b.n	8006ac6 <_Balloc+0x66>
 8006ad6:	bf00      	nop
 8006ad8:	08009378 	.word	0x08009378
 8006adc:	080093f8 	.word	0x080093f8

08006ae0 <_Bfree>:
 8006ae0:	b570      	push	{r4, r5, r6, lr}
 8006ae2:	69c6      	ldr	r6, [r0, #28]
 8006ae4:	4605      	mov	r5, r0
 8006ae6:	460c      	mov	r4, r1
 8006ae8:	b976      	cbnz	r6, 8006b08 <_Bfree+0x28>
 8006aea:	2010      	movs	r0, #16
 8006aec:	f7ff ff04 	bl	80068f8 <malloc>
 8006af0:	4602      	mov	r2, r0
 8006af2:	61e8      	str	r0, [r5, #28]
 8006af4:	b920      	cbnz	r0, 8006b00 <_Bfree+0x20>
 8006af6:	218f      	movs	r1, #143	; 0x8f
 8006af8:	4b08      	ldr	r3, [pc, #32]	; (8006b1c <_Bfree+0x3c>)
 8006afa:	4809      	ldr	r0, [pc, #36]	; (8006b20 <_Bfree+0x40>)
 8006afc:	f001 fd3c 	bl	8008578 <__assert_func>
 8006b00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b04:	6006      	str	r6, [r0, #0]
 8006b06:	60c6      	str	r6, [r0, #12]
 8006b08:	b13c      	cbz	r4, 8006b1a <_Bfree+0x3a>
 8006b0a:	69eb      	ldr	r3, [r5, #28]
 8006b0c:	6862      	ldr	r2, [r4, #4]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b14:	6021      	str	r1, [r4, #0]
 8006b16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b1a:	bd70      	pop	{r4, r5, r6, pc}
 8006b1c:	08009378 	.word	0x08009378
 8006b20:	080093f8 	.word	0x080093f8

08006b24 <__multadd>:
 8006b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b28:	4607      	mov	r7, r0
 8006b2a:	460c      	mov	r4, r1
 8006b2c:	461e      	mov	r6, r3
 8006b2e:	2000      	movs	r0, #0
 8006b30:	690d      	ldr	r5, [r1, #16]
 8006b32:	f101 0c14 	add.w	ip, r1, #20
 8006b36:	f8dc 3000 	ldr.w	r3, [ip]
 8006b3a:	3001      	adds	r0, #1
 8006b3c:	b299      	uxth	r1, r3
 8006b3e:	fb02 6101 	mla	r1, r2, r1, r6
 8006b42:	0c1e      	lsrs	r6, r3, #16
 8006b44:	0c0b      	lsrs	r3, r1, #16
 8006b46:	fb02 3306 	mla	r3, r2, r6, r3
 8006b4a:	b289      	uxth	r1, r1
 8006b4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006b50:	4285      	cmp	r5, r0
 8006b52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006b56:	f84c 1b04 	str.w	r1, [ip], #4
 8006b5a:	dcec      	bgt.n	8006b36 <__multadd+0x12>
 8006b5c:	b30e      	cbz	r6, 8006ba2 <__multadd+0x7e>
 8006b5e:	68a3      	ldr	r3, [r4, #8]
 8006b60:	42ab      	cmp	r3, r5
 8006b62:	dc19      	bgt.n	8006b98 <__multadd+0x74>
 8006b64:	6861      	ldr	r1, [r4, #4]
 8006b66:	4638      	mov	r0, r7
 8006b68:	3101      	adds	r1, #1
 8006b6a:	f7ff ff79 	bl	8006a60 <_Balloc>
 8006b6e:	4680      	mov	r8, r0
 8006b70:	b928      	cbnz	r0, 8006b7e <__multadd+0x5a>
 8006b72:	4602      	mov	r2, r0
 8006b74:	21ba      	movs	r1, #186	; 0xba
 8006b76:	4b0c      	ldr	r3, [pc, #48]	; (8006ba8 <__multadd+0x84>)
 8006b78:	480c      	ldr	r0, [pc, #48]	; (8006bac <__multadd+0x88>)
 8006b7a:	f001 fcfd 	bl	8008578 <__assert_func>
 8006b7e:	6922      	ldr	r2, [r4, #16]
 8006b80:	f104 010c 	add.w	r1, r4, #12
 8006b84:	3202      	adds	r2, #2
 8006b86:	0092      	lsls	r2, r2, #2
 8006b88:	300c      	adds	r0, #12
 8006b8a:	f001 fce1 	bl	8008550 <memcpy>
 8006b8e:	4621      	mov	r1, r4
 8006b90:	4638      	mov	r0, r7
 8006b92:	f7ff ffa5 	bl	8006ae0 <_Bfree>
 8006b96:	4644      	mov	r4, r8
 8006b98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006b9c:	3501      	adds	r5, #1
 8006b9e:	615e      	str	r6, [r3, #20]
 8006ba0:	6125      	str	r5, [r4, #16]
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ba8:	080093e7 	.word	0x080093e7
 8006bac:	080093f8 	.word	0x080093f8

08006bb0 <__s2b>:
 8006bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bb4:	4615      	mov	r5, r2
 8006bb6:	2209      	movs	r2, #9
 8006bb8:	461f      	mov	r7, r3
 8006bba:	3308      	adds	r3, #8
 8006bbc:	460c      	mov	r4, r1
 8006bbe:	fb93 f3f2 	sdiv	r3, r3, r2
 8006bc2:	4606      	mov	r6, r0
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	db09      	blt.n	8006be0 <__s2b+0x30>
 8006bcc:	4630      	mov	r0, r6
 8006bce:	f7ff ff47 	bl	8006a60 <_Balloc>
 8006bd2:	b940      	cbnz	r0, 8006be6 <__s2b+0x36>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	21d3      	movs	r1, #211	; 0xd3
 8006bd8:	4b18      	ldr	r3, [pc, #96]	; (8006c3c <__s2b+0x8c>)
 8006bda:	4819      	ldr	r0, [pc, #100]	; (8006c40 <__s2b+0x90>)
 8006bdc:	f001 fccc 	bl	8008578 <__assert_func>
 8006be0:	0052      	lsls	r2, r2, #1
 8006be2:	3101      	adds	r1, #1
 8006be4:	e7f0      	b.n	8006bc8 <__s2b+0x18>
 8006be6:	9b08      	ldr	r3, [sp, #32]
 8006be8:	2d09      	cmp	r5, #9
 8006bea:	6143      	str	r3, [r0, #20]
 8006bec:	f04f 0301 	mov.w	r3, #1
 8006bf0:	6103      	str	r3, [r0, #16]
 8006bf2:	dd16      	ble.n	8006c22 <__s2b+0x72>
 8006bf4:	f104 0909 	add.w	r9, r4, #9
 8006bf8:	46c8      	mov	r8, r9
 8006bfa:	442c      	add	r4, r5
 8006bfc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006c00:	4601      	mov	r1, r0
 8006c02:	220a      	movs	r2, #10
 8006c04:	4630      	mov	r0, r6
 8006c06:	3b30      	subs	r3, #48	; 0x30
 8006c08:	f7ff ff8c 	bl	8006b24 <__multadd>
 8006c0c:	45a0      	cmp	r8, r4
 8006c0e:	d1f5      	bne.n	8006bfc <__s2b+0x4c>
 8006c10:	f1a5 0408 	sub.w	r4, r5, #8
 8006c14:	444c      	add	r4, r9
 8006c16:	1b2d      	subs	r5, r5, r4
 8006c18:	1963      	adds	r3, r4, r5
 8006c1a:	42bb      	cmp	r3, r7
 8006c1c:	db04      	blt.n	8006c28 <__s2b+0x78>
 8006c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c22:	2509      	movs	r5, #9
 8006c24:	340a      	adds	r4, #10
 8006c26:	e7f6      	b.n	8006c16 <__s2b+0x66>
 8006c28:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006c2c:	4601      	mov	r1, r0
 8006c2e:	220a      	movs	r2, #10
 8006c30:	4630      	mov	r0, r6
 8006c32:	3b30      	subs	r3, #48	; 0x30
 8006c34:	f7ff ff76 	bl	8006b24 <__multadd>
 8006c38:	e7ee      	b.n	8006c18 <__s2b+0x68>
 8006c3a:	bf00      	nop
 8006c3c:	080093e7 	.word	0x080093e7
 8006c40:	080093f8 	.word	0x080093f8

08006c44 <__hi0bits>:
 8006c44:	0c02      	lsrs	r2, r0, #16
 8006c46:	0412      	lsls	r2, r2, #16
 8006c48:	4603      	mov	r3, r0
 8006c4a:	b9ca      	cbnz	r2, 8006c80 <__hi0bits+0x3c>
 8006c4c:	0403      	lsls	r3, r0, #16
 8006c4e:	2010      	movs	r0, #16
 8006c50:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006c54:	bf04      	itt	eq
 8006c56:	021b      	lsleq	r3, r3, #8
 8006c58:	3008      	addeq	r0, #8
 8006c5a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006c5e:	bf04      	itt	eq
 8006c60:	011b      	lsleq	r3, r3, #4
 8006c62:	3004      	addeq	r0, #4
 8006c64:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006c68:	bf04      	itt	eq
 8006c6a:	009b      	lsleq	r3, r3, #2
 8006c6c:	3002      	addeq	r0, #2
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	db05      	blt.n	8006c7e <__hi0bits+0x3a>
 8006c72:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006c76:	f100 0001 	add.w	r0, r0, #1
 8006c7a:	bf08      	it	eq
 8006c7c:	2020      	moveq	r0, #32
 8006c7e:	4770      	bx	lr
 8006c80:	2000      	movs	r0, #0
 8006c82:	e7e5      	b.n	8006c50 <__hi0bits+0xc>

08006c84 <__lo0bits>:
 8006c84:	6803      	ldr	r3, [r0, #0]
 8006c86:	4602      	mov	r2, r0
 8006c88:	f013 0007 	ands.w	r0, r3, #7
 8006c8c:	d00b      	beq.n	8006ca6 <__lo0bits+0x22>
 8006c8e:	07d9      	lsls	r1, r3, #31
 8006c90:	d421      	bmi.n	8006cd6 <__lo0bits+0x52>
 8006c92:	0798      	lsls	r0, r3, #30
 8006c94:	bf49      	itett	mi
 8006c96:	085b      	lsrmi	r3, r3, #1
 8006c98:	089b      	lsrpl	r3, r3, #2
 8006c9a:	2001      	movmi	r0, #1
 8006c9c:	6013      	strmi	r3, [r2, #0]
 8006c9e:	bf5c      	itt	pl
 8006ca0:	2002      	movpl	r0, #2
 8006ca2:	6013      	strpl	r3, [r2, #0]
 8006ca4:	4770      	bx	lr
 8006ca6:	b299      	uxth	r1, r3
 8006ca8:	b909      	cbnz	r1, 8006cae <__lo0bits+0x2a>
 8006caa:	2010      	movs	r0, #16
 8006cac:	0c1b      	lsrs	r3, r3, #16
 8006cae:	b2d9      	uxtb	r1, r3
 8006cb0:	b909      	cbnz	r1, 8006cb6 <__lo0bits+0x32>
 8006cb2:	3008      	adds	r0, #8
 8006cb4:	0a1b      	lsrs	r3, r3, #8
 8006cb6:	0719      	lsls	r1, r3, #28
 8006cb8:	bf04      	itt	eq
 8006cba:	091b      	lsreq	r3, r3, #4
 8006cbc:	3004      	addeq	r0, #4
 8006cbe:	0799      	lsls	r1, r3, #30
 8006cc0:	bf04      	itt	eq
 8006cc2:	089b      	lsreq	r3, r3, #2
 8006cc4:	3002      	addeq	r0, #2
 8006cc6:	07d9      	lsls	r1, r3, #31
 8006cc8:	d403      	bmi.n	8006cd2 <__lo0bits+0x4e>
 8006cca:	085b      	lsrs	r3, r3, #1
 8006ccc:	f100 0001 	add.w	r0, r0, #1
 8006cd0:	d003      	beq.n	8006cda <__lo0bits+0x56>
 8006cd2:	6013      	str	r3, [r2, #0]
 8006cd4:	4770      	bx	lr
 8006cd6:	2000      	movs	r0, #0
 8006cd8:	4770      	bx	lr
 8006cda:	2020      	movs	r0, #32
 8006cdc:	4770      	bx	lr
	...

08006ce0 <__i2b>:
 8006ce0:	b510      	push	{r4, lr}
 8006ce2:	460c      	mov	r4, r1
 8006ce4:	2101      	movs	r1, #1
 8006ce6:	f7ff febb 	bl	8006a60 <_Balloc>
 8006cea:	4602      	mov	r2, r0
 8006cec:	b928      	cbnz	r0, 8006cfa <__i2b+0x1a>
 8006cee:	f240 1145 	movw	r1, #325	; 0x145
 8006cf2:	4b04      	ldr	r3, [pc, #16]	; (8006d04 <__i2b+0x24>)
 8006cf4:	4804      	ldr	r0, [pc, #16]	; (8006d08 <__i2b+0x28>)
 8006cf6:	f001 fc3f 	bl	8008578 <__assert_func>
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	6144      	str	r4, [r0, #20]
 8006cfe:	6103      	str	r3, [r0, #16]
 8006d00:	bd10      	pop	{r4, pc}
 8006d02:	bf00      	nop
 8006d04:	080093e7 	.word	0x080093e7
 8006d08:	080093f8 	.word	0x080093f8

08006d0c <__multiply>:
 8006d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d10:	4691      	mov	r9, r2
 8006d12:	690a      	ldr	r2, [r1, #16]
 8006d14:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006d18:	460c      	mov	r4, r1
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	bfbe      	ittt	lt
 8006d1e:	460b      	movlt	r3, r1
 8006d20:	464c      	movlt	r4, r9
 8006d22:	4699      	movlt	r9, r3
 8006d24:	6927      	ldr	r7, [r4, #16]
 8006d26:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006d2a:	68a3      	ldr	r3, [r4, #8]
 8006d2c:	6861      	ldr	r1, [r4, #4]
 8006d2e:	eb07 060a 	add.w	r6, r7, sl
 8006d32:	42b3      	cmp	r3, r6
 8006d34:	b085      	sub	sp, #20
 8006d36:	bfb8      	it	lt
 8006d38:	3101      	addlt	r1, #1
 8006d3a:	f7ff fe91 	bl	8006a60 <_Balloc>
 8006d3e:	b930      	cbnz	r0, 8006d4e <__multiply+0x42>
 8006d40:	4602      	mov	r2, r0
 8006d42:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006d46:	4b43      	ldr	r3, [pc, #268]	; (8006e54 <__multiply+0x148>)
 8006d48:	4843      	ldr	r0, [pc, #268]	; (8006e58 <__multiply+0x14c>)
 8006d4a:	f001 fc15 	bl	8008578 <__assert_func>
 8006d4e:	f100 0514 	add.w	r5, r0, #20
 8006d52:	462b      	mov	r3, r5
 8006d54:	2200      	movs	r2, #0
 8006d56:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006d5a:	4543      	cmp	r3, r8
 8006d5c:	d321      	bcc.n	8006da2 <__multiply+0x96>
 8006d5e:	f104 0314 	add.w	r3, r4, #20
 8006d62:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006d66:	f109 0314 	add.w	r3, r9, #20
 8006d6a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006d6e:	9202      	str	r2, [sp, #8]
 8006d70:	1b3a      	subs	r2, r7, r4
 8006d72:	3a15      	subs	r2, #21
 8006d74:	f022 0203 	bic.w	r2, r2, #3
 8006d78:	3204      	adds	r2, #4
 8006d7a:	f104 0115 	add.w	r1, r4, #21
 8006d7e:	428f      	cmp	r7, r1
 8006d80:	bf38      	it	cc
 8006d82:	2204      	movcc	r2, #4
 8006d84:	9201      	str	r2, [sp, #4]
 8006d86:	9a02      	ldr	r2, [sp, #8]
 8006d88:	9303      	str	r3, [sp, #12]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d80c      	bhi.n	8006da8 <__multiply+0x9c>
 8006d8e:	2e00      	cmp	r6, #0
 8006d90:	dd03      	ble.n	8006d9a <__multiply+0x8e>
 8006d92:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d05a      	beq.n	8006e50 <__multiply+0x144>
 8006d9a:	6106      	str	r6, [r0, #16]
 8006d9c:	b005      	add	sp, #20
 8006d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da2:	f843 2b04 	str.w	r2, [r3], #4
 8006da6:	e7d8      	b.n	8006d5a <__multiply+0x4e>
 8006da8:	f8b3 a000 	ldrh.w	sl, [r3]
 8006dac:	f1ba 0f00 	cmp.w	sl, #0
 8006db0:	d023      	beq.n	8006dfa <__multiply+0xee>
 8006db2:	46a9      	mov	r9, r5
 8006db4:	f04f 0c00 	mov.w	ip, #0
 8006db8:	f104 0e14 	add.w	lr, r4, #20
 8006dbc:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006dc0:	f8d9 1000 	ldr.w	r1, [r9]
 8006dc4:	fa1f fb82 	uxth.w	fp, r2
 8006dc8:	b289      	uxth	r1, r1
 8006dca:	fb0a 110b 	mla	r1, sl, fp, r1
 8006dce:	4461      	add	r1, ip
 8006dd0:	f8d9 c000 	ldr.w	ip, [r9]
 8006dd4:	0c12      	lsrs	r2, r2, #16
 8006dd6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006dda:	fb0a c202 	mla	r2, sl, r2, ip
 8006dde:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006de2:	b289      	uxth	r1, r1
 8006de4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006de8:	4577      	cmp	r7, lr
 8006dea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006dee:	f849 1b04 	str.w	r1, [r9], #4
 8006df2:	d8e3      	bhi.n	8006dbc <__multiply+0xb0>
 8006df4:	9a01      	ldr	r2, [sp, #4]
 8006df6:	f845 c002 	str.w	ip, [r5, r2]
 8006dfa:	9a03      	ldr	r2, [sp, #12]
 8006dfc:	3304      	adds	r3, #4
 8006dfe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006e02:	f1b9 0f00 	cmp.w	r9, #0
 8006e06:	d021      	beq.n	8006e4c <__multiply+0x140>
 8006e08:	46ae      	mov	lr, r5
 8006e0a:	f04f 0a00 	mov.w	sl, #0
 8006e0e:	6829      	ldr	r1, [r5, #0]
 8006e10:	f104 0c14 	add.w	ip, r4, #20
 8006e14:	f8bc b000 	ldrh.w	fp, [ip]
 8006e18:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006e1c:	b289      	uxth	r1, r1
 8006e1e:	fb09 220b 	mla	r2, r9, fp, r2
 8006e22:	4452      	add	r2, sl
 8006e24:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006e28:	f84e 1b04 	str.w	r1, [lr], #4
 8006e2c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006e30:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006e34:	f8be 1000 	ldrh.w	r1, [lr]
 8006e38:	4567      	cmp	r7, ip
 8006e3a:	fb09 110a 	mla	r1, r9, sl, r1
 8006e3e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006e42:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006e46:	d8e5      	bhi.n	8006e14 <__multiply+0x108>
 8006e48:	9a01      	ldr	r2, [sp, #4]
 8006e4a:	50a9      	str	r1, [r5, r2]
 8006e4c:	3504      	adds	r5, #4
 8006e4e:	e79a      	b.n	8006d86 <__multiply+0x7a>
 8006e50:	3e01      	subs	r6, #1
 8006e52:	e79c      	b.n	8006d8e <__multiply+0x82>
 8006e54:	080093e7 	.word	0x080093e7
 8006e58:	080093f8 	.word	0x080093f8

08006e5c <__pow5mult>:
 8006e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e60:	4615      	mov	r5, r2
 8006e62:	f012 0203 	ands.w	r2, r2, #3
 8006e66:	4606      	mov	r6, r0
 8006e68:	460f      	mov	r7, r1
 8006e6a:	d007      	beq.n	8006e7c <__pow5mult+0x20>
 8006e6c:	4c25      	ldr	r4, [pc, #148]	; (8006f04 <__pow5mult+0xa8>)
 8006e6e:	3a01      	subs	r2, #1
 8006e70:	2300      	movs	r3, #0
 8006e72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006e76:	f7ff fe55 	bl	8006b24 <__multadd>
 8006e7a:	4607      	mov	r7, r0
 8006e7c:	10ad      	asrs	r5, r5, #2
 8006e7e:	d03d      	beq.n	8006efc <__pow5mult+0xa0>
 8006e80:	69f4      	ldr	r4, [r6, #28]
 8006e82:	b97c      	cbnz	r4, 8006ea4 <__pow5mult+0x48>
 8006e84:	2010      	movs	r0, #16
 8006e86:	f7ff fd37 	bl	80068f8 <malloc>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	61f0      	str	r0, [r6, #28]
 8006e8e:	b928      	cbnz	r0, 8006e9c <__pow5mult+0x40>
 8006e90:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006e94:	4b1c      	ldr	r3, [pc, #112]	; (8006f08 <__pow5mult+0xac>)
 8006e96:	481d      	ldr	r0, [pc, #116]	; (8006f0c <__pow5mult+0xb0>)
 8006e98:	f001 fb6e 	bl	8008578 <__assert_func>
 8006e9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ea0:	6004      	str	r4, [r0, #0]
 8006ea2:	60c4      	str	r4, [r0, #12]
 8006ea4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006ea8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006eac:	b94c      	cbnz	r4, 8006ec2 <__pow5mult+0x66>
 8006eae:	f240 2171 	movw	r1, #625	; 0x271
 8006eb2:	4630      	mov	r0, r6
 8006eb4:	f7ff ff14 	bl	8006ce0 <__i2b>
 8006eb8:	2300      	movs	r3, #0
 8006eba:	4604      	mov	r4, r0
 8006ebc:	f8c8 0008 	str.w	r0, [r8, #8]
 8006ec0:	6003      	str	r3, [r0, #0]
 8006ec2:	f04f 0900 	mov.w	r9, #0
 8006ec6:	07eb      	lsls	r3, r5, #31
 8006ec8:	d50a      	bpl.n	8006ee0 <__pow5mult+0x84>
 8006eca:	4639      	mov	r1, r7
 8006ecc:	4622      	mov	r2, r4
 8006ece:	4630      	mov	r0, r6
 8006ed0:	f7ff ff1c 	bl	8006d0c <__multiply>
 8006ed4:	4680      	mov	r8, r0
 8006ed6:	4639      	mov	r1, r7
 8006ed8:	4630      	mov	r0, r6
 8006eda:	f7ff fe01 	bl	8006ae0 <_Bfree>
 8006ede:	4647      	mov	r7, r8
 8006ee0:	106d      	asrs	r5, r5, #1
 8006ee2:	d00b      	beq.n	8006efc <__pow5mult+0xa0>
 8006ee4:	6820      	ldr	r0, [r4, #0]
 8006ee6:	b938      	cbnz	r0, 8006ef8 <__pow5mult+0x9c>
 8006ee8:	4622      	mov	r2, r4
 8006eea:	4621      	mov	r1, r4
 8006eec:	4630      	mov	r0, r6
 8006eee:	f7ff ff0d 	bl	8006d0c <__multiply>
 8006ef2:	6020      	str	r0, [r4, #0]
 8006ef4:	f8c0 9000 	str.w	r9, [r0]
 8006ef8:	4604      	mov	r4, r0
 8006efa:	e7e4      	b.n	8006ec6 <__pow5mult+0x6a>
 8006efc:	4638      	mov	r0, r7
 8006efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f02:	bf00      	nop
 8006f04:	08009548 	.word	0x08009548
 8006f08:	08009378 	.word	0x08009378
 8006f0c:	080093f8 	.word	0x080093f8

08006f10 <__lshift>:
 8006f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f14:	460c      	mov	r4, r1
 8006f16:	4607      	mov	r7, r0
 8006f18:	4691      	mov	r9, r2
 8006f1a:	6923      	ldr	r3, [r4, #16]
 8006f1c:	6849      	ldr	r1, [r1, #4]
 8006f1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006f22:	68a3      	ldr	r3, [r4, #8]
 8006f24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006f28:	f108 0601 	add.w	r6, r8, #1
 8006f2c:	42b3      	cmp	r3, r6
 8006f2e:	db0b      	blt.n	8006f48 <__lshift+0x38>
 8006f30:	4638      	mov	r0, r7
 8006f32:	f7ff fd95 	bl	8006a60 <_Balloc>
 8006f36:	4605      	mov	r5, r0
 8006f38:	b948      	cbnz	r0, 8006f4e <__lshift+0x3e>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006f40:	4b27      	ldr	r3, [pc, #156]	; (8006fe0 <__lshift+0xd0>)
 8006f42:	4828      	ldr	r0, [pc, #160]	; (8006fe4 <__lshift+0xd4>)
 8006f44:	f001 fb18 	bl	8008578 <__assert_func>
 8006f48:	3101      	adds	r1, #1
 8006f4a:	005b      	lsls	r3, r3, #1
 8006f4c:	e7ee      	b.n	8006f2c <__lshift+0x1c>
 8006f4e:	2300      	movs	r3, #0
 8006f50:	f100 0114 	add.w	r1, r0, #20
 8006f54:	f100 0210 	add.w	r2, r0, #16
 8006f58:	4618      	mov	r0, r3
 8006f5a:	4553      	cmp	r3, sl
 8006f5c:	db33      	blt.n	8006fc6 <__lshift+0xb6>
 8006f5e:	6920      	ldr	r0, [r4, #16]
 8006f60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006f64:	f104 0314 	add.w	r3, r4, #20
 8006f68:	f019 091f 	ands.w	r9, r9, #31
 8006f6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006f70:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006f74:	d02b      	beq.n	8006fce <__lshift+0xbe>
 8006f76:	468a      	mov	sl, r1
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f1c9 0e20 	rsb	lr, r9, #32
 8006f7e:	6818      	ldr	r0, [r3, #0]
 8006f80:	fa00 f009 	lsl.w	r0, r0, r9
 8006f84:	4310      	orrs	r0, r2
 8006f86:	f84a 0b04 	str.w	r0, [sl], #4
 8006f8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f8e:	459c      	cmp	ip, r3
 8006f90:	fa22 f20e 	lsr.w	r2, r2, lr
 8006f94:	d8f3      	bhi.n	8006f7e <__lshift+0x6e>
 8006f96:	ebac 0304 	sub.w	r3, ip, r4
 8006f9a:	3b15      	subs	r3, #21
 8006f9c:	f023 0303 	bic.w	r3, r3, #3
 8006fa0:	3304      	adds	r3, #4
 8006fa2:	f104 0015 	add.w	r0, r4, #21
 8006fa6:	4584      	cmp	ip, r0
 8006fa8:	bf38      	it	cc
 8006faa:	2304      	movcc	r3, #4
 8006fac:	50ca      	str	r2, [r1, r3]
 8006fae:	b10a      	cbz	r2, 8006fb4 <__lshift+0xa4>
 8006fb0:	f108 0602 	add.w	r6, r8, #2
 8006fb4:	3e01      	subs	r6, #1
 8006fb6:	4638      	mov	r0, r7
 8006fb8:	4621      	mov	r1, r4
 8006fba:	612e      	str	r6, [r5, #16]
 8006fbc:	f7ff fd90 	bl	8006ae0 <_Bfree>
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fc6:	f842 0f04 	str.w	r0, [r2, #4]!
 8006fca:	3301      	adds	r3, #1
 8006fcc:	e7c5      	b.n	8006f5a <__lshift+0x4a>
 8006fce:	3904      	subs	r1, #4
 8006fd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fd4:	459c      	cmp	ip, r3
 8006fd6:	f841 2f04 	str.w	r2, [r1, #4]!
 8006fda:	d8f9      	bhi.n	8006fd0 <__lshift+0xc0>
 8006fdc:	e7ea      	b.n	8006fb4 <__lshift+0xa4>
 8006fde:	bf00      	nop
 8006fe0:	080093e7 	.word	0x080093e7
 8006fe4:	080093f8 	.word	0x080093f8

08006fe8 <__mcmp>:
 8006fe8:	4603      	mov	r3, r0
 8006fea:	690a      	ldr	r2, [r1, #16]
 8006fec:	6900      	ldr	r0, [r0, #16]
 8006fee:	b530      	push	{r4, r5, lr}
 8006ff0:	1a80      	subs	r0, r0, r2
 8006ff2:	d10d      	bne.n	8007010 <__mcmp+0x28>
 8006ff4:	3314      	adds	r3, #20
 8006ff6:	3114      	adds	r1, #20
 8006ff8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006ffc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007000:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007004:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007008:	4295      	cmp	r5, r2
 800700a:	d002      	beq.n	8007012 <__mcmp+0x2a>
 800700c:	d304      	bcc.n	8007018 <__mcmp+0x30>
 800700e:	2001      	movs	r0, #1
 8007010:	bd30      	pop	{r4, r5, pc}
 8007012:	42a3      	cmp	r3, r4
 8007014:	d3f4      	bcc.n	8007000 <__mcmp+0x18>
 8007016:	e7fb      	b.n	8007010 <__mcmp+0x28>
 8007018:	f04f 30ff 	mov.w	r0, #4294967295
 800701c:	e7f8      	b.n	8007010 <__mcmp+0x28>
	...

08007020 <__mdiff>:
 8007020:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007024:	460d      	mov	r5, r1
 8007026:	4607      	mov	r7, r0
 8007028:	4611      	mov	r1, r2
 800702a:	4628      	mov	r0, r5
 800702c:	4614      	mov	r4, r2
 800702e:	f7ff ffdb 	bl	8006fe8 <__mcmp>
 8007032:	1e06      	subs	r6, r0, #0
 8007034:	d111      	bne.n	800705a <__mdiff+0x3a>
 8007036:	4631      	mov	r1, r6
 8007038:	4638      	mov	r0, r7
 800703a:	f7ff fd11 	bl	8006a60 <_Balloc>
 800703e:	4602      	mov	r2, r0
 8007040:	b928      	cbnz	r0, 800704e <__mdiff+0x2e>
 8007042:	f240 2137 	movw	r1, #567	; 0x237
 8007046:	4b3a      	ldr	r3, [pc, #232]	; (8007130 <__mdiff+0x110>)
 8007048:	483a      	ldr	r0, [pc, #232]	; (8007134 <__mdiff+0x114>)
 800704a:	f001 fa95 	bl	8008578 <__assert_func>
 800704e:	2301      	movs	r3, #1
 8007050:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007054:	4610      	mov	r0, r2
 8007056:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800705a:	bfa4      	itt	ge
 800705c:	4623      	movge	r3, r4
 800705e:	462c      	movge	r4, r5
 8007060:	4638      	mov	r0, r7
 8007062:	6861      	ldr	r1, [r4, #4]
 8007064:	bfa6      	itte	ge
 8007066:	461d      	movge	r5, r3
 8007068:	2600      	movge	r6, #0
 800706a:	2601      	movlt	r6, #1
 800706c:	f7ff fcf8 	bl	8006a60 <_Balloc>
 8007070:	4602      	mov	r2, r0
 8007072:	b918      	cbnz	r0, 800707c <__mdiff+0x5c>
 8007074:	f240 2145 	movw	r1, #581	; 0x245
 8007078:	4b2d      	ldr	r3, [pc, #180]	; (8007130 <__mdiff+0x110>)
 800707a:	e7e5      	b.n	8007048 <__mdiff+0x28>
 800707c:	f102 0814 	add.w	r8, r2, #20
 8007080:	46c2      	mov	sl, r8
 8007082:	f04f 0c00 	mov.w	ip, #0
 8007086:	6927      	ldr	r7, [r4, #16]
 8007088:	60c6      	str	r6, [r0, #12]
 800708a:	692e      	ldr	r6, [r5, #16]
 800708c:	f104 0014 	add.w	r0, r4, #20
 8007090:	f105 0914 	add.w	r9, r5, #20
 8007094:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007098:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800709c:	3410      	adds	r4, #16
 800709e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80070a2:	f859 3b04 	ldr.w	r3, [r9], #4
 80070a6:	fa1f f18b 	uxth.w	r1, fp
 80070aa:	4461      	add	r1, ip
 80070ac:	fa1f fc83 	uxth.w	ip, r3
 80070b0:	0c1b      	lsrs	r3, r3, #16
 80070b2:	eba1 010c 	sub.w	r1, r1, ip
 80070b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80070ba:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80070be:	b289      	uxth	r1, r1
 80070c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80070c4:	454e      	cmp	r6, r9
 80070c6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80070ca:	f84a 1b04 	str.w	r1, [sl], #4
 80070ce:	d8e6      	bhi.n	800709e <__mdiff+0x7e>
 80070d0:	1b73      	subs	r3, r6, r5
 80070d2:	3b15      	subs	r3, #21
 80070d4:	f023 0303 	bic.w	r3, r3, #3
 80070d8:	3515      	adds	r5, #21
 80070da:	3304      	adds	r3, #4
 80070dc:	42ae      	cmp	r6, r5
 80070de:	bf38      	it	cc
 80070e0:	2304      	movcc	r3, #4
 80070e2:	4418      	add	r0, r3
 80070e4:	4443      	add	r3, r8
 80070e6:	461e      	mov	r6, r3
 80070e8:	4605      	mov	r5, r0
 80070ea:	4575      	cmp	r5, lr
 80070ec:	d30e      	bcc.n	800710c <__mdiff+0xec>
 80070ee:	f10e 0103 	add.w	r1, lr, #3
 80070f2:	1a09      	subs	r1, r1, r0
 80070f4:	f021 0103 	bic.w	r1, r1, #3
 80070f8:	3803      	subs	r0, #3
 80070fa:	4586      	cmp	lr, r0
 80070fc:	bf38      	it	cc
 80070fe:	2100      	movcc	r1, #0
 8007100:	440b      	add	r3, r1
 8007102:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007106:	b189      	cbz	r1, 800712c <__mdiff+0x10c>
 8007108:	6117      	str	r7, [r2, #16]
 800710a:	e7a3      	b.n	8007054 <__mdiff+0x34>
 800710c:	f855 8b04 	ldr.w	r8, [r5], #4
 8007110:	fa1f f188 	uxth.w	r1, r8
 8007114:	4461      	add	r1, ip
 8007116:	140c      	asrs	r4, r1, #16
 8007118:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800711c:	b289      	uxth	r1, r1
 800711e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007122:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007126:	f846 1b04 	str.w	r1, [r6], #4
 800712a:	e7de      	b.n	80070ea <__mdiff+0xca>
 800712c:	3f01      	subs	r7, #1
 800712e:	e7e8      	b.n	8007102 <__mdiff+0xe2>
 8007130:	080093e7 	.word	0x080093e7
 8007134:	080093f8 	.word	0x080093f8

08007138 <__ulp>:
 8007138:	4b0e      	ldr	r3, [pc, #56]	; (8007174 <__ulp+0x3c>)
 800713a:	400b      	ands	r3, r1
 800713c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007140:	2b00      	cmp	r3, #0
 8007142:	dc08      	bgt.n	8007156 <__ulp+0x1e>
 8007144:	425b      	negs	r3, r3
 8007146:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800714a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800714e:	da04      	bge.n	800715a <__ulp+0x22>
 8007150:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007154:	4113      	asrs	r3, r2
 8007156:	2200      	movs	r2, #0
 8007158:	e008      	b.n	800716c <__ulp+0x34>
 800715a:	f1a2 0314 	sub.w	r3, r2, #20
 800715e:	2b1e      	cmp	r3, #30
 8007160:	bfd6      	itet	le
 8007162:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007166:	2201      	movgt	r2, #1
 8007168:	40da      	lsrle	r2, r3
 800716a:	2300      	movs	r3, #0
 800716c:	4619      	mov	r1, r3
 800716e:	4610      	mov	r0, r2
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	7ff00000 	.word	0x7ff00000

08007178 <__b2d>:
 8007178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800717a:	6905      	ldr	r5, [r0, #16]
 800717c:	f100 0714 	add.w	r7, r0, #20
 8007180:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007184:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007188:	1f2e      	subs	r6, r5, #4
 800718a:	4620      	mov	r0, r4
 800718c:	f7ff fd5a 	bl	8006c44 <__hi0bits>
 8007190:	f1c0 0220 	rsb	r2, r0, #32
 8007194:	280a      	cmp	r0, #10
 8007196:	4603      	mov	r3, r0
 8007198:	f8df c068 	ldr.w	ip, [pc, #104]	; 8007204 <__b2d+0x8c>
 800719c:	600a      	str	r2, [r1, #0]
 800719e:	dc12      	bgt.n	80071c6 <__b2d+0x4e>
 80071a0:	f1c0 0e0b 	rsb	lr, r0, #11
 80071a4:	fa24 f20e 	lsr.w	r2, r4, lr
 80071a8:	42b7      	cmp	r7, r6
 80071aa:	ea42 010c 	orr.w	r1, r2, ip
 80071ae:	bf2c      	ite	cs
 80071b0:	2200      	movcs	r2, #0
 80071b2:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80071b6:	3315      	adds	r3, #21
 80071b8:	fa04 f303 	lsl.w	r3, r4, r3
 80071bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80071c0:	431a      	orrs	r2, r3
 80071c2:	4610      	mov	r0, r2
 80071c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071c6:	42b7      	cmp	r7, r6
 80071c8:	bf2e      	itee	cs
 80071ca:	2200      	movcs	r2, #0
 80071cc:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80071d0:	f1a5 0608 	subcc.w	r6, r5, #8
 80071d4:	3b0b      	subs	r3, #11
 80071d6:	d012      	beq.n	80071fe <__b2d+0x86>
 80071d8:	f1c3 0520 	rsb	r5, r3, #32
 80071dc:	fa22 f105 	lsr.w	r1, r2, r5
 80071e0:	409c      	lsls	r4, r3
 80071e2:	430c      	orrs	r4, r1
 80071e4:	42be      	cmp	r6, r7
 80071e6:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 80071ea:	bf94      	ite	ls
 80071ec:	2400      	movls	r4, #0
 80071ee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80071f2:	409a      	lsls	r2, r3
 80071f4:	40ec      	lsrs	r4, r5
 80071f6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80071fa:	4322      	orrs	r2, r4
 80071fc:	e7e1      	b.n	80071c2 <__b2d+0x4a>
 80071fe:	ea44 010c 	orr.w	r1, r4, ip
 8007202:	e7de      	b.n	80071c2 <__b2d+0x4a>
 8007204:	3ff00000 	.word	0x3ff00000

08007208 <__d2b>:
 8007208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800720a:	2101      	movs	r1, #1
 800720c:	4617      	mov	r7, r2
 800720e:	461c      	mov	r4, r3
 8007210:	9e08      	ldr	r6, [sp, #32]
 8007212:	f7ff fc25 	bl	8006a60 <_Balloc>
 8007216:	4605      	mov	r5, r0
 8007218:	b930      	cbnz	r0, 8007228 <__d2b+0x20>
 800721a:	4602      	mov	r2, r0
 800721c:	f240 310f 	movw	r1, #783	; 0x30f
 8007220:	4b22      	ldr	r3, [pc, #136]	; (80072ac <__d2b+0xa4>)
 8007222:	4823      	ldr	r0, [pc, #140]	; (80072b0 <__d2b+0xa8>)
 8007224:	f001 f9a8 	bl	8008578 <__assert_func>
 8007228:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800722c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007230:	bb24      	cbnz	r4, 800727c <__d2b+0x74>
 8007232:	2f00      	cmp	r7, #0
 8007234:	9301      	str	r3, [sp, #4]
 8007236:	d026      	beq.n	8007286 <__d2b+0x7e>
 8007238:	4668      	mov	r0, sp
 800723a:	9700      	str	r7, [sp, #0]
 800723c:	f7ff fd22 	bl	8006c84 <__lo0bits>
 8007240:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007244:	b1e8      	cbz	r0, 8007282 <__d2b+0x7a>
 8007246:	f1c0 0320 	rsb	r3, r0, #32
 800724a:	fa02 f303 	lsl.w	r3, r2, r3
 800724e:	430b      	orrs	r3, r1
 8007250:	40c2      	lsrs	r2, r0
 8007252:	616b      	str	r3, [r5, #20]
 8007254:	9201      	str	r2, [sp, #4]
 8007256:	9b01      	ldr	r3, [sp, #4]
 8007258:	2b00      	cmp	r3, #0
 800725a:	bf14      	ite	ne
 800725c:	2102      	movne	r1, #2
 800725e:	2101      	moveq	r1, #1
 8007260:	61ab      	str	r3, [r5, #24]
 8007262:	6129      	str	r1, [r5, #16]
 8007264:	b1bc      	cbz	r4, 8007296 <__d2b+0x8e>
 8007266:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800726a:	4404      	add	r4, r0
 800726c:	6034      	str	r4, [r6, #0]
 800726e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007274:	6018      	str	r0, [r3, #0]
 8007276:	4628      	mov	r0, r5
 8007278:	b003      	add	sp, #12
 800727a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800727c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007280:	e7d7      	b.n	8007232 <__d2b+0x2a>
 8007282:	6169      	str	r1, [r5, #20]
 8007284:	e7e7      	b.n	8007256 <__d2b+0x4e>
 8007286:	a801      	add	r0, sp, #4
 8007288:	f7ff fcfc 	bl	8006c84 <__lo0bits>
 800728c:	9b01      	ldr	r3, [sp, #4]
 800728e:	2101      	movs	r1, #1
 8007290:	616b      	str	r3, [r5, #20]
 8007292:	3020      	adds	r0, #32
 8007294:	e7e5      	b.n	8007262 <__d2b+0x5a>
 8007296:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800729a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800729e:	6030      	str	r0, [r6, #0]
 80072a0:	6918      	ldr	r0, [r3, #16]
 80072a2:	f7ff fccf 	bl	8006c44 <__hi0bits>
 80072a6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80072aa:	e7e2      	b.n	8007272 <__d2b+0x6a>
 80072ac:	080093e7 	.word	0x080093e7
 80072b0:	080093f8 	.word	0x080093f8

080072b4 <__ratio>:
 80072b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b8:	4688      	mov	r8, r1
 80072ba:	4669      	mov	r1, sp
 80072bc:	4681      	mov	r9, r0
 80072be:	f7ff ff5b 	bl	8007178 <__b2d>
 80072c2:	460f      	mov	r7, r1
 80072c4:	4604      	mov	r4, r0
 80072c6:	460d      	mov	r5, r1
 80072c8:	4640      	mov	r0, r8
 80072ca:	a901      	add	r1, sp, #4
 80072cc:	f7ff ff54 	bl	8007178 <__b2d>
 80072d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80072d4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80072d8:	468b      	mov	fp, r1
 80072da:	eba3 0c02 	sub.w	ip, r3, r2
 80072de:	e9dd 3200 	ldrd	r3, r2, [sp]
 80072e2:	1a9b      	subs	r3, r3, r2
 80072e4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	bfd5      	itete	le
 80072ec:	460a      	movle	r2, r1
 80072ee:	462a      	movgt	r2, r5
 80072f0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80072f4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80072f8:	bfd8      	it	le
 80072fa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80072fe:	465b      	mov	r3, fp
 8007300:	4602      	mov	r2, r0
 8007302:	4639      	mov	r1, r7
 8007304:	4620      	mov	r0, r4
 8007306:	f7f9 fa11 	bl	800072c <__aeabi_ddiv>
 800730a:	b003      	add	sp, #12
 800730c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007310 <__copybits>:
 8007310:	3901      	subs	r1, #1
 8007312:	b570      	push	{r4, r5, r6, lr}
 8007314:	1149      	asrs	r1, r1, #5
 8007316:	6914      	ldr	r4, [r2, #16]
 8007318:	3101      	adds	r1, #1
 800731a:	f102 0314 	add.w	r3, r2, #20
 800731e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007322:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007326:	1f05      	subs	r5, r0, #4
 8007328:	42a3      	cmp	r3, r4
 800732a:	d30c      	bcc.n	8007346 <__copybits+0x36>
 800732c:	1aa3      	subs	r3, r4, r2
 800732e:	3b11      	subs	r3, #17
 8007330:	f023 0303 	bic.w	r3, r3, #3
 8007334:	3211      	adds	r2, #17
 8007336:	42a2      	cmp	r2, r4
 8007338:	bf88      	it	hi
 800733a:	2300      	movhi	r3, #0
 800733c:	4418      	add	r0, r3
 800733e:	2300      	movs	r3, #0
 8007340:	4288      	cmp	r0, r1
 8007342:	d305      	bcc.n	8007350 <__copybits+0x40>
 8007344:	bd70      	pop	{r4, r5, r6, pc}
 8007346:	f853 6b04 	ldr.w	r6, [r3], #4
 800734a:	f845 6f04 	str.w	r6, [r5, #4]!
 800734e:	e7eb      	b.n	8007328 <__copybits+0x18>
 8007350:	f840 3b04 	str.w	r3, [r0], #4
 8007354:	e7f4      	b.n	8007340 <__copybits+0x30>

08007356 <__any_on>:
 8007356:	f100 0214 	add.w	r2, r0, #20
 800735a:	6900      	ldr	r0, [r0, #16]
 800735c:	114b      	asrs	r3, r1, #5
 800735e:	4298      	cmp	r0, r3
 8007360:	b510      	push	{r4, lr}
 8007362:	db11      	blt.n	8007388 <__any_on+0x32>
 8007364:	dd0a      	ble.n	800737c <__any_on+0x26>
 8007366:	f011 011f 	ands.w	r1, r1, #31
 800736a:	d007      	beq.n	800737c <__any_on+0x26>
 800736c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007370:	fa24 f001 	lsr.w	r0, r4, r1
 8007374:	fa00 f101 	lsl.w	r1, r0, r1
 8007378:	428c      	cmp	r4, r1
 800737a:	d10b      	bne.n	8007394 <__any_on+0x3e>
 800737c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007380:	4293      	cmp	r3, r2
 8007382:	d803      	bhi.n	800738c <__any_on+0x36>
 8007384:	2000      	movs	r0, #0
 8007386:	bd10      	pop	{r4, pc}
 8007388:	4603      	mov	r3, r0
 800738a:	e7f7      	b.n	800737c <__any_on+0x26>
 800738c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007390:	2900      	cmp	r1, #0
 8007392:	d0f5      	beq.n	8007380 <__any_on+0x2a>
 8007394:	2001      	movs	r0, #1
 8007396:	e7f6      	b.n	8007386 <__any_on+0x30>

08007398 <sulp>:
 8007398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800739c:	460f      	mov	r7, r1
 800739e:	4690      	mov	r8, r2
 80073a0:	f7ff feca 	bl	8007138 <__ulp>
 80073a4:	4604      	mov	r4, r0
 80073a6:	460d      	mov	r5, r1
 80073a8:	f1b8 0f00 	cmp.w	r8, #0
 80073ac:	d011      	beq.n	80073d2 <sulp+0x3a>
 80073ae:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80073b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	dd0b      	ble.n	80073d2 <sulp+0x3a>
 80073ba:	2400      	movs	r4, #0
 80073bc:	051b      	lsls	r3, r3, #20
 80073be:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80073c2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80073c6:	4622      	mov	r2, r4
 80073c8:	462b      	mov	r3, r5
 80073ca:	f7f9 f885 	bl	80004d8 <__aeabi_dmul>
 80073ce:	4604      	mov	r4, r0
 80073d0:	460d      	mov	r5, r1
 80073d2:	4620      	mov	r0, r4
 80073d4:	4629      	mov	r1, r5
 80073d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073da:	0000      	movs	r0, r0
 80073dc:	0000      	movs	r0, r0
	...

080073e0 <_strtod_l>:
 80073e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073e4:	b09f      	sub	sp, #124	; 0x7c
 80073e6:	9217      	str	r2, [sp, #92]	; 0x5c
 80073e8:	2200      	movs	r2, #0
 80073ea:	4604      	mov	r4, r0
 80073ec:	921a      	str	r2, [sp, #104]	; 0x68
 80073ee:	460d      	mov	r5, r1
 80073f0:	f04f 0800 	mov.w	r8, #0
 80073f4:	f04f 0900 	mov.w	r9, #0
 80073f8:	460a      	mov	r2, r1
 80073fa:	9219      	str	r2, [sp, #100]	; 0x64
 80073fc:	7811      	ldrb	r1, [r2, #0]
 80073fe:	292b      	cmp	r1, #43	; 0x2b
 8007400:	d04a      	beq.n	8007498 <_strtod_l+0xb8>
 8007402:	d838      	bhi.n	8007476 <_strtod_l+0x96>
 8007404:	290d      	cmp	r1, #13
 8007406:	d832      	bhi.n	800746e <_strtod_l+0x8e>
 8007408:	2908      	cmp	r1, #8
 800740a:	d832      	bhi.n	8007472 <_strtod_l+0x92>
 800740c:	2900      	cmp	r1, #0
 800740e:	d03b      	beq.n	8007488 <_strtod_l+0xa8>
 8007410:	2200      	movs	r2, #0
 8007412:	920e      	str	r2, [sp, #56]	; 0x38
 8007414:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007416:	7832      	ldrb	r2, [r6, #0]
 8007418:	2a30      	cmp	r2, #48	; 0x30
 800741a:	f040 80b2 	bne.w	8007582 <_strtod_l+0x1a2>
 800741e:	7872      	ldrb	r2, [r6, #1]
 8007420:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007424:	2a58      	cmp	r2, #88	; 0x58
 8007426:	d16e      	bne.n	8007506 <_strtod_l+0x126>
 8007428:	9302      	str	r3, [sp, #8]
 800742a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800742c:	4620      	mov	r0, r4
 800742e:	9301      	str	r3, [sp, #4]
 8007430:	ab1a      	add	r3, sp, #104	; 0x68
 8007432:	9300      	str	r3, [sp, #0]
 8007434:	4a8c      	ldr	r2, [pc, #560]	; (8007668 <_strtod_l+0x288>)
 8007436:	ab1b      	add	r3, sp, #108	; 0x6c
 8007438:	a919      	add	r1, sp, #100	; 0x64
 800743a:	f001 f937 	bl	80086ac <__gethex>
 800743e:	f010 070f 	ands.w	r7, r0, #15
 8007442:	4605      	mov	r5, r0
 8007444:	d005      	beq.n	8007452 <_strtod_l+0x72>
 8007446:	2f06      	cmp	r7, #6
 8007448:	d128      	bne.n	800749c <_strtod_l+0xbc>
 800744a:	2300      	movs	r3, #0
 800744c:	3601      	adds	r6, #1
 800744e:	9619      	str	r6, [sp, #100]	; 0x64
 8007450:	930e      	str	r3, [sp, #56]	; 0x38
 8007452:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007454:	2b00      	cmp	r3, #0
 8007456:	f040 85a0 	bne.w	8007f9a <_strtod_l+0xbba>
 800745a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800745c:	b1cb      	cbz	r3, 8007492 <_strtod_l+0xb2>
 800745e:	4642      	mov	r2, r8
 8007460:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007464:	4610      	mov	r0, r2
 8007466:	4619      	mov	r1, r3
 8007468:	b01f      	add	sp, #124	; 0x7c
 800746a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800746e:	2920      	cmp	r1, #32
 8007470:	d1ce      	bne.n	8007410 <_strtod_l+0x30>
 8007472:	3201      	adds	r2, #1
 8007474:	e7c1      	b.n	80073fa <_strtod_l+0x1a>
 8007476:	292d      	cmp	r1, #45	; 0x2d
 8007478:	d1ca      	bne.n	8007410 <_strtod_l+0x30>
 800747a:	2101      	movs	r1, #1
 800747c:	910e      	str	r1, [sp, #56]	; 0x38
 800747e:	1c51      	adds	r1, r2, #1
 8007480:	9119      	str	r1, [sp, #100]	; 0x64
 8007482:	7852      	ldrb	r2, [r2, #1]
 8007484:	2a00      	cmp	r2, #0
 8007486:	d1c5      	bne.n	8007414 <_strtod_l+0x34>
 8007488:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800748a:	9519      	str	r5, [sp, #100]	; 0x64
 800748c:	2b00      	cmp	r3, #0
 800748e:	f040 8582 	bne.w	8007f96 <_strtod_l+0xbb6>
 8007492:	4642      	mov	r2, r8
 8007494:	464b      	mov	r3, r9
 8007496:	e7e5      	b.n	8007464 <_strtod_l+0x84>
 8007498:	2100      	movs	r1, #0
 800749a:	e7ef      	b.n	800747c <_strtod_l+0x9c>
 800749c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800749e:	b13a      	cbz	r2, 80074b0 <_strtod_l+0xd0>
 80074a0:	2135      	movs	r1, #53	; 0x35
 80074a2:	a81c      	add	r0, sp, #112	; 0x70
 80074a4:	f7ff ff34 	bl	8007310 <__copybits>
 80074a8:	4620      	mov	r0, r4
 80074aa:	991a      	ldr	r1, [sp, #104]	; 0x68
 80074ac:	f7ff fb18 	bl	8006ae0 <_Bfree>
 80074b0:	3f01      	subs	r7, #1
 80074b2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80074b4:	2f04      	cmp	r7, #4
 80074b6:	d806      	bhi.n	80074c6 <_strtod_l+0xe6>
 80074b8:	e8df f007 	tbb	[pc, r7]
 80074bc:	201d0314 	.word	0x201d0314
 80074c0:	14          	.byte	0x14
 80074c1:	00          	.byte	0x00
 80074c2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80074c6:	05e9      	lsls	r1, r5, #23
 80074c8:	bf48      	it	mi
 80074ca:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80074ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80074d2:	0d1b      	lsrs	r3, r3, #20
 80074d4:	051b      	lsls	r3, r3, #20
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1bb      	bne.n	8007452 <_strtod_l+0x72>
 80074da:	f7fe fb19 	bl	8005b10 <__errno>
 80074de:	2322      	movs	r3, #34	; 0x22
 80074e0:	6003      	str	r3, [r0, #0]
 80074e2:	e7b6      	b.n	8007452 <_strtod_l+0x72>
 80074e4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80074e8:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80074ec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80074f0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80074f4:	e7e7      	b.n	80074c6 <_strtod_l+0xe6>
 80074f6:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800766c <_strtod_l+0x28c>
 80074fa:	e7e4      	b.n	80074c6 <_strtod_l+0xe6>
 80074fc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007500:	f04f 38ff 	mov.w	r8, #4294967295
 8007504:	e7df      	b.n	80074c6 <_strtod_l+0xe6>
 8007506:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007508:	1c5a      	adds	r2, r3, #1
 800750a:	9219      	str	r2, [sp, #100]	; 0x64
 800750c:	785b      	ldrb	r3, [r3, #1]
 800750e:	2b30      	cmp	r3, #48	; 0x30
 8007510:	d0f9      	beq.n	8007506 <_strtod_l+0x126>
 8007512:	2b00      	cmp	r3, #0
 8007514:	d09d      	beq.n	8007452 <_strtod_l+0x72>
 8007516:	2301      	movs	r3, #1
 8007518:	f04f 0a00 	mov.w	sl, #0
 800751c:	220a      	movs	r2, #10
 800751e:	46d3      	mov	fp, sl
 8007520:	9305      	str	r3, [sp, #20]
 8007522:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007524:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8007528:	930b      	str	r3, [sp, #44]	; 0x2c
 800752a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800752c:	7806      	ldrb	r6, [r0, #0]
 800752e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007532:	b2d9      	uxtb	r1, r3
 8007534:	2909      	cmp	r1, #9
 8007536:	d926      	bls.n	8007586 <_strtod_l+0x1a6>
 8007538:	2201      	movs	r2, #1
 800753a:	494d      	ldr	r1, [pc, #308]	; (8007670 <_strtod_l+0x290>)
 800753c:	f000 ffe6 	bl	800850c <strncmp>
 8007540:	2800      	cmp	r0, #0
 8007542:	d030      	beq.n	80075a6 <_strtod_l+0x1c6>
 8007544:	2000      	movs	r0, #0
 8007546:	4632      	mov	r2, r6
 8007548:	4603      	mov	r3, r0
 800754a:	465e      	mov	r6, fp
 800754c:	9008      	str	r0, [sp, #32]
 800754e:	2a65      	cmp	r2, #101	; 0x65
 8007550:	d001      	beq.n	8007556 <_strtod_l+0x176>
 8007552:	2a45      	cmp	r2, #69	; 0x45
 8007554:	d113      	bne.n	800757e <_strtod_l+0x19e>
 8007556:	b91e      	cbnz	r6, 8007560 <_strtod_l+0x180>
 8007558:	9a05      	ldr	r2, [sp, #20]
 800755a:	4302      	orrs	r2, r0
 800755c:	d094      	beq.n	8007488 <_strtod_l+0xa8>
 800755e:	2600      	movs	r6, #0
 8007560:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007562:	1c6a      	adds	r2, r5, #1
 8007564:	9219      	str	r2, [sp, #100]	; 0x64
 8007566:	786a      	ldrb	r2, [r5, #1]
 8007568:	2a2b      	cmp	r2, #43	; 0x2b
 800756a:	d074      	beq.n	8007656 <_strtod_l+0x276>
 800756c:	2a2d      	cmp	r2, #45	; 0x2d
 800756e:	d078      	beq.n	8007662 <_strtod_l+0x282>
 8007570:	f04f 0c00 	mov.w	ip, #0
 8007574:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007578:	2909      	cmp	r1, #9
 800757a:	d97f      	bls.n	800767c <_strtod_l+0x29c>
 800757c:	9519      	str	r5, [sp, #100]	; 0x64
 800757e:	2700      	movs	r7, #0
 8007580:	e09e      	b.n	80076c0 <_strtod_l+0x2e0>
 8007582:	2300      	movs	r3, #0
 8007584:	e7c8      	b.n	8007518 <_strtod_l+0x138>
 8007586:	f1bb 0f08 	cmp.w	fp, #8
 800758a:	bfd8      	it	le
 800758c:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800758e:	f100 0001 	add.w	r0, r0, #1
 8007592:	bfd6      	itet	le
 8007594:	fb02 3301 	mlale	r3, r2, r1, r3
 8007598:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800759c:	930a      	strle	r3, [sp, #40]	; 0x28
 800759e:	f10b 0b01 	add.w	fp, fp, #1
 80075a2:	9019      	str	r0, [sp, #100]	; 0x64
 80075a4:	e7c1      	b.n	800752a <_strtod_l+0x14a>
 80075a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80075a8:	1c5a      	adds	r2, r3, #1
 80075aa:	9219      	str	r2, [sp, #100]	; 0x64
 80075ac:	785a      	ldrb	r2, [r3, #1]
 80075ae:	f1bb 0f00 	cmp.w	fp, #0
 80075b2:	d037      	beq.n	8007624 <_strtod_l+0x244>
 80075b4:	465e      	mov	r6, fp
 80075b6:	9008      	str	r0, [sp, #32]
 80075b8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80075bc:	2b09      	cmp	r3, #9
 80075be:	d912      	bls.n	80075e6 <_strtod_l+0x206>
 80075c0:	2301      	movs	r3, #1
 80075c2:	e7c4      	b.n	800754e <_strtod_l+0x16e>
 80075c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80075c6:	3001      	adds	r0, #1
 80075c8:	1c5a      	adds	r2, r3, #1
 80075ca:	9219      	str	r2, [sp, #100]	; 0x64
 80075cc:	785a      	ldrb	r2, [r3, #1]
 80075ce:	2a30      	cmp	r2, #48	; 0x30
 80075d0:	d0f8      	beq.n	80075c4 <_strtod_l+0x1e4>
 80075d2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80075d6:	2b08      	cmp	r3, #8
 80075d8:	f200 84e4 	bhi.w	8007fa4 <_strtod_l+0xbc4>
 80075dc:	9008      	str	r0, [sp, #32]
 80075de:	2000      	movs	r0, #0
 80075e0:	4606      	mov	r6, r0
 80075e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80075e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80075e6:	3a30      	subs	r2, #48	; 0x30
 80075e8:	f100 0301 	add.w	r3, r0, #1
 80075ec:	d014      	beq.n	8007618 <_strtod_l+0x238>
 80075ee:	9908      	ldr	r1, [sp, #32]
 80075f0:	eb00 0c06 	add.w	ip, r0, r6
 80075f4:	4419      	add	r1, r3
 80075f6:	9108      	str	r1, [sp, #32]
 80075f8:	4633      	mov	r3, r6
 80075fa:	210a      	movs	r1, #10
 80075fc:	4563      	cmp	r3, ip
 80075fe:	d113      	bne.n	8007628 <_strtod_l+0x248>
 8007600:	1833      	adds	r3, r6, r0
 8007602:	2b08      	cmp	r3, #8
 8007604:	f106 0601 	add.w	r6, r6, #1
 8007608:	4406      	add	r6, r0
 800760a:	dc1a      	bgt.n	8007642 <_strtod_l+0x262>
 800760c:	230a      	movs	r3, #10
 800760e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007610:	fb03 2301 	mla	r3, r3, r1, r2
 8007614:	930a      	str	r3, [sp, #40]	; 0x28
 8007616:	2300      	movs	r3, #0
 8007618:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800761a:	4618      	mov	r0, r3
 800761c:	1c51      	adds	r1, r2, #1
 800761e:	9119      	str	r1, [sp, #100]	; 0x64
 8007620:	7852      	ldrb	r2, [r2, #1]
 8007622:	e7c9      	b.n	80075b8 <_strtod_l+0x1d8>
 8007624:	4658      	mov	r0, fp
 8007626:	e7d2      	b.n	80075ce <_strtod_l+0x1ee>
 8007628:	2b08      	cmp	r3, #8
 800762a:	f103 0301 	add.w	r3, r3, #1
 800762e:	dc03      	bgt.n	8007638 <_strtod_l+0x258>
 8007630:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007632:	434f      	muls	r7, r1
 8007634:	970a      	str	r7, [sp, #40]	; 0x28
 8007636:	e7e1      	b.n	80075fc <_strtod_l+0x21c>
 8007638:	2b10      	cmp	r3, #16
 800763a:	bfd8      	it	le
 800763c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007640:	e7dc      	b.n	80075fc <_strtod_l+0x21c>
 8007642:	2e10      	cmp	r6, #16
 8007644:	bfdc      	itt	le
 8007646:	230a      	movle	r3, #10
 8007648:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800764c:	e7e3      	b.n	8007616 <_strtod_l+0x236>
 800764e:	2300      	movs	r3, #0
 8007650:	9308      	str	r3, [sp, #32]
 8007652:	2301      	movs	r3, #1
 8007654:	e780      	b.n	8007558 <_strtod_l+0x178>
 8007656:	f04f 0c00 	mov.w	ip, #0
 800765a:	1caa      	adds	r2, r5, #2
 800765c:	9219      	str	r2, [sp, #100]	; 0x64
 800765e:	78aa      	ldrb	r2, [r5, #2]
 8007660:	e788      	b.n	8007574 <_strtod_l+0x194>
 8007662:	f04f 0c01 	mov.w	ip, #1
 8007666:	e7f8      	b.n	800765a <_strtod_l+0x27a>
 8007668:	08009558 	.word	0x08009558
 800766c:	7ff00000 	.word	0x7ff00000
 8007670:	08009554 	.word	0x08009554
 8007674:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007676:	1c51      	adds	r1, r2, #1
 8007678:	9119      	str	r1, [sp, #100]	; 0x64
 800767a:	7852      	ldrb	r2, [r2, #1]
 800767c:	2a30      	cmp	r2, #48	; 0x30
 800767e:	d0f9      	beq.n	8007674 <_strtod_l+0x294>
 8007680:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007684:	2908      	cmp	r1, #8
 8007686:	f63f af7a 	bhi.w	800757e <_strtod_l+0x19e>
 800768a:	3a30      	subs	r2, #48	; 0x30
 800768c:	9209      	str	r2, [sp, #36]	; 0x24
 800768e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007690:	920c      	str	r2, [sp, #48]	; 0x30
 8007692:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007694:	1c57      	adds	r7, r2, #1
 8007696:	9719      	str	r7, [sp, #100]	; 0x64
 8007698:	7852      	ldrb	r2, [r2, #1]
 800769a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800769e:	f1be 0f09 	cmp.w	lr, #9
 80076a2:	d938      	bls.n	8007716 <_strtod_l+0x336>
 80076a4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80076a6:	1a7f      	subs	r7, r7, r1
 80076a8:	2f08      	cmp	r7, #8
 80076aa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80076ae:	dc03      	bgt.n	80076b8 <_strtod_l+0x2d8>
 80076b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076b2:	428f      	cmp	r7, r1
 80076b4:	bfa8      	it	ge
 80076b6:	460f      	movge	r7, r1
 80076b8:	f1bc 0f00 	cmp.w	ip, #0
 80076bc:	d000      	beq.n	80076c0 <_strtod_l+0x2e0>
 80076be:	427f      	negs	r7, r7
 80076c0:	2e00      	cmp	r6, #0
 80076c2:	d14f      	bne.n	8007764 <_strtod_l+0x384>
 80076c4:	9905      	ldr	r1, [sp, #20]
 80076c6:	4301      	orrs	r1, r0
 80076c8:	f47f aec3 	bne.w	8007452 <_strtod_l+0x72>
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f47f aedb 	bne.w	8007488 <_strtod_l+0xa8>
 80076d2:	2a69      	cmp	r2, #105	; 0x69
 80076d4:	d029      	beq.n	800772a <_strtod_l+0x34a>
 80076d6:	dc26      	bgt.n	8007726 <_strtod_l+0x346>
 80076d8:	2a49      	cmp	r2, #73	; 0x49
 80076da:	d026      	beq.n	800772a <_strtod_l+0x34a>
 80076dc:	2a4e      	cmp	r2, #78	; 0x4e
 80076de:	f47f aed3 	bne.w	8007488 <_strtod_l+0xa8>
 80076e2:	499a      	ldr	r1, [pc, #616]	; (800794c <_strtod_l+0x56c>)
 80076e4:	a819      	add	r0, sp, #100	; 0x64
 80076e6:	f001 fa23 	bl	8008b30 <__match>
 80076ea:	2800      	cmp	r0, #0
 80076ec:	f43f aecc 	beq.w	8007488 <_strtod_l+0xa8>
 80076f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	2b28      	cmp	r3, #40	; 0x28
 80076f6:	d12f      	bne.n	8007758 <_strtod_l+0x378>
 80076f8:	4995      	ldr	r1, [pc, #596]	; (8007950 <_strtod_l+0x570>)
 80076fa:	aa1c      	add	r2, sp, #112	; 0x70
 80076fc:	a819      	add	r0, sp, #100	; 0x64
 80076fe:	f001 fa2b 	bl	8008b58 <__hexnan>
 8007702:	2805      	cmp	r0, #5
 8007704:	d128      	bne.n	8007758 <_strtod_l+0x378>
 8007706:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007708:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800770c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007710:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007714:	e69d      	b.n	8007452 <_strtod_l+0x72>
 8007716:	210a      	movs	r1, #10
 8007718:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800771a:	fb01 2107 	mla	r1, r1, r7, r2
 800771e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007722:	9209      	str	r2, [sp, #36]	; 0x24
 8007724:	e7b5      	b.n	8007692 <_strtod_l+0x2b2>
 8007726:	2a6e      	cmp	r2, #110	; 0x6e
 8007728:	e7d9      	b.n	80076de <_strtod_l+0x2fe>
 800772a:	498a      	ldr	r1, [pc, #552]	; (8007954 <_strtod_l+0x574>)
 800772c:	a819      	add	r0, sp, #100	; 0x64
 800772e:	f001 f9ff 	bl	8008b30 <__match>
 8007732:	2800      	cmp	r0, #0
 8007734:	f43f aea8 	beq.w	8007488 <_strtod_l+0xa8>
 8007738:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800773a:	4987      	ldr	r1, [pc, #540]	; (8007958 <_strtod_l+0x578>)
 800773c:	3b01      	subs	r3, #1
 800773e:	a819      	add	r0, sp, #100	; 0x64
 8007740:	9319      	str	r3, [sp, #100]	; 0x64
 8007742:	f001 f9f5 	bl	8008b30 <__match>
 8007746:	b910      	cbnz	r0, 800774e <_strtod_l+0x36e>
 8007748:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800774a:	3301      	adds	r3, #1
 800774c:	9319      	str	r3, [sp, #100]	; 0x64
 800774e:	f04f 0800 	mov.w	r8, #0
 8007752:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800795c <_strtod_l+0x57c>
 8007756:	e67c      	b.n	8007452 <_strtod_l+0x72>
 8007758:	4881      	ldr	r0, [pc, #516]	; (8007960 <_strtod_l+0x580>)
 800775a:	f000 ff07 	bl	800856c <nan>
 800775e:	4680      	mov	r8, r0
 8007760:	4689      	mov	r9, r1
 8007762:	e676      	b.n	8007452 <_strtod_l+0x72>
 8007764:	9b08      	ldr	r3, [sp, #32]
 8007766:	f1bb 0f00 	cmp.w	fp, #0
 800776a:	bf08      	it	eq
 800776c:	46b3      	moveq	fp, r6
 800776e:	1afb      	subs	r3, r7, r3
 8007770:	2e10      	cmp	r6, #16
 8007772:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007774:	4635      	mov	r5, r6
 8007776:	9309      	str	r3, [sp, #36]	; 0x24
 8007778:	bfa8      	it	ge
 800777a:	2510      	movge	r5, #16
 800777c:	f7f8 fe32 	bl	80003e4 <__aeabi_ui2d>
 8007780:	2e09      	cmp	r6, #9
 8007782:	4680      	mov	r8, r0
 8007784:	4689      	mov	r9, r1
 8007786:	dd13      	ble.n	80077b0 <_strtod_l+0x3d0>
 8007788:	4b76      	ldr	r3, [pc, #472]	; (8007964 <_strtod_l+0x584>)
 800778a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800778e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007792:	f7f8 fea1 	bl	80004d8 <__aeabi_dmul>
 8007796:	4680      	mov	r8, r0
 8007798:	4650      	mov	r0, sl
 800779a:	4689      	mov	r9, r1
 800779c:	f7f8 fe22 	bl	80003e4 <__aeabi_ui2d>
 80077a0:	4602      	mov	r2, r0
 80077a2:	460b      	mov	r3, r1
 80077a4:	4640      	mov	r0, r8
 80077a6:	4649      	mov	r1, r9
 80077a8:	f7f8 fce0 	bl	800016c <__adddf3>
 80077ac:	4680      	mov	r8, r0
 80077ae:	4689      	mov	r9, r1
 80077b0:	2e0f      	cmp	r6, #15
 80077b2:	dc36      	bgt.n	8007822 <_strtod_l+0x442>
 80077b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	f43f ae4b 	beq.w	8007452 <_strtod_l+0x72>
 80077bc:	dd22      	ble.n	8007804 <_strtod_l+0x424>
 80077be:	2b16      	cmp	r3, #22
 80077c0:	dc09      	bgt.n	80077d6 <_strtod_l+0x3f6>
 80077c2:	4968      	ldr	r1, [pc, #416]	; (8007964 <_strtod_l+0x584>)
 80077c4:	4642      	mov	r2, r8
 80077c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80077ca:	464b      	mov	r3, r9
 80077cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077d0:	f7f8 fe82 	bl	80004d8 <__aeabi_dmul>
 80077d4:	e7c3      	b.n	800775e <_strtod_l+0x37e>
 80077d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077d8:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80077dc:	4293      	cmp	r3, r2
 80077de:	db20      	blt.n	8007822 <_strtod_l+0x442>
 80077e0:	4c60      	ldr	r4, [pc, #384]	; (8007964 <_strtod_l+0x584>)
 80077e2:	f1c6 060f 	rsb	r6, r6, #15
 80077e6:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80077ea:	4642      	mov	r2, r8
 80077ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077f0:	464b      	mov	r3, r9
 80077f2:	f7f8 fe71 	bl	80004d8 <__aeabi_dmul>
 80077f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077f8:	1b9e      	subs	r6, r3, r6
 80077fa:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80077fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007802:	e7e5      	b.n	80077d0 <_strtod_l+0x3f0>
 8007804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007806:	3316      	adds	r3, #22
 8007808:	db0b      	blt.n	8007822 <_strtod_l+0x442>
 800780a:	9b08      	ldr	r3, [sp, #32]
 800780c:	4640      	mov	r0, r8
 800780e:	1bdf      	subs	r7, r3, r7
 8007810:	4b54      	ldr	r3, [pc, #336]	; (8007964 <_strtod_l+0x584>)
 8007812:	4649      	mov	r1, r9
 8007814:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007818:	e9d7 2300 	ldrd	r2, r3, [r7]
 800781c:	f7f8 ff86 	bl	800072c <__aeabi_ddiv>
 8007820:	e79d      	b.n	800775e <_strtod_l+0x37e>
 8007822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007824:	1b75      	subs	r5, r6, r5
 8007826:	441d      	add	r5, r3
 8007828:	2d00      	cmp	r5, #0
 800782a:	dd70      	ble.n	800790e <_strtod_l+0x52e>
 800782c:	f015 030f 	ands.w	r3, r5, #15
 8007830:	d00a      	beq.n	8007848 <_strtod_l+0x468>
 8007832:	494c      	ldr	r1, [pc, #304]	; (8007964 <_strtod_l+0x584>)
 8007834:	4642      	mov	r2, r8
 8007836:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800783a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800783e:	464b      	mov	r3, r9
 8007840:	f7f8 fe4a 	bl	80004d8 <__aeabi_dmul>
 8007844:	4680      	mov	r8, r0
 8007846:	4689      	mov	r9, r1
 8007848:	f035 050f 	bics.w	r5, r5, #15
 800784c:	d04d      	beq.n	80078ea <_strtod_l+0x50a>
 800784e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007852:	dd22      	ble.n	800789a <_strtod_l+0x4ba>
 8007854:	2600      	movs	r6, #0
 8007856:	46b3      	mov	fp, r6
 8007858:	960b      	str	r6, [sp, #44]	; 0x2c
 800785a:	9608      	str	r6, [sp, #32]
 800785c:	2322      	movs	r3, #34	; 0x22
 800785e:	f04f 0800 	mov.w	r8, #0
 8007862:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800795c <_strtod_l+0x57c>
 8007866:	6023      	str	r3, [r4, #0]
 8007868:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800786a:	2b00      	cmp	r3, #0
 800786c:	f43f adf1 	beq.w	8007452 <_strtod_l+0x72>
 8007870:	4620      	mov	r0, r4
 8007872:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007874:	f7ff f934 	bl	8006ae0 <_Bfree>
 8007878:	4620      	mov	r0, r4
 800787a:	9908      	ldr	r1, [sp, #32]
 800787c:	f7ff f930 	bl	8006ae0 <_Bfree>
 8007880:	4659      	mov	r1, fp
 8007882:	4620      	mov	r0, r4
 8007884:	f7ff f92c 	bl	8006ae0 <_Bfree>
 8007888:	4620      	mov	r0, r4
 800788a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800788c:	f7ff f928 	bl	8006ae0 <_Bfree>
 8007890:	4631      	mov	r1, r6
 8007892:	4620      	mov	r0, r4
 8007894:	f7ff f924 	bl	8006ae0 <_Bfree>
 8007898:	e5db      	b.n	8007452 <_strtod_l+0x72>
 800789a:	4b33      	ldr	r3, [pc, #204]	; (8007968 <_strtod_l+0x588>)
 800789c:	4640      	mov	r0, r8
 800789e:	9305      	str	r3, [sp, #20]
 80078a0:	2300      	movs	r3, #0
 80078a2:	4649      	mov	r1, r9
 80078a4:	469a      	mov	sl, r3
 80078a6:	112d      	asrs	r5, r5, #4
 80078a8:	2d01      	cmp	r5, #1
 80078aa:	dc21      	bgt.n	80078f0 <_strtod_l+0x510>
 80078ac:	b10b      	cbz	r3, 80078b2 <_strtod_l+0x4d2>
 80078ae:	4680      	mov	r8, r0
 80078b0:	4689      	mov	r9, r1
 80078b2:	492d      	ldr	r1, [pc, #180]	; (8007968 <_strtod_l+0x588>)
 80078b4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80078b8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80078bc:	4642      	mov	r2, r8
 80078be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078c2:	464b      	mov	r3, r9
 80078c4:	f7f8 fe08 	bl	80004d8 <__aeabi_dmul>
 80078c8:	4b24      	ldr	r3, [pc, #144]	; (800795c <_strtod_l+0x57c>)
 80078ca:	460a      	mov	r2, r1
 80078cc:	400b      	ands	r3, r1
 80078ce:	4927      	ldr	r1, [pc, #156]	; (800796c <_strtod_l+0x58c>)
 80078d0:	4680      	mov	r8, r0
 80078d2:	428b      	cmp	r3, r1
 80078d4:	d8be      	bhi.n	8007854 <_strtod_l+0x474>
 80078d6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80078da:	428b      	cmp	r3, r1
 80078dc:	bf86      	itte	hi
 80078de:	f04f 38ff 	movhi.w	r8, #4294967295
 80078e2:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8007970 <_strtod_l+0x590>
 80078e6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80078ea:	2300      	movs	r3, #0
 80078ec:	9305      	str	r3, [sp, #20]
 80078ee:	e07b      	b.n	80079e8 <_strtod_l+0x608>
 80078f0:	07ea      	lsls	r2, r5, #31
 80078f2:	d505      	bpl.n	8007900 <_strtod_l+0x520>
 80078f4:	9b05      	ldr	r3, [sp, #20]
 80078f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fa:	f7f8 fded 	bl	80004d8 <__aeabi_dmul>
 80078fe:	2301      	movs	r3, #1
 8007900:	9a05      	ldr	r2, [sp, #20]
 8007902:	f10a 0a01 	add.w	sl, sl, #1
 8007906:	3208      	adds	r2, #8
 8007908:	106d      	asrs	r5, r5, #1
 800790a:	9205      	str	r2, [sp, #20]
 800790c:	e7cc      	b.n	80078a8 <_strtod_l+0x4c8>
 800790e:	d0ec      	beq.n	80078ea <_strtod_l+0x50a>
 8007910:	426d      	negs	r5, r5
 8007912:	f015 020f 	ands.w	r2, r5, #15
 8007916:	d00a      	beq.n	800792e <_strtod_l+0x54e>
 8007918:	4b12      	ldr	r3, [pc, #72]	; (8007964 <_strtod_l+0x584>)
 800791a:	4640      	mov	r0, r8
 800791c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007920:	4649      	mov	r1, r9
 8007922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007926:	f7f8 ff01 	bl	800072c <__aeabi_ddiv>
 800792a:	4680      	mov	r8, r0
 800792c:	4689      	mov	r9, r1
 800792e:	112d      	asrs	r5, r5, #4
 8007930:	d0db      	beq.n	80078ea <_strtod_l+0x50a>
 8007932:	2d1f      	cmp	r5, #31
 8007934:	dd1e      	ble.n	8007974 <_strtod_l+0x594>
 8007936:	2600      	movs	r6, #0
 8007938:	46b3      	mov	fp, r6
 800793a:	960b      	str	r6, [sp, #44]	; 0x2c
 800793c:	9608      	str	r6, [sp, #32]
 800793e:	2322      	movs	r3, #34	; 0x22
 8007940:	f04f 0800 	mov.w	r8, #0
 8007944:	f04f 0900 	mov.w	r9, #0
 8007948:	6023      	str	r3, [r4, #0]
 800794a:	e78d      	b.n	8007868 <_strtod_l+0x488>
 800794c:	0800933f 	.word	0x0800933f
 8007950:	0800956c 	.word	0x0800956c
 8007954:	08009337 	.word	0x08009337
 8007958:	0800936e 	.word	0x0800936e
 800795c:	7ff00000 	.word	0x7ff00000
 8007960:	080096fd 	.word	0x080096fd
 8007964:	08009480 	.word	0x08009480
 8007968:	08009458 	.word	0x08009458
 800796c:	7ca00000 	.word	0x7ca00000
 8007970:	7fefffff 	.word	0x7fefffff
 8007974:	f015 0310 	ands.w	r3, r5, #16
 8007978:	bf18      	it	ne
 800797a:	236a      	movne	r3, #106	; 0x6a
 800797c:	4640      	mov	r0, r8
 800797e:	9305      	str	r3, [sp, #20]
 8007980:	4649      	mov	r1, r9
 8007982:	2300      	movs	r3, #0
 8007984:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8007c50 <_strtod_l+0x870>
 8007988:	07ea      	lsls	r2, r5, #31
 800798a:	d504      	bpl.n	8007996 <_strtod_l+0x5b6>
 800798c:	e9da 2300 	ldrd	r2, r3, [sl]
 8007990:	f7f8 fda2 	bl	80004d8 <__aeabi_dmul>
 8007994:	2301      	movs	r3, #1
 8007996:	106d      	asrs	r5, r5, #1
 8007998:	f10a 0a08 	add.w	sl, sl, #8
 800799c:	d1f4      	bne.n	8007988 <_strtod_l+0x5a8>
 800799e:	b10b      	cbz	r3, 80079a4 <_strtod_l+0x5c4>
 80079a0:	4680      	mov	r8, r0
 80079a2:	4689      	mov	r9, r1
 80079a4:	9b05      	ldr	r3, [sp, #20]
 80079a6:	b1bb      	cbz	r3, 80079d8 <_strtod_l+0x5f8>
 80079a8:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80079ac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	4649      	mov	r1, r9
 80079b4:	dd10      	ble.n	80079d8 <_strtod_l+0x5f8>
 80079b6:	2b1f      	cmp	r3, #31
 80079b8:	f340 8128 	ble.w	8007c0c <_strtod_l+0x82c>
 80079bc:	2b34      	cmp	r3, #52	; 0x34
 80079be:	bfd8      	it	le
 80079c0:	f04f 33ff 	movle.w	r3, #4294967295
 80079c4:	f04f 0800 	mov.w	r8, #0
 80079c8:	bfcf      	iteee	gt
 80079ca:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80079ce:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80079d2:	4093      	lslle	r3, r2
 80079d4:	ea03 0901 	andle.w	r9, r3, r1
 80079d8:	2200      	movs	r2, #0
 80079da:	2300      	movs	r3, #0
 80079dc:	4640      	mov	r0, r8
 80079de:	4649      	mov	r1, r9
 80079e0:	f7f8 ffe2 	bl	80009a8 <__aeabi_dcmpeq>
 80079e4:	2800      	cmp	r0, #0
 80079e6:	d1a6      	bne.n	8007936 <_strtod_l+0x556>
 80079e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079ea:	465a      	mov	r2, fp
 80079ec:	9300      	str	r3, [sp, #0]
 80079ee:	4620      	mov	r0, r4
 80079f0:	4633      	mov	r3, r6
 80079f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80079f4:	f7ff f8dc 	bl	8006bb0 <__s2b>
 80079f8:	900b      	str	r0, [sp, #44]	; 0x2c
 80079fa:	2800      	cmp	r0, #0
 80079fc:	f43f af2a 	beq.w	8007854 <_strtod_l+0x474>
 8007a00:	2600      	movs	r6, #0
 8007a02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a04:	9b08      	ldr	r3, [sp, #32]
 8007a06:	2a00      	cmp	r2, #0
 8007a08:	eba3 0307 	sub.w	r3, r3, r7
 8007a0c:	bfa8      	it	ge
 8007a0e:	2300      	movge	r3, #0
 8007a10:	46b3      	mov	fp, r6
 8007a12:	9312      	str	r3, [sp, #72]	; 0x48
 8007a14:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007a18:	9316      	str	r3, [sp, #88]	; 0x58
 8007a1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	6859      	ldr	r1, [r3, #4]
 8007a20:	f7ff f81e 	bl	8006a60 <_Balloc>
 8007a24:	9008      	str	r0, [sp, #32]
 8007a26:	2800      	cmp	r0, #0
 8007a28:	f43f af18 	beq.w	800785c <_strtod_l+0x47c>
 8007a2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a2e:	300c      	adds	r0, #12
 8007a30:	691a      	ldr	r2, [r3, #16]
 8007a32:	f103 010c 	add.w	r1, r3, #12
 8007a36:	3202      	adds	r2, #2
 8007a38:	0092      	lsls	r2, r2, #2
 8007a3a:	f000 fd89 	bl	8008550 <memcpy>
 8007a3e:	ab1c      	add	r3, sp, #112	; 0x70
 8007a40:	9301      	str	r3, [sp, #4]
 8007a42:	ab1b      	add	r3, sp, #108	; 0x6c
 8007a44:	9300      	str	r3, [sp, #0]
 8007a46:	4642      	mov	r2, r8
 8007a48:	464b      	mov	r3, r9
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8007a50:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8007a54:	f7ff fbd8 	bl	8007208 <__d2b>
 8007a58:	901a      	str	r0, [sp, #104]	; 0x68
 8007a5a:	2800      	cmp	r0, #0
 8007a5c:	f43f aefe 	beq.w	800785c <_strtod_l+0x47c>
 8007a60:	2101      	movs	r1, #1
 8007a62:	4620      	mov	r0, r4
 8007a64:	f7ff f93c 	bl	8006ce0 <__i2b>
 8007a68:	4683      	mov	fp, r0
 8007a6a:	2800      	cmp	r0, #0
 8007a6c:	f43f aef6 	beq.w	800785c <_strtod_l+0x47c>
 8007a70:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8007a72:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007a74:	2f00      	cmp	r7, #0
 8007a76:	bfab      	itete	ge
 8007a78:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8007a7a:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007a7c:	eb07 0a03 	addge.w	sl, r7, r3
 8007a80:	1bdd      	sublt	r5, r3, r7
 8007a82:	9b05      	ldr	r3, [sp, #20]
 8007a84:	bfa8      	it	ge
 8007a86:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007a88:	eba7 0703 	sub.w	r7, r7, r3
 8007a8c:	4417      	add	r7, r2
 8007a8e:	4b71      	ldr	r3, [pc, #452]	; (8007c54 <_strtod_l+0x874>)
 8007a90:	f107 37ff 	add.w	r7, r7, #4294967295
 8007a94:	bfb8      	it	lt
 8007a96:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8007a9a:	429f      	cmp	r7, r3
 8007a9c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007aa0:	f280 80c7 	bge.w	8007c32 <_strtod_l+0x852>
 8007aa4:	1bdb      	subs	r3, r3, r7
 8007aa6:	2b1f      	cmp	r3, #31
 8007aa8:	f04f 0101 	mov.w	r1, #1
 8007aac:	eba2 0203 	sub.w	r2, r2, r3
 8007ab0:	f300 80b3 	bgt.w	8007c1a <_strtod_l+0x83a>
 8007ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ab8:	9313      	str	r3, [sp, #76]	; 0x4c
 8007aba:	2300      	movs	r3, #0
 8007abc:	9310      	str	r3, [sp, #64]	; 0x40
 8007abe:	eb0a 0702 	add.w	r7, sl, r2
 8007ac2:	9b05      	ldr	r3, [sp, #20]
 8007ac4:	45ba      	cmp	sl, r7
 8007ac6:	4415      	add	r5, r2
 8007ac8:	441d      	add	r5, r3
 8007aca:	4653      	mov	r3, sl
 8007acc:	bfa8      	it	ge
 8007ace:	463b      	movge	r3, r7
 8007ad0:	42ab      	cmp	r3, r5
 8007ad2:	bfa8      	it	ge
 8007ad4:	462b      	movge	r3, r5
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	bfc2      	ittt	gt
 8007ada:	1aff      	subgt	r7, r7, r3
 8007adc:	1aed      	subgt	r5, r5, r3
 8007ade:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007ae2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	dd17      	ble.n	8007b18 <_strtod_l+0x738>
 8007ae8:	4659      	mov	r1, fp
 8007aea:	461a      	mov	r2, r3
 8007aec:	4620      	mov	r0, r4
 8007aee:	f7ff f9b5 	bl	8006e5c <__pow5mult>
 8007af2:	4683      	mov	fp, r0
 8007af4:	2800      	cmp	r0, #0
 8007af6:	f43f aeb1 	beq.w	800785c <_strtod_l+0x47c>
 8007afa:	4601      	mov	r1, r0
 8007afc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007afe:	4620      	mov	r0, r4
 8007b00:	f7ff f904 	bl	8006d0c <__multiply>
 8007b04:	900a      	str	r0, [sp, #40]	; 0x28
 8007b06:	2800      	cmp	r0, #0
 8007b08:	f43f aea8 	beq.w	800785c <_strtod_l+0x47c>
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007b10:	f7fe ffe6 	bl	8006ae0 <_Bfree>
 8007b14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b16:	931a      	str	r3, [sp, #104]	; 0x68
 8007b18:	2f00      	cmp	r7, #0
 8007b1a:	f300 808f 	bgt.w	8007c3c <_strtod_l+0x85c>
 8007b1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	dd08      	ble.n	8007b36 <_strtod_l+0x756>
 8007b24:	4620      	mov	r0, r4
 8007b26:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007b28:	9908      	ldr	r1, [sp, #32]
 8007b2a:	f7ff f997 	bl	8006e5c <__pow5mult>
 8007b2e:	9008      	str	r0, [sp, #32]
 8007b30:	2800      	cmp	r0, #0
 8007b32:	f43f ae93 	beq.w	800785c <_strtod_l+0x47c>
 8007b36:	2d00      	cmp	r5, #0
 8007b38:	dd08      	ble.n	8007b4c <_strtod_l+0x76c>
 8007b3a:	462a      	mov	r2, r5
 8007b3c:	4620      	mov	r0, r4
 8007b3e:	9908      	ldr	r1, [sp, #32]
 8007b40:	f7ff f9e6 	bl	8006f10 <__lshift>
 8007b44:	9008      	str	r0, [sp, #32]
 8007b46:	2800      	cmp	r0, #0
 8007b48:	f43f ae88 	beq.w	800785c <_strtod_l+0x47c>
 8007b4c:	f1ba 0f00 	cmp.w	sl, #0
 8007b50:	dd08      	ble.n	8007b64 <_strtod_l+0x784>
 8007b52:	4659      	mov	r1, fp
 8007b54:	4652      	mov	r2, sl
 8007b56:	4620      	mov	r0, r4
 8007b58:	f7ff f9da 	bl	8006f10 <__lshift>
 8007b5c:	4683      	mov	fp, r0
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	f43f ae7c 	beq.w	800785c <_strtod_l+0x47c>
 8007b64:	4620      	mov	r0, r4
 8007b66:	9a08      	ldr	r2, [sp, #32]
 8007b68:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007b6a:	f7ff fa59 	bl	8007020 <__mdiff>
 8007b6e:	4606      	mov	r6, r0
 8007b70:	2800      	cmp	r0, #0
 8007b72:	f43f ae73 	beq.w	800785c <_strtod_l+0x47c>
 8007b76:	2500      	movs	r5, #0
 8007b78:	68c3      	ldr	r3, [r0, #12]
 8007b7a:	4659      	mov	r1, fp
 8007b7c:	60c5      	str	r5, [r0, #12]
 8007b7e:	930a      	str	r3, [sp, #40]	; 0x28
 8007b80:	f7ff fa32 	bl	8006fe8 <__mcmp>
 8007b84:	42a8      	cmp	r0, r5
 8007b86:	da6b      	bge.n	8007c60 <_strtod_l+0x880>
 8007b88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b8a:	ea53 0308 	orrs.w	r3, r3, r8
 8007b8e:	f040 808f 	bne.w	8007cb0 <_strtod_l+0x8d0>
 8007b92:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	f040 808a 	bne.w	8007cb0 <_strtod_l+0x8d0>
 8007b9c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007ba0:	0d1b      	lsrs	r3, r3, #20
 8007ba2:	051b      	lsls	r3, r3, #20
 8007ba4:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007ba8:	f240 8082 	bls.w	8007cb0 <_strtod_l+0x8d0>
 8007bac:	6973      	ldr	r3, [r6, #20]
 8007bae:	b913      	cbnz	r3, 8007bb6 <_strtod_l+0x7d6>
 8007bb0:	6933      	ldr	r3, [r6, #16]
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	dd7c      	ble.n	8007cb0 <_strtod_l+0x8d0>
 8007bb6:	4631      	mov	r1, r6
 8007bb8:	2201      	movs	r2, #1
 8007bba:	4620      	mov	r0, r4
 8007bbc:	f7ff f9a8 	bl	8006f10 <__lshift>
 8007bc0:	4659      	mov	r1, fp
 8007bc2:	4606      	mov	r6, r0
 8007bc4:	f7ff fa10 	bl	8006fe8 <__mcmp>
 8007bc8:	2800      	cmp	r0, #0
 8007bca:	dd71      	ble.n	8007cb0 <_strtod_l+0x8d0>
 8007bcc:	9905      	ldr	r1, [sp, #20]
 8007bce:	464b      	mov	r3, r9
 8007bd0:	4a21      	ldr	r2, [pc, #132]	; (8007c58 <_strtod_l+0x878>)
 8007bd2:	2900      	cmp	r1, #0
 8007bd4:	f000 808d 	beq.w	8007cf2 <_strtod_l+0x912>
 8007bd8:	ea02 0109 	and.w	r1, r2, r9
 8007bdc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007be0:	f300 8087 	bgt.w	8007cf2 <_strtod_l+0x912>
 8007be4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007be8:	f77f aea9 	ble.w	800793e <_strtod_l+0x55e>
 8007bec:	4640      	mov	r0, r8
 8007bee:	4649      	mov	r1, r9
 8007bf0:	4b1a      	ldr	r3, [pc, #104]	; (8007c5c <_strtod_l+0x87c>)
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f7f8 fc70 	bl	80004d8 <__aeabi_dmul>
 8007bf8:	4b17      	ldr	r3, [pc, #92]	; (8007c58 <_strtod_l+0x878>)
 8007bfa:	4680      	mov	r8, r0
 8007bfc:	400b      	ands	r3, r1
 8007bfe:	4689      	mov	r9, r1
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f47f ae35 	bne.w	8007870 <_strtod_l+0x490>
 8007c06:	2322      	movs	r3, #34	; 0x22
 8007c08:	6023      	str	r3, [r4, #0]
 8007c0a:	e631      	b.n	8007870 <_strtod_l+0x490>
 8007c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c10:	fa02 f303 	lsl.w	r3, r2, r3
 8007c14:	ea03 0808 	and.w	r8, r3, r8
 8007c18:	e6de      	b.n	80079d8 <_strtod_l+0x5f8>
 8007c1a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8007c1e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8007c22:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8007c26:	37e2      	adds	r7, #226	; 0xe2
 8007c28:	fa01 f307 	lsl.w	r3, r1, r7
 8007c2c:	9310      	str	r3, [sp, #64]	; 0x40
 8007c2e:	9113      	str	r1, [sp, #76]	; 0x4c
 8007c30:	e745      	b.n	8007abe <_strtod_l+0x6de>
 8007c32:	2300      	movs	r3, #0
 8007c34:	9310      	str	r3, [sp, #64]	; 0x40
 8007c36:	2301      	movs	r3, #1
 8007c38:	9313      	str	r3, [sp, #76]	; 0x4c
 8007c3a:	e740      	b.n	8007abe <_strtod_l+0x6de>
 8007c3c:	463a      	mov	r2, r7
 8007c3e:	4620      	mov	r0, r4
 8007c40:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007c42:	f7ff f965 	bl	8006f10 <__lshift>
 8007c46:	901a      	str	r0, [sp, #104]	; 0x68
 8007c48:	2800      	cmp	r0, #0
 8007c4a:	f47f af68 	bne.w	8007b1e <_strtod_l+0x73e>
 8007c4e:	e605      	b.n	800785c <_strtod_l+0x47c>
 8007c50:	08009580 	.word	0x08009580
 8007c54:	fffffc02 	.word	0xfffffc02
 8007c58:	7ff00000 	.word	0x7ff00000
 8007c5c:	39500000 	.word	0x39500000
 8007c60:	46ca      	mov	sl, r9
 8007c62:	d165      	bne.n	8007d30 <_strtod_l+0x950>
 8007c64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c66:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c6a:	b352      	cbz	r2, 8007cc2 <_strtod_l+0x8e2>
 8007c6c:	4a9e      	ldr	r2, [pc, #632]	; (8007ee8 <_strtod_l+0xb08>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d12a      	bne.n	8007cc8 <_strtod_l+0x8e8>
 8007c72:	9b05      	ldr	r3, [sp, #20]
 8007c74:	4641      	mov	r1, r8
 8007c76:	b1fb      	cbz	r3, 8007cb8 <_strtod_l+0x8d8>
 8007c78:	4b9c      	ldr	r3, [pc, #624]	; (8007eec <_strtod_l+0xb0c>)
 8007c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c7e:	ea09 0303 	and.w	r3, r9, r3
 8007c82:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007c86:	d81a      	bhi.n	8007cbe <_strtod_l+0x8de>
 8007c88:	0d1b      	lsrs	r3, r3, #20
 8007c8a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c92:	4299      	cmp	r1, r3
 8007c94:	d118      	bne.n	8007cc8 <_strtod_l+0x8e8>
 8007c96:	4b96      	ldr	r3, [pc, #600]	; (8007ef0 <_strtod_l+0xb10>)
 8007c98:	459a      	cmp	sl, r3
 8007c9a:	d102      	bne.n	8007ca2 <_strtod_l+0x8c2>
 8007c9c:	3101      	adds	r1, #1
 8007c9e:	f43f addd 	beq.w	800785c <_strtod_l+0x47c>
 8007ca2:	f04f 0800 	mov.w	r8, #0
 8007ca6:	4b91      	ldr	r3, [pc, #580]	; (8007eec <_strtod_l+0xb0c>)
 8007ca8:	ea0a 0303 	and.w	r3, sl, r3
 8007cac:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007cb0:	9b05      	ldr	r3, [sp, #20]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d19a      	bne.n	8007bec <_strtod_l+0x80c>
 8007cb6:	e5db      	b.n	8007870 <_strtod_l+0x490>
 8007cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8007cbc:	e7e9      	b.n	8007c92 <_strtod_l+0x8b2>
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	e7e7      	b.n	8007c92 <_strtod_l+0x8b2>
 8007cc2:	ea53 0308 	orrs.w	r3, r3, r8
 8007cc6:	d081      	beq.n	8007bcc <_strtod_l+0x7ec>
 8007cc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007cca:	b1e3      	cbz	r3, 8007d06 <_strtod_l+0x926>
 8007ccc:	ea13 0f0a 	tst.w	r3, sl
 8007cd0:	d0ee      	beq.n	8007cb0 <_strtod_l+0x8d0>
 8007cd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cd4:	4640      	mov	r0, r8
 8007cd6:	4649      	mov	r1, r9
 8007cd8:	9a05      	ldr	r2, [sp, #20]
 8007cda:	b1c3      	cbz	r3, 8007d0e <_strtod_l+0x92e>
 8007cdc:	f7ff fb5c 	bl	8007398 <sulp>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007ce6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007ce8:	f7f8 fa40 	bl	800016c <__adddf3>
 8007cec:	4680      	mov	r8, r0
 8007cee:	4689      	mov	r9, r1
 8007cf0:	e7de      	b.n	8007cb0 <_strtod_l+0x8d0>
 8007cf2:	4013      	ands	r3, r2
 8007cf4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007cf8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007cfc:	f04f 38ff 	mov.w	r8, #4294967295
 8007d00:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007d04:	e7d4      	b.n	8007cb0 <_strtod_l+0x8d0>
 8007d06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d08:	ea13 0f08 	tst.w	r3, r8
 8007d0c:	e7e0      	b.n	8007cd0 <_strtod_l+0x8f0>
 8007d0e:	f7ff fb43 	bl	8007398 <sulp>
 8007d12:	4602      	mov	r2, r0
 8007d14:	460b      	mov	r3, r1
 8007d16:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007d18:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007d1a:	f7f8 fa25 	bl	8000168 <__aeabi_dsub>
 8007d1e:	2200      	movs	r2, #0
 8007d20:	2300      	movs	r3, #0
 8007d22:	4680      	mov	r8, r0
 8007d24:	4689      	mov	r9, r1
 8007d26:	f7f8 fe3f 	bl	80009a8 <__aeabi_dcmpeq>
 8007d2a:	2800      	cmp	r0, #0
 8007d2c:	d0c0      	beq.n	8007cb0 <_strtod_l+0x8d0>
 8007d2e:	e606      	b.n	800793e <_strtod_l+0x55e>
 8007d30:	4659      	mov	r1, fp
 8007d32:	4630      	mov	r0, r6
 8007d34:	f7ff fabe 	bl	80072b4 <__ratio>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007d40:	2200      	movs	r2, #0
 8007d42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007d46:	f7f8 fe43 	bl	80009d0 <__aeabi_dcmple>
 8007d4a:	2800      	cmp	r0, #0
 8007d4c:	d06f      	beq.n	8007e2e <_strtod_l+0xa4e>
 8007d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d17c      	bne.n	8007e4e <_strtod_l+0xa6e>
 8007d54:	f1b8 0f00 	cmp.w	r8, #0
 8007d58:	d159      	bne.n	8007e0e <_strtod_l+0xa2e>
 8007d5a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d17b      	bne.n	8007e5a <_strtod_l+0xa7a>
 8007d62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007d66:	2200      	movs	r2, #0
 8007d68:	4b62      	ldr	r3, [pc, #392]	; (8007ef4 <_strtod_l+0xb14>)
 8007d6a:	f7f8 fe27 	bl	80009bc <__aeabi_dcmplt>
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	d15a      	bne.n	8007e28 <_strtod_l+0xa48>
 8007d72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007d76:	2200      	movs	r2, #0
 8007d78:	4b5f      	ldr	r3, [pc, #380]	; (8007ef8 <_strtod_l+0xb18>)
 8007d7a:	f7f8 fbad 	bl	80004d8 <__aeabi_dmul>
 8007d7e:	4605      	mov	r5, r0
 8007d80:	460f      	mov	r7, r1
 8007d82:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007d86:	9506      	str	r5, [sp, #24]
 8007d88:	9307      	str	r3, [sp, #28]
 8007d8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d8e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007d92:	4b56      	ldr	r3, [pc, #344]	; (8007eec <_strtod_l+0xb0c>)
 8007d94:	4a55      	ldr	r2, [pc, #340]	; (8007eec <_strtod_l+0xb0c>)
 8007d96:	ea0a 0303 	and.w	r3, sl, r3
 8007d9a:	9313      	str	r3, [sp, #76]	; 0x4c
 8007d9c:	4b57      	ldr	r3, [pc, #348]	; (8007efc <_strtod_l+0xb1c>)
 8007d9e:	ea0a 0202 	and.w	r2, sl, r2
 8007da2:	429a      	cmp	r2, r3
 8007da4:	f040 80b0 	bne.w	8007f08 <_strtod_l+0xb28>
 8007da8:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007dac:	4640      	mov	r0, r8
 8007dae:	4649      	mov	r1, r9
 8007db0:	f7ff f9c2 	bl	8007138 <__ulp>
 8007db4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007db8:	f7f8 fb8e 	bl	80004d8 <__aeabi_dmul>
 8007dbc:	4642      	mov	r2, r8
 8007dbe:	464b      	mov	r3, r9
 8007dc0:	f7f8 f9d4 	bl	800016c <__adddf3>
 8007dc4:	f8df a124 	ldr.w	sl, [pc, #292]	; 8007eec <_strtod_l+0xb0c>
 8007dc8:	4a4d      	ldr	r2, [pc, #308]	; (8007f00 <_strtod_l+0xb20>)
 8007dca:	ea01 0a0a 	and.w	sl, r1, sl
 8007dce:	4592      	cmp	sl, r2
 8007dd0:	4680      	mov	r8, r0
 8007dd2:	d948      	bls.n	8007e66 <_strtod_l+0xa86>
 8007dd4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007dd6:	4b46      	ldr	r3, [pc, #280]	; (8007ef0 <_strtod_l+0xb10>)
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d103      	bne.n	8007de4 <_strtod_l+0xa04>
 8007ddc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007dde:	3301      	adds	r3, #1
 8007de0:	f43f ad3c 	beq.w	800785c <_strtod_l+0x47c>
 8007de4:	f04f 38ff 	mov.w	r8, #4294967295
 8007de8:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8007ef0 <_strtod_l+0xb10>
 8007dec:	4620      	mov	r0, r4
 8007dee:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007df0:	f7fe fe76 	bl	8006ae0 <_Bfree>
 8007df4:	4620      	mov	r0, r4
 8007df6:	9908      	ldr	r1, [sp, #32]
 8007df8:	f7fe fe72 	bl	8006ae0 <_Bfree>
 8007dfc:	4659      	mov	r1, fp
 8007dfe:	4620      	mov	r0, r4
 8007e00:	f7fe fe6e 	bl	8006ae0 <_Bfree>
 8007e04:	4631      	mov	r1, r6
 8007e06:	4620      	mov	r0, r4
 8007e08:	f7fe fe6a 	bl	8006ae0 <_Bfree>
 8007e0c:	e605      	b.n	8007a1a <_strtod_l+0x63a>
 8007e0e:	f1b8 0f01 	cmp.w	r8, #1
 8007e12:	d103      	bne.n	8007e1c <_strtod_l+0xa3c>
 8007e14:	f1b9 0f00 	cmp.w	r9, #0
 8007e18:	f43f ad91 	beq.w	800793e <_strtod_l+0x55e>
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	4b39      	ldr	r3, [pc, #228]	; (8007f04 <_strtod_l+0xb24>)
 8007e20:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007e22:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007e26:	e016      	b.n	8007e56 <_strtod_l+0xa76>
 8007e28:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007e2a:	4f33      	ldr	r7, [pc, #204]	; (8007ef8 <_strtod_l+0xb18>)
 8007e2c:	e7a9      	b.n	8007d82 <_strtod_l+0x9a2>
 8007e2e:	4b32      	ldr	r3, [pc, #200]	; (8007ef8 <_strtod_l+0xb18>)
 8007e30:	2200      	movs	r2, #0
 8007e32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007e36:	f7f8 fb4f 	bl	80004d8 <__aeabi_dmul>
 8007e3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e3c:	4605      	mov	r5, r0
 8007e3e:	460f      	mov	r7, r1
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d09e      	beq.n	8007d82 <_strtod_l+0x9a2>
 8007e44:	4602      	mov	r2, r0
 8007e46:	460b      	mov	r3, r1
 8007e48:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007e4c:	e79d      	b.n	8007d8a <_strtod_l+0x9aa>
 8007e4e:	2200      	movs	r2, #0
 8007e50:	4b28      	ldr	r3, [pc, #160]	; (8007ef4 <_strtod_l+0xb14>)
 8007e52:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007e56:	4f27      	ldr	r7, [pc, #156]	; (8007ef4 <_strtod_l+0xb14>)
 8007e58:	e797      	b.n	8007d8a <_strtod_l+0x9aa>
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	4b29      	ldr	r3, [pc, #164]	; (8007f04 <_strtod_l+0xb24>)
 8007e5e:	4645      	mov	r5, r8
 8007e60:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007e64:	e7f7      	b.n	8007e56 <_strtod_l+0xa76>
 8007e66:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8007e6a:	9b05      	ldr	r3, [sp, #20]
 8007e6c:	46ca      	mov	sl, r9
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1bc      	bne.n	8007dec <_strtod_l+0xa0c>
 8007e72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007e76:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007e78:	0d1b      	lsrs	r3, r3, #20
 8007e7a:	051b      	lsls	r3, r3, #20
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d1b5      	bne.n	8007dec <_strtod_l+0xa0c>
 8007e80:	4628      	mov	r0, r5
 8007e82:	4639      	mov	r1, r7
 8007e84:	f7f9 f8e6 	bl	8001054 <__aeabi_d2lz>
 8007e88:	f7f8 faf8 	bl	800047c <__aeabi_l2d>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	460b      	mov	r3, r1
 8007e90:	4628      	mov	r0, r5
 8007e92:	4639      	mov	r1, r7
 8007e94:	f7f8 f968 	bl	8000168 <__aeabi_dsub>
 8007e98:	460b      	mov	r3, r1
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8007ea0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007ea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ea6:	ea4a 0a08 	orr.w	sl, sl, r8
 8007eaa:	ea5a 0a03 	orrs.w	sl, sl, r3
 8007eae:	d06c      	beq.n	8007f8a <_strtod_l+0xbaa>
 8007eb0:	a309      	add	r3, pc, #36	; (adr r3, 8007ed8 <_strtod_l+0xaf8>)
 8007eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb6:	f7f8 fd81 	bl	80009bc <__aeabi_dcmplt>
 8007eba:	2800      	cmp	r0, #0
 8007ebc:	f47f acd8 	bne.w	8007870 <_strtod_l+0x490>
 8007ec0:	a307      	add	r3, pc, #28	; (adr r3, 8007ee0 <_strtod_l+0xb00>)
 8007ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007eca:	f7f8 fd95 	bl	80009f8 <__aeabi_dcmpgt>
 8007ece:	2800      	cmp	r0, #0
 8007ed0:	d08c      	beq.n	8007dec <_strtod_l+0xa0c>
 8007ed2:	e4cd      	b.n	8007870 <_strtod_l+0x490>
 8007ed4:	f3af 8000 	nop.w
 8007ed8:	94a03595 	.word	0x94a03595
 8007edc:	3fdfffff 	.word	0x3fdfffff
 8007ee0:	35afe535 	.word	0x35afe535
 8007ee4:	3fe00000 	.word	0x3fe00000
 8007ee8:	000fffff 	.word	0x000fffff
 8007eec:	7ff00000 	.word	0x7ff00000
 8007ef0:	7fefffff 	.word	0x7fefffff
 8007ef4:	3ff00000 	.word	0x3ff00000
 8007ef8:	3fe00000 	.word	0x3fe00000
 8007efc:	7fe00000 	.word	0x7fe00000
 8007f00:	7c9fffff 	.word	0x7c9fffff
 8007f04:	bff00000 	.word	0xbff00000
 8007f08:	9b05      	ldr	r3, [sp, #20]
 8007f0a:	b333      	cbz	r3, 8007f5a <_strtod_l+0xb7a>
 8007f0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007f0e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007f12:	d822      	bhi.n	8007f5a <_strtod_l+0xb7a>
 8007f14:	a328      	add	r3, pc, #160	; (adr r3, 8007fb8 <_strtod_l+0xbd8>)
 8007f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	4639      	mov	r1, r7
 8007f1e:	f7f8 fd57 	bl	80009d0 <__aeabi_dcmple>
 8007f22:	b1a0      	cbz	r0, 8007f4e <_strtod_l+0xb6e>
 8007f24:	4639      	mov	r1, r7
 8007f26:	4628      	mov	r0, r5
 8007f28:	f7f8 fdae 	bl	8000a88 <__aeabi_d2uiz>
 8007f2c:	2801      	cmp	r0, #1
 8007f2e:	bf38      	it	cc
 8007f30:	2001      	movcc	r0, #1
 8007f32:	f7f8 fa57 	bl	80003e4 <__aeabi_ui2d>
 8007f36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f38:	4605      	mov	r5, r0
 8007f3a:	460f      	mov	r7, r1
 8007f3c:	bb03      	cbnz	r3, 8007f80 <_strtod_l+0xba0>
 8007f3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f42:	9014      	str	r0, [sp, #80]	; 0x50
 8007f44:	9315      	str	r3, [sp, #84]	; 0x54
 8007f46:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007f4a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007f4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007f52:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007f56:	1a9b      	subs	r3, r3, r2
 8007f58:	9311      	str	r3, [sp, #68]	; 0x44
 8007f5a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007f5c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007f5e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8007f62:	f7ff f8e9 	bl	8007138 <__ulp>
 8007f66:	4602      	mov	r2, r0
 8007f68:	460b      	mov	r3, r1
 8007f6a:	4640      	mov	r0, r8
 8007f6c:	4649      	mov	r1, r9
 8007f6e:	f7f8 fab3 	bl	80004d8 <__aeabi_dmul>
 8007f72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f76:	f7f8 f8f9 	bl	800016c <__adddf3>
 8007f7a:	4680      	mov	r8, r0
 8007f7c:	4689      	mov	r9, r1
 8007f7e:	e774      	b.n	8007e6a <_strtod_l+0xa8a>
 8007f80:	4602      	mov	r2, r0
 8007f82:	460b      	mov	r3, r1
 8007f84:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007f88:	e7dd      	b.n	8007f46 <_strtod_l+0xb66>
 8007f8a:	a30d      	add	r3, pc, #52	; (adr r3, 8007fc0 <_strtod_l+0xbe0>)
 8007f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f90:	f7f8 fd14 	bl	80009bc <__aeabi_dcmplt>
 8007f94:	e79b      	b.n	8007ece <_strtod_l+0xaee>
 8007f96:	2300      	movs	r3, #0
 8007f98:	930e      	str	r3, [sp, #56]	; 0x38
 8007f9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007f9c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007f9e:	6013      	str	r3, [r2, #0]
 8007fa0:	f7ff ba5b 	b.w	800745a <_strtod_l+0x7a>
 8007fa4:	2a65      	cmp	r2, #101	; 0x65
 8007fa6:	f43f ab52 	beq.w	800764e <_strtod_l+0x26e>
 8007faa:	2a45      	cmp	r2, #69	; 0x45
 8007fac:	f43f ab4f 	beq.w	800764e <_strtod_l+0x26e>
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	f7ff bb87 	b.w	80076c4 <_strtod_l+0x2e4>
 8007fb6:	bf00      	nop
 8007fb8:	ffc00000 	.word	0xffc00000
 8007fbc:	41dfffff 	.word	0x41dfffff
 8007fc0:	94a03595 	.word	0x94a03595
 8007fc4:	3fcfffff 	.word	0x3fcfffff

08007fc8 <_strtod_r>:
 8007fc8:	4b01      	ldr	r3, [pc, #4]	; (8007fd0 <_strtod_r+0x8>)
 8007fca:	f7ff ba09 	b.w	80073e0 <_strtod_l>
 8007fce:	bf00      	nop
 8007fd0:	20000068 	.word	0x20000068

08007fd4 <_strtol_l.constprop.0>:
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fda:	4686      	mov	lr, r0
 8007fdc:	4690      	mov	r8, r2
 8007fde:	d001      	beq.n	8007fe4 <_strtol_l.constprop.0+0x10>
 8007fe0:	2b24      	cmp	r3, #36	; 0x24
 8007fe2:	d906      	bls.n	8007ff2 <_strtol_l.constprop.0+0x1e>
 8007fe4:	f7fd fd94 	bl	8005b10 <__errno>
 8007fe8:	2316      	movs	r3, #22
 8007fea:	6003      	str	r3, [r0, #0]
 8007fec:	2000      	movs	r0, #0
 8007fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ff2:	460d      	mov	r5, r1
 8007ff4:	4835      	ldr	r0, [pc, #212]	; (80080cc <_strtol_l.constprop.0+0xf8>)
 8007ff6:	462a      	mov	r2, r5
 8007ff8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ffc:	5d06      	ldrb	r6, [r0, r4]
 8007ffe:	f016 0608 	ands.w	r6, r6, #8
 8008002:	d1f8      	bne.n	8007ff6 <_strtol_l.constprop.0+0x22>
 8008004:	2c2d      	cmp	r4, #45	; 0x2d
 8008006:	d12e      	bne.n	8008066 <_strtol_l.constprop.0+0x92>
 8008008:	2601      	movs	r6, #1
 800800a:	782c      	ldrb	r4, [r5, #0]
 800800c:	1c95      	adds	r5, r2, #2
 800800e:	2b00      	cmp	r3, #0
 8008010:	d057      	beq.n	80080c2 <_strtol_l.constprop.0+0xee>
 8008012:	2b10      	cmp	r3, #16
 8008014:	d109      	bne.n	800802a <_strtol_l.constprop.0+0x56>
 8008016:	2c30      	cmp	r4, #48	; 0x30
 8008018:	d107      	bne.n	800802a <_strtol_l.constprop.0+0x56>
 800801a:	782a      	ldrb	r2, [r5, #0]
 800801c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008020:	2a58      	cmp	r2, #88	; 0x58
 8008022:	d149      	bne.n	80080b8 <_strtol_l.constprop.0+0xe4>
 8008024:	2310      	movs	r3, #16
 8008026:	786c      	ldrb	r4, [r5, #1]
 8008028:	3502      	adds	r5, #2
 800802a:	2200      	movs	r2, #0
 800802c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8008030:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008034:	fbbc f9f3 	udiv	r9, ip, r3
 8008038:	4610      	mov	r0, r2
 800803a:	fb03 ca19 	mls	sl, r3, r9, ip
 800803e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008042:	2f09      	cmp	r7, #9
 8008044:	d814      	bhi.n	8008070 <_strtol_l.constprop.0+0x9c>
 8008046:	463c      	mov	r4, r7
 8008048:	42a3      	cmp	r3, r4
 800804a:	dd20      	ble.n	800808e <_strtol_l.constprop.0+0xba>
 800804c:	1c57      	adds	r7, r2, #1
 800804e:	d007      	beq.n	8008060 <_strtol_l.constprop.0+0x8c>
 8008050:	4581      	cmp	r9, r0
 8008052:	d319      	bcc.n	8008088 <_strtol_l.constprop.0+0xb4>
 8008054:	d101      	bne.n	800805a <_strtol_l.constprop.0+0x86>
 8008056:	45a2      	cmp	sl, r4
 8008058:	db16      	blt.n	8008088 <_strtol_l.constprop.0+0xb4>
 800805a:	2201      	movs	r2, #1
 800805c:	fb00 4003 	mla	r0, r0, r3, r4
 8008060:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008064:	e7eb      	b.n	800803e <_strtol_l.constprop.0+0x6a>
 8008066:	2c2b      	cmp	r4, #43	; 0x2b
 8008068:	bf04      	itt	eq
 800806a:	782c      	ldrbeq	r4, [r5, #0]
 800806c:	1c95      	addeq	r5, r2, #2
 800806e:	e7ce      	b.n	800800e <_strtol_l.constprop.0+0x3a>
 8008070:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008074:	2f19      	cmp	r7, #25
 8008076:	d801      	bhi.n	800807c <_strtol_l.constprop.0+0xa8>
 8008078:	3c37      	subs	r4, #55	; 0x37
 800807a:	e7e5      	b.n	8008048 <_strtol_l.constprop.0+0x74>
 800807c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008080:	2f19      	cmp	r7, #25
 8008082:	d804      	bhi.n	800808e <_strtol_l.constprop.0+0xba>
 8008084:	3c57      	subs	r4, #87	; 0x57
 8008086:	e7df      	b.n	8008048 <_strtol_l.constprop.0+0x74>
 8008088:	f04f 32ff 	mov.w	r2, #4294967295
 800808c:	e7e8      	b.n	8008060 <_strtol_l.constprop.0+0x8c>
 800808e:	1c53      	adds	r3, r2, #1
 8008090:	d108      	bne.n	80080a4 <_strtol_l.constprop.0+0xd0>
 8008092:	2322      	movs	r3, #34	; 0x22
 8008094:	4660      	mov	r0, ip
 8008096:	f8ce 3000 	str.w	r3, [lr]
 800809a:	f1b8 0f00 	cmp.w	r8, #0
 800809e:	d0a6      	beq.n	8007fee <_strtol_l.constprop.0+0x1a>
 80080a0:	1e69      	subs	r1, r5, #1
 80080a2:	e006      	b.n	80080b2 <_strtol_l.constprop.0+0xde>
 80080a4:	b106      	cbz	r6, 80080a8 <_strtol_l.constprop.0+0xd4>
 80080a6:	4240      	negs	r0, r0
 80080a8:	f1b8 0f00 	cmp.w	r8, #0
 80080ac:	d09f      	beq.n	8007fee <_strtol_l.constprop.0+0x1a>
 80080ae:	2a00      	cmp	r2, #0
 80080b0:	d1f6      	bne.n	80080a0 <_strtol_l.constprop.0+0xcc>
 80080b2:	f8c8 1000 	str.w	r1, [r8]
 80080b6:	e79a      	b.n	8007fee <_strtol_l.constprop.0+0x1a>
 80080b8:	2430      	movs	r4, #48	; 0x30
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d1b5      	bne.n	800802a <_strtol_l.constprop.0+0x56>
 80080be:	2308      	movs	r3, #8
 80080c0:	e7b3      	b.n	800802a <_strtol_l.constprop.0+0x56>
 80080c2:	2c30      	cmp	r4, #48	; 0x30
 80080c4:	d0a9      	beq.n	800801a <_strtol_l.constprop.0+0x46>
 80080c6:	230a      	movs	r3, #10
 80080c8:	e7af      	b.n	800802a <_strtol_l.constprop.0+0x56>
 80080ca:	bf00      	nop
 80080cc:	080095a9 	.word	0x080095a9

080080d0 <_strtol_r>:
 80080d0:	f7ff bf80 	b.w	8007fd4 <_strtol_l.constprop.0>

080080d4 <__ssputs_r>:
 80080d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080d8:	461f      	mov	r7, r3
 80080da:	688e      	ldr	r6, [r1, #8]
 80080dc:	4682      	mov	sl, r0
 80080de:	42be      	cmp	r6, r7
 80080e0:	460c      	mov	r4, r1
 80080e2:	4690      	mov	r8, r2
 80080e4:	680b      	ldr	r3, [r1, #0]
 80080e6:	d82c      	bhi.n	8008142 <__ssputs_r+0x6e>
 80080e8:	898a      	ldrh	r2, [r1, #12]
 80080ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80080ee:	d026      	beq.n	800813e <__ssputs_r+0x6a>
 80080f0:	6965      	ldr	r5, [r4, #20]
 80080f2:	6909      	ldr	r1, [r1, #16]
 80080f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080f8:	eba3 0901 	sub.w	r9, r3, r1
 80080fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008100:	1c7b      	adds	r3, r7, #1
 8008102:	444b      	add	r3, r9
 8008104:	106d      	asrs	r5, r5, #1
 8008106:	429d      	cmp	r5, r3
 8008108:	bf38      	it	cc
 800810a:	461d      	movcc	r5, r3
 800810c:	0553      	lsls	r3, r2, #21
 800810e:	d527      	bpl.n	8008160 <__ssputs_r+0x8c>
 8008110:	4629      	mov	r1, r5
 8008112:	f7fe fc19 	bl	8006948 <_malloc_r>
 8008116:	4606      	mov	r6, r0
 8008118:	b360      	cbz	r0, 8008174 <__ssputs_r+0xa0>
 800811a:	464a      	mov	r2, r9
 800811c:	6921      	ldr	r1, [r4, #16]
 800811e:	f000 fa17 	bl	8008550 <memcpy>
 8008122:	89a3      	ldrh	r3, [r4, #12]
 8008124:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800812c:	81a3      	strh	r3, [r4, #12]
 800812e:	6126      	str	r6, [r4, #16]
 8008130:	444e      	add	r6, r9
 8008132:	6026      	str	r6, [r4, #0]
 8008134:	463e      	mov	r6, r7
 8008136:	6165      	str	r5, [r4, #20]
 8008138:	eba5 0509 	sub.w	r5, r5, r9
 800813c:	60a5      	str	r5, [r4, #8]
 800813e:	42be      	cmp	r6, r7
 8008140:	d900      	bls.n	8008144 <__ssputs_r+0x70>
 8008142:	463e      	mov	r6, r7
 8008144:	4632      	mov	r2, r6
 8008146:	4641      	mov	r1, r8
 8008148:	6820      	ldr	r0, [r4, #0]
 800814a:	f000 f9c5 	bl	80084d8 <memmove>
 800814e:	2000      	movs	r0, #0
 8008150:	68a3      	ldr	r3, [r4, #8]
 8008152:	1b9b      	subs	r3, r3, r6
 8008154:	60a3      	str	r3, [r4, #8]
 8008156:	6823      	ldr	r3, [r4, #0]
 8008158:	4433      	add	r3, r6
 800815a:	6023      	str	r3, [r4, #0]
 800815c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008160:	462a      	mov	r2, r5
 8008162:	f000 fda6 	bl	8008cb2 <_realloc_r>
 8008166:	4606      	mov	r6, r0
 8008168:	2800      	cmp	r0, #0
 800816a:	d1e0      	bne.n	800812e <__ssputs_r+0x5a>
 800816c:	4650      	mov	r0, sl
 800816e:	6921      	ldr	r1, [r4, #16]
 8008170:	f7fe fb7a 	bl	8006868 <_free_r>
 8008174:	230c      	movs	r3, #12
 8008176:	f8ca 3000 	str.w	r3, [sl]
 800817a:	89a3      	ldrh	r3, [r4, #12]
 800817c:	f04f 30ff 	mov.w	r0, #4294967295
 8008180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008184:	81a3      	strh	r3, [r4, #12]
 8008186:	e7e9      	b.n	800815c <__ssputs_r+0x88>

08008188 <_svfiprintf_r>:
 8008188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800818c:	4698      	mov	r8, r3
 800818e:	898b      	ldrh	r3, [r1, #12]
 8008190:	4607      	mov	r7, r0
 8008192:	061b      	lsls	r3, r3, #24
 8008194:	460d      	mov	r5, r1
 8008196:	4614      	mov	r4, r2
 8008198:	b09d      	sub	sp, #116	; 0x74
 800819a:	d50e      	bpl.n	80081ba <_svfiprintf_r+0x32>
 800819c:	690b      	ldr	r3, [r1, #16]
 800819e:	b963      	cbnz	r3, 80081ba <_svfiprintf_r+0x32>
 80081a0:	2140      	movs	r1, #64	; 0x40
 80081a2:	f7fe fbd1 	bl	8006948 <_malloc_r>
 80081a6:	6028      	str	r0, [r5, #0]
 80081a8:	6128      	str	r0, [r5, #16]
 80081aa:	b920      	cbnz	r0, 80081b6 <_svfiprintf_r+0x2e>
 80081ac:	230c      	movs	r3, #12
 80081ae:	603b      	str	r3, [r7, #0]
 80081b0:	f04f 30ff 	mov.w	r0, #4294967295
 80081b4:	e0d0      	b.n	8008358 <_svfiprintf_r+0x1d0>
 80081b6:	2340      	movs	r3, #64	; 0x40
 80081b8:	616b      	str	r3, [r5, #20]
 80081ba:	2300      	movs	r3, #0
 80081bc:	9309      	str	r3, [sp, #36]	; 0x24
 80081be:	2320      	movs	r3, #32
 80081c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081c4:	2330      	movs	r3, #48	; 0x30
 80081c6:	f04f 0901 	mov.w	r9, #1
 80081ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80081ce:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008370 <_svfiprintf_r+0x1e8>
 80081d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081d6:	4623      	mov	r3, r4
 80081d8:	469a      	mov	sl, r3
 80081da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081de:	b10a      	cbz	r2, 80081e4 <_svfiprintf_r+0x5c>
 80081e0:	2a25      	cmp	r2, #37	; 0x25
 80081e2:	d1f9      	bne.n	80081d8 <_svfiprintf_r+0x50>
 80081e4:	ebba 0b04 	subs.w	fp, sl, r4
 80081e8:	d00b      	beq.n	8008202 <_svfiprintf_r+0x7a>
 80081ea:	465b      	mov	r3, fp
 80081ec:	4622      	mov	r2, r4
 80081ee:	4629      	mov	r1, r5
 80081f0:	4638      	mov	r0, r7
 80081f2:	f7ff ff6f 	bl	80080d4 <__ssputs_r>
 80081f6:	3001      	adds	r0, #1
 80081f8:	f000 80a9 	beq.w	800834e <_svfiprintf_r+0x1c6>
 80081fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081fe:	445a      	add	r2, fp
 8008200:	9209      	str	r2, [sp, #36]	; 0x24
 8008202:	f89a 3000 	ldrb.w	r3, [sl]
 8008206:	2b00      	cmp	r3, #0
 8008208:	f000 80a1 	beq.w	800834e <_svfiprintf_r+0x1c6>
 800820c:	2300      	movs	r3, #0
 800820e:	f04f 32ff 	mov.w	r2, #4294967295
 8008212:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008216:	f10a 0a01 	add.w	sl, sl, #1
 800821a:	9304      	str	r3, [sp, #16]
 800821c:	9307      	str	r3, [sp, #28]
 800821e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008222:	931a      	str	r3, [sp, #104]	; 0x68
 8008224:	4654      	mov	r4, sl
 8008226:	2205      	movs	r2, #5
 8008228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800822c:	4850      	ldr	r0, [pc, #320]	; (8008370 <_svfiprintf_r+0x1e8>)
 800822e:	f7fd fc9b 	bl	8005b68 <memchr>
 8008232:	9a04      	ldr	r2, [sp, #16]
 8008234:	b9d8      	cbnz	r0, 800826e <_svfiprintf_r+0xe6>
 8008236:	06d0      	lsls	r0, r2, #27
 8008238:	bf44      	itt	mi
 800823a:	2320      	movmi	r3, #32
 800823c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008240:	0711      	lsls	r1, r2, #28
 8008242:	bf44      	itt	mi
 8008244:	232b      	movmi	r3, #43	; 0x2b
 8008246:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800824a:	f89a 3000 	ldrb.w	r3, [sl]
 800824e:	2b2a      	cmp	r3, #42	; 0x2a
 8008250:	d015      	beq.n	800827e <_svfiprintf_r+0xf6>
 8008252:	4654      	mov	r4, sl
 8008254:	2000      	movs	r0, #0
 8008256:	f04f 0c0a 	mov.w	ip, #10
 800825a:	9a07      	ldr	r2, [sp, #28]
 800825c:	4621      	mov	r1, r4
 800825e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008262:	3b30      	subs	r3, #48	; 0x30
 8008264:	2b09      	cmp	r3, #9
 8008266:	d94d      	bls.n	8008304 <_svfiprintf_r+0x17c>
 8008268:	b1b0      	cbz	r0, 8008298 <_svfiprintf_r+0x110>
 800826a:	9207      	str	r2, [sp, #28]
 800826c:	e014      	b.n	8008298 <_svfiprintf_r+0x110>
 800826e:	eba0 0308 	sub.w	r3, r0, r8
 8008272:	fa09 f303 	lsl.w	r3, r9, r3
 8008276:	4313      	orrs	r3, r2
 8008278:	46a2      	mov	sl, r4
 800827a:	9304      	str	r3, [sp, #16]
 800827c:	e7d2      	b.n	8008224 <_svfiprintf_r+0x9c>
 800827e:	9b03      	ldr	r3, [sp, #12]
 8008280:	1d19      	adds	r1, r3, #4
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	9103      	str	r1, [sp, #12]
 8008286:	2b00      	cmp	r3, #0
 8008288:	bfbb      	ittet	lt
 800828a:	425b      	neglt	r3, r3
 800828c:	f042 0202 	orrlt.w	r2, r2, #2
 8008290:	9307      	strge	r3, [sp, #28]
 8008292:	9307      	strlt	r3, [sp, #28]
 8008294:	bfb8      	it	lt
 8008296:	9204      	strlt	r2, [sp, #16]
 8008298:	7823      	ldrb	r3, [r4, #0]
 800829a:	2b2e      	cmp	r3, #46	; 0x2e
 800829c:	d10c      	bne.n	80082b8 <_svfiprintf_r+0x130>
 800829e:	7863      	ldrb	r3, [r4, #1]
 80082a0:	2b2a      	cmp	r3, #42	; 0x2a
 80082a2:	d134      	bne.n	800830e <_svfiprintf_r+0x186>
 80082a4:	9b03      	ldr	r3, [sp, #12]
 80082a6:	3402      	adds	r4, #2
 80082a8:	1d1a      	adds	r2, r3, #4
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	9203      	str	r2, [sp, #12]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	bfb8      	it	lt
 80082b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80082b6:	9305      	str	r3, [sp, #20]
 80082b8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008374 <_svfiprintf_r+0x1ec>
 80082bc:	2203      	movs	r2, #3
 80082be:	4650      	mov	r0, sl
 80082c0:	7821      	ldrb	r1, [r4, #0]
 80082c2:	f7fd fc51 	bl	8005b68 <memchr>
 80082c6:	b138      	cbz	r0, 80082d8 <_svfiprintf_r+0x150>
 80082c8:	2240      	movs	r2, #64	; 0x40
 80082ca:	9b04      	ldr	r3, [sp, #16]
 80082cc:	eba0 000a 	sub.w	r0, r0, sl
 80082d0:	4082      	lsls	r2, r0
 80082d2:	4313      	orrs	r3, r2
 80082d4:	3401      	adds	r4, #1
 80082d6:	9304      	str	r3, [sp, #16]
 80082d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082dc:	2206      	movs	r2, #6
 80082de:	4826      	ldr	r0, [pc, #152]	; (8008378 <_svfiprintf_r+0x1f0>)
 80082e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082e4:	f7fd fc40 	bl	8005b68 <memchr>
 80082e8:	2800      	cmp	r0, #0
 80082ea:	d038      	beq.n	800835e <_svfiprintf_r+0x1d6>
 80082ec:	4b23      	ldr	r3, [pc, #140]	; (800837c <_svfiprintf_r+0x1f4>)
 80082ee:	bb1b      	cbnz	r3, 8008338 <_svfiprintf_r+0x1b0>
 80082f0:	9b03      	ldr	r3, [sp, #12]
 80082f2:	3307      	adds	r3, #7
 80082f4:	f023 0307 	bic.w	r3, r3, #7
 80082f8:	3308      	adds	r3, #8
 80082fa:	9303      	str	r3, [sp, #12]
 80082fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082fe:	4433      	add	r3, r6
 8008300:	9309      	str	r3, [sp, #36]	; 0x24
 8008302:	e768      	b.n	80081d6 <_svfiprintf_r+0x4e>
 8008304:	460c      	mov	r4, r1
 8008306:	2001      	movs	r0, #1
 8008308:	fb0c 3202 	mla	r2, ip, r2, r3
 800830c:	e7a6      	b.n	800825c <_svfiprintf_r+0xd4>
 800830e:	2300      	movs	r3, #0
 8008310:	f04f 0c0a 	mov.w	ip, #10
 8008314:	4619      	mov	r1, r3
 8008316:	3401      	adds	r4, #1
 8008318:	9305      	str	r3, [sp, #20]
 800831a:	4620      	mov	r0, r4
 800831c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008320:	3a30      	subs	r2, #48	; 0x30
 8008322:	2a09      	cmp	r2, #9
 8008324:	d903      	bls.n	800832e <_svfiprintf_r+0x1a6>
 8008326:	2b00      	cmp	r3, #0
 8008328:	d0c6      	beq.n	80082b8 <_svfiprintf_r+0x130>
 800832a:	9105      	str	r1, [sp, #20]
 800832c:	e7c4      	b.n	80082b8 <_svfiprintf_r+0x130>
 800832e:	4604      	mov	r4, r0
 8008330:	2301      	movs	r3, #1
 8008332:	fb0c 2101 	mla	r1, ip, r1, r2
 8008336:	e7f0      	b.n	800831a <_svfiprintf_r+0x192>
 8008338:	ab03      	add	r3, sp, #12
 800833a:	9300      	str	r3, [sp, #0]
 800833c:	462a      	mov	r2, r5
 800833e:	4638      	mov	r0, r7
 8008340:	4b0f      	ldr	r3, [pc, #60]	; (8008380 <_svfiprintf_r+0x1f8>)
 8008342:	a904      	add	r1, sp, #16
 8008344:	f7fc fca0 	bl	8004c88 <_printf_float>
 8008348:	1c42      	adds	r2, r0, #1
 800834a:	4606      	mov	r6, r0
 800834c:	d1d6      	bne.n	80082fc <_svfiprintf_r+0x174>
 800834e:	89ab      	ldrh	r3, [r5, #12]
 8008350:	065b      	lsls	r3, r3, #25
 8008352:	f53f af2d 	bmi.w	80081b0 <_svfiprintf_r+0x28>
 8008356:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008358:	b01d      	add	sp, #116	; 0x74
 800835a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800835e:	ab03      	add	r3, sp, #12
 8008360:	9300      	str	r3, [sp, #0]
 8008362:	462a      	mov	r2, r5
 8008364:	4638      	mov	r0, r7
 8008366:	4b06      	ldr	r3, [pc, #24]	; (8008380 <_svfiprintf_r+0x1f8>)
 8008368:	a904      	add	r1, sp, #16
 800836a:	f7fc ff2d 	bl	80051c8 <_printf_i>
 800836e:	e7eb      	b.n	8008348 <_svfiprintf_r+0x1c0>
 8008370:	080096a9 	.word	0x080096a9
 8008374:	080096af 	.word	0x080096af
 8008378:	080096b3 	.word	0x080096b3
 800837c:	08004c89 	.word	0x08004c89
 8008380:	080080d5 	.word	0x080080d5

08008384 <__sflush_r>:
 8008384:	898a      	ldrh	r2, [r1, #12]
 8008386:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008388:	4605      	mov	r5, r0
 800838a:	0710      	lsls	r0, r2, #28
 800838c:	460c      	mov	r4, r1
 800838e:	d457      	bmi.n	8008440 <__sflush_r+0xbc>
 8008390:	684b      	ldr	r3, [r1, #4]
 8008392:	2b00      	cmp	r3, #0
 8008394:	dc04      	bgt.n	80083a0 <__sflush_r+0x1c>
 8008396:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008398:	2b00      	cmp	r3, #0
 800839a:	dc01      	bgt.n	80083a0 <__sflush_r+0x1c>
 800839c:	2000      	movs	r0, #0
 800839e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083a2:	2e00      	cmp	r6, #0
 80083a4:	d0fa      	beq.n	800839c <__sflush_r+0x18>
 80083a6:	2300      	movs	r3, #0
 80083a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80083ac:	682f      	ldr	r7, [r5, #0]
 80083ae:	6a21      	ldr	r1, [r4, #32]
 80083b0:	602b      	str	r3, [r5, #0]
 80083b2:	d032      	beq.n	800841a <__sflush_r+0x96>
 80083b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80083b6:	89a3      	ldrh	r3, [r4, #12]
 80083b8:	075a      	lsls	r2, r3, #29
 80083ba:	d505      	bpl.n	80083c8 <__sflush_r+0x44>
 80083bc:	6863      	ldr	r3, [r4, #4]
 80083be:	1ac0      	subs	r0, r0, r3
 80083c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80083c2:	b10b      	cbz	r3, 80083c8 <__sflush_r+0x44>
 80083c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80083c6:	1ac0      	subs	r0, r0, r3
 80083c8:	2300      	movs	r3, #0
 80083ca:	4602      	mov	r2, r0
 80083cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083ce:	4628      	mov	r0, r5
 80083d0:	6a21      	ldr	r1, [r4, #32]
 80083d2:	47b0      	blx	r6
 80083d4:	1c43      	adds	r3, r0, #1
 80083d6:	89a3      	ldrh	r3, [r4, #12]
 80083d8:	d106      	bne.n	80083e8 <__sflush_r+0x64>
 80083da:	6829      	ldr	r1, [r5, #0]
 80083dc:	291d      	cmp	r1, #29
 80083de:	d82b      	bhi.n	8008438 <__sflush_r+0xb4>
 80083e0:	4a28      	ldr	r2, [pc, #160]	; (8008484 <__sflush_r+0x100>)
 80083e2:	410a      	asrs	r2, r1
 80083e4:	07d6      	lsls	r6, r2, #31
 80083e6:	d427      	bmi.n	8008438 <__sflush_r+0xb4>
 80083e8:	2200      	movs	r2, #0
 80083ea:	6062      	str	r2, [r4, #4]
 80083ec:	6922      	ldr	r2, [r4, #16]
 80083ee:	04d9      	lsls	r1, r3, #19
 80083f0:	6022      	str	r2, [r4, #0]
 80083f2:	d504      	bpl.n	80083fe <__sflush_r+0x7a>
 80083f4:	1c42      	adds	r2, r0, #1
 80083f6:	d101      	bne.n	80083fc <__sflush_r+0x78>
 80083f8:	682b      	ldr	r3, [r5, #0]
 80083fa:	b903      	cbnz	r3, 80083fe <__sflush_r+0x7a>
 80083fc:	6560      	str	r0, [r4, #84]	; 0x54
 80083fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008400:	602f      	str	r7, [r5, #0]
 8008402:	2900      	cmp	r1, #0
 8008404:	d0ca      	beq.n	800839c <__sflush_r+0x18>
 8008406:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800840a:	4299      	cmp	r1, r3
 800840c:	d002      	beq.n	8008414 <__sflush_r+0x90>
 800840e:	4628      	mov	r0, r5
 8008410:	f7fe fa2a 	bl	8006868 <_free_r>
 8008414:	2000      	movs	r0, #0
 8008416:	6360      	str	r0, [r4, #52]	; 0x34
 8008418:	e7c1      	b.n	800839e <__sflush_r+0x1a>
 800841a:	2301      	movs	r3, #1
 800841c:	4628      	mov	r0, r5
 800841e:	47b0      	blx	r6
 8008420:	1c41      	adds	r1, r0, #1
 8008422:	d1c8      	bne.n	80083b6 <__sflush_r+0x32>
 8008424:	682b      	ldr	r3, [r5, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d0c5      	beq.n	80083b6 <__sflush_r+0x32>
 800842a:	2b1d      	cmp	r3, #29
 800842c:	d001      	beq.n	8008432 <__sflush_r+0xae>
 800842e:	2b16      	cmp	r3, #22
 8008430:	d101      	bne.n	8008436 <__sflush_r+0xb2>
 8008432:	602f      	str	r7, [r5, #0]
 8008434:	e7b2      	b.n	800839c <__sflush_r+0x18>
 8008436:	89a3      	ldrh	r3, [r4, #12]
 8008438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800843c:	81a3      	strh	r3, [r4, #12]
 800843e:	e7ae      	b.n	800839e <__sflush_r+0x1a>
 8008440:	690f      	ldr	r7, [r1, #16]
 8008442:	2f00      	cmp	r7, #0
 8008444:	d0aa      	beq.n	800839c <__sflush_r+0x18>
 8008446:	0793      	lsls	r3, r2, #30
 8008448:	bf18      	it	ne
 800844a:	2300      	movne	r3, #0
 800844c:	680e      	ldr	r6, [r1, #0]
 800844e:	bf08      	it	eq
 8008450:	694b      	ldreq	r3, [r1, #20]
 8008452:	1bf6      	subs	r6, r6, r7
 8008454:	600f      	str	r7, [r1, #0]
 8008456:	608b      	str	r3, [r1, #8]
 8008458:	2e00      	cmp	r6, #0
 800845a:	dd9f      	ble.n	800839c <__sflush_r+0x18>
 800845c:	4633      	mov	r3, r6
 800845e:	463a      	mov	r2, r7
 8008460:	4628      	mov	r0, r5
 8008462:	6a21      	ldr	r1, [r4, #32]
 8008464:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008468:	47e0      	blx	ip
 800846a:	2800      	cmp	r0, #0
 800846c:	dc06      	bgt.n	800847c <__sflush_r+0xf8>
 800846e:	89a3      	ldrh	r3, [r4, #12]
 8008470:	f04f 30ff 	mov.w	r0, #4294967295
 8008474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008478:	81a3      	strh	r3, [r4, #12]
 800847a:	e790      	b.n	800839e <__sflush_r+0x1a>
 800847c:	4407      	add	r7, r0
 800847e:	1a36      	subs	r6, r6, r0
 8008480:	e7ea      	b.n	8008458 <__sflush_r+0xd4>
 8008482:	bf00      	nop
 8008484:	dfbffffe 	.word	0xdfbffffe

08008488 <_fflush_r>:
 8008488:	b538      	push	{r3, r4, r5, lr}
 800848a:	690b      	ldr	r3, [r1, #16]
 800848c:	4605      	mov	r5, r0
 800848e:	460c      	mov	r4, r1
 8008490:	b913      	cbnz	r3, 8008498 <_fflush_r+0x10>
 8008492:	2500      	movs	r5, #0
 8008494:	4628      	mov	r0, r5
 8008496:	bd38      	pop	{r3, r4, r5, pc}
 8008498:	b118      	cbz	r0, 80084a2 <_fflush_r+0x1a>
 800849a:	6a03      	ldr	r3, [r0, #32]
 800849c:	b90b      	cbnz	r3, 80084a2 <_fflush_r+0x1a>
 800849e:	f7fd fa3d 	bl	800591c <__sinit>
 80084a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d0f3      	beq.n	8008492 <_fflush_r+0xa>
 80084aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80084ac:	07d0      	lsls	r0, r2, #31
 80084ae:	d404      	bmi.n	80084ba <_fflush_r+0x32>
 80084b0:	0599      	lsls	r1, r3, #22
 80084b2:	d402      	bmi.n	80084ba <_fflush_r+0x32>
 80084b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084b6:	f7fd fb55 	bl	8005b64 <__retarget_lock_acquire_recursive>
 80084ba:	4628      	mov	r0, r5
 80084bc:	4621      	mov	r1, r4
 80084be:	f7ff ff61 	bl	8008384 <__sflush_r>
 80084c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084c4:	4605      	mov	r5, r0
 80084c6:	07da      	lsls	r2, r3, #31
 80084c8:	d4e4      	bmi.n	8008494 <_fflush_r+0xc>
 80084ca:	89a3      	ldrh	r3, [r4, #12]
 80084cc:	059b      	lsls	r3, r3, #22
 80084ce:	d4e1      	bmi.n	8008494 <_fflush_r+0xc>
 80084d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084d2:	f7fd fb48 	bl	8005b66 <__retarget_lock_release_recursive>
 80084d6:	e7dd      	b.n	8008494 <_fflush_r+0xc>

080084d8 <memmove>:
 80084d8:	4288      	cmp	r0, r1
 80084da:	b510      	push	{r4, lr}
 80084dc:	eb01 0402 	add.w	r4, r1, r2
 80084e0:	d902      	bls.n	80084e8 <memmove+0x10>
 80084e2:	4284      	cmp	r4, r0
 80084e4:	4623      	mov	r3, r4
 80084e6:	d807      	bhi.n	80084f8 <memmove+0x20>
 80084e8:	1e43      	subs	r3, r0, #1
 80084ea:	42a1      	cmp	r1, r4
 80084ec:	d008      	beq.n	8008500 <memmove+0x28>
 80084ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80084f6:	e7f8      	b.n	80084ea <memmove+0x12>
 80084f8:	4601      	mov	r1, r0
 80084fa:	4402      	add	r2, r0
 80084fc:	428a      	cmp	r2, r1
 80084fe:	d100      	bne.n	8008502 <memmove+0x2a>
 8008500:	bd10      	pop	{r4, pc}
 8008502:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008506:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800850a:	e7f7      	b.n	80084fc <memmove+0x24>

0800850c <strncmp>:
 800850c:	b510      	push	{r4, lr}
 800850e:	b16a      	cbz	r2, 800852c <strncmp+0x20>
 8008510:	3901      	subs	r1, #1
 8008512:	1884      	adds	r4, r0, r2
 8008514:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008518:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800851c:	429a      	cmp	r2, r3
 800851e:	d103      	bne.n	8008528 <strncmp+0x1c>
 8008520:	42a0      	cmp	r0, r4
 8008522:	d001      	beq.n	8008528 <strncmp+0x1c>
 8008524:	2a00      	cmp	r2, #0
 8008526:	d1f5      	bne.n	8008514 <strncmp+0x8>
 8008528:	1ad0      	subs	r0, r2, r3
 800852a:	bd10      	pop	{r4, pc}
 800852c:	4610      	mov	r0, r2
 800852e:	e7fc      	b.n	800852a <strncmp+0x1e>

08008530 <_sbrk_r>:
 8008530:	b538      	push	{r3, r4, r5, lr}
 8008532:	2300      	movs	r3, #0
 8008534:	4d05      	ldr	r5, [pc, #20]	; (800854c <_sbrk_r+0x1c>)
 8008536:	4604      	mov	r4, r0
 8008538:	4608      	mov	r0, r1
 800853a:	602b      	str	r3, [r5, #0]
 800853c:	f7f9 fe56 	bl	80021ec <_sbrk>
 8008540:	1c43      	adds	r3, r0, #1
 8008542:	d102      	bne.n	800854a <_sbrk_r+0x1a>
 8008544:	682b      	ldr	r3, [r5, #0]
 8008546:	b103      	cbz	r3, 800854a <_sbrk_r+0x1a>
 8008548:	6023      	str	r3, [r4, #0]
 800854a:	bd38      	pop	{r3, r4, r5, pc}
 800854c:	200004b0 	.word	0x200004b0

08008550 <memcpy>:
 8008550:	440a      	add	r2, r1
 8008552:	4291      	cmp	r1, r2
 8008554:	f100 33ff 	add.w	r3, r0, #4294967295
 8008558:	d100      	bne.n	800855c <memcpy+0xc>
 800855a:	4770      	bx	lr
 800855c:	b510      	push	{r4, lr}
 800855e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008562:	4291      	cmp	r1, r2
 8008564:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008568:	d1f9      	bne.n	800855e <memcpy+0xe>
 800856a:	bd10      	pop	{r4, pc}

0800856c <nan>:
 800856c:	2000      	movs	r0, #0
 800856e:	4901      	ldr	r1, [pc, #4]	; (8008574 <nan+0x8>)
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	7ff80000 	.word	0x7ff80000

08008578 <__assert_func>:
 8008578:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800857a:	4614      	mov	r4, r2
 800857c:	461a      	mov	r2, r3
 800857e:	4b09      	ldr	r3, [pc, #36]	; (80085a4 <__assert_func+0x2c>)
 8008580:	4605      	mov	r5, r0
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68d8      	ldr	r0, [r3, #12]
 8008586:	b14c      	cbz	r4, 800859c <__assert_func+0x24>
 8008588:	4b07      	ldr	r3, [pc, #28]	; (80085a8 <__assert_func+0x30>)
 800858a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800858e:	9100      	str	r1, [sp, #0]
 8008590:	462b      	mov	r3, r5
 8008592:	4906      	ldr	r1, [pc, #24]	; (80085ac <__assert_func+0x34>)
 8008594:	f000 fbca 	bl	8008d2c <fiprintf>
 8008598:	f000 fbda 	bl	8008d50 <abort>
 800859c:	4b04      	ldr	r3, [pc, #16]	; (80085b0 <__assert_func+0x38>)
 800859e:	461c      	mov	r4, r3
 80085a0:	e7f3      	b.n	800858a <__assert_func+0x12>
 80085a2:	bf00      	nop
 80085a4:	20000064 	.word	0x20000064
 80085a8:	080096c2 	.word	0x080096c2
 80085ac:	080096cf 	.word	0x080096cf
 80085b0:	080096fd 	.word	0x080096fd

080085b4 <_calloc_r>:
 80085b4:	b570      	push	{r4, r5, r6, lr}
 80085b6:	fba1 5402 	umull	r5, r4, r1, r2
 80085ba:	b934      	cbnz	r4, 80085ca <_calloc_r+0x16>
 80085bc:	4629      	mov	r1, r5
 80085be:	f7fe f9c3 	bl	8006948 <_malloc_r>
 80085c2:	4606      	mov	r6, r0
 80085c4:	b928      	cbnz	r0, 80085d2 <_calloc_r+0x1e>
 80085c6:	4630      	mov	r0, r6
 80085c8:	bd70      	pop	{r4, r5, r6, pc}
 80085ca:	220c      	movs	r2, #12
 80085cc:	2600      	movs	r6, #0
 80085ce:	6002      	str	r2, [r0, #0]
 80085d0:	e7f9      	b.n	80085c6 <_calloc_r+0x12>
 80085d2:	462a      	mov	r2, r5
 80085d4:	4621      	mov	r1, r4
 80085d6:	f7fd fa3a 	bl	8005a4e <memset>
 80085da:	e7f4      	b.n	80085c6 <_calloc_r+0x12>

080085dc <rshift>:
 80085dc:	6903      	ldr	r3, [r0, #16]
 80085de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80085e2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80085e6:	f100 0414 	add.w	r4, r0, #20
 80085ea:	ea4f 1261 	mov.w	r2, r1, asr #5
 80085ee:	dd46      	ble.n	800867e <rshift+0xa2>
 80085f0:	f011 011f 	ands.w	r1, r1, #31
 80085f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80085f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80085fc:	d10c      	bne.n	8008618 <rshift+0x3c>
 80085fe:	4629      	mov	r1, r5
 8008600:	f100 0710 	add.w	r7, r0, #16
 8008604:	42b1      	cmp	r1, r6
 8008606:	d335      	bcc.n	8008674 <rshift+0x98>
 8008608:	1a9b      	subs	r3, r3, r2
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	1eea      	subs	r2, r5, #3
 800860e:	4296      	cmp	r6, r2
 8008610:	bf38      	it	cc
 8008612:	2300      	movcc	r3, #0
 8008614:	4423      	add	r3, r4
 8008616:	e015      	b.n	8008644 <rshift+0x68>
 8008618:	46a1      	mov	r9, r4
 800861a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800861e:	f1c1 0820 	rsb	r8, r1, #32
 8008622:	40cf      	lsrs	r7, r1
 8008624:	f105 0e04 	add.w	lr, r5, #4
 8008628:	4576      	cmp	r6, lr
 800862a:	46f4      	mov	ip, lr
 800862c:	d816      	bhi.n	800865c <rshift+0x80>
 800862e:	1a9a      	subs	r2, r3, r2
 8008630:	0092      	lsls	r2, r2, #2
 8008632:	3a04      	subs	r2, #4
 8008634:	3501      	adds	r5, #1
 8008636:	42ae      	cmp	r6, r5
 8008638:	bf38      	it	cc
 800863a:	2200      	movcc	r2, #0
 800863c:	18a3      	adds	r3, r4, r2
 800863e:	50a7      	str	r7, [r4, r2]
 8008640:	b107      	cbz	r7, 8008644 <rshift+0x68>
 8008642:	3304      	adds	r3, #4
 8008644:	42a3      	cmp	r3, r4
 8008646:	eba3 0204 	sub.w	r2, r3, r4
 800864a:	bf08      	it	eq
 800864c:	2300      	moveq	r3, #0
 800864e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008652:	6102      	str	r2, [r0, #16]
 8008654:	bf08      	it	eq
 8008656:	6143      	streq	r3, [r0, #20]
 8008658:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800865c:	f8dc c000 	ldr.w	ip, [ip]
 8008660:	fa0c fc08 	lsl.w	ip, ip, r8
 8008664:	ea4c 0707 	orr.w	r7, ip, r7
 8008668:	f849 7b04 	str.w	r7, [r9], #4
 800866c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008670:	40cf      	lsrs	r7, r1
 8008672:	e7d9      	b.n	8008628 <rshift+0x4c>
 8008674:	f851 cb04 	ldr.w	ip, [r1], #4
 8008678:	f847 cf04 	str.w	ip, [r7, #4]!
 800867c:	e7c2      	b.n	8008604 <rshift+0x28>
 800867e:	4623      	mov	r3, r4
 8008680:	e7e0      	b.n	8008644 <rshift+0x68>

08008682 <__hexdig_fun>:
 8008682:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008686:	2b09      	cmp	r3, #9
 8008688:	d802      	bhi.n	8008690 <__hexdig_fun+0xe>
 800868a:	3820      	subs	r0, #32
 800868c:	b2c0      	uxtb	r0, r0
 800868e:	4770      	bx	lr
 8008690:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008694:	2b05      	cmp	r3, #5
 8008696:	d801      	bhi.n	800869c <__hexdig_fun+0x1a>
 8008698:	3847      	subs	r0, #71	; 0x47
 800869a:	e7f7      	b.n	800868c <__hexdig_fun+0xa>
 800869c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80086a0:	2b05      	cmp	r3, #5
 80086a2:	d801      	bhi.n	80086a8 <__hexdig_fun+0x26>
 80086a4:	3827      	subs	r0, #39	; 0x27
 80086a6:	e7f1      	b.n	800868c <__hexdig_fun+0xa>
 80086a8:	2000      	movs	r0, #0
 80086aa:	4770      	bx	lr

080086ac <__gethex>:
 80086ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086b0:	4681      	mov	r9, r0
 80086b2:	468a      	mov	sl, r1
 80086b4:	4617      	mov	r7, r2
 80086b6:	680a      	ldr	r2, [r1, #0]
 80086b8:	b085      	sub	sp, #20
 80086ba:	f102 0b02 	add.w	fp, r2, #2
 80086be:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80086c2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80086c6:	9302      	str	r3, [sp, #8]
 80086c8:	32fe      	adds	r2, #254	; 0xfe
 80086ca:	eb02 030b 	add.w	r3, r2, fp
 80086ce:	46d8      	mov	r8, fp
 80086d0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80086d4:	9301      	str	r3, [sp, #4]
 80086d6:	2830      	cmp	r0, #48	; 0x30
 80086d8:	d0f7      	beq.n	80086ca <__gethex+0x1e>
 80086da:	f7ff ffd2 	bl	8008682 <__hexdig_fun>
 80086de:	4604      	mov	r4, r0
 80086e0:	2800      	cmp	r0, #0
 80086e2:	d138      	bne.n	8008756 <__gethex+0xaa>
 80086e4:	2201      	movs	r2, #1
 80086e6:	4640      	mov	r0, r8
 80086e8:	49a7      	ldr	r1, [pc, #668]	; (8008988 <__gethex+0x2dc>)
 80086ea:	f7ff ff0f 	bl	800850c <strncmp>
 80086ee:	4606      	mov	r6, r0
 80086f0:	2800      	cmp	r0, #0
 80086f2:	d169      	bne.n	80087c8 <__gethex+0x11c>
 80086f4:	f898 0001 	ldrb.w	r0, [r8, #1]
 80086f8:	465d      	mov	r5, fp
 80086fa:	f7ff ffc2 	bl	8008682 <__hexdig_fun>
 80086fe:	2800      	cmp	r0, #0
 8008700:	d064      	beq.n	80087cc <__gethex+0x120>
 8008702:	465a      	mov	r2, fp
 8008704:	7810      	ldrb	r0, [r2, #0]
 8008706:	4690      	mov	r8, r2
 8008708:	2830      	cmp	r0, #48	; 0x30
 800870a:	f102 0201 	add.w	r2, r2, #1
 800870e:	d0f9      	beq.n	8008704 <__gethex+0x58>
 8008710:	f7ff ffb7 	bl	8008682 <__hexdig_fun>
 8008714:	2301      	movs	r3, #1
 8008716:	fab0 f480 	clz	r4, r0
 800871a:	465e      	mov	r6, fp
 800871c:	0964      	lsrs	r4, r4, #5
 800871e:	9301      	str	r3, [sp, #4]
 8008720:	4642      	mov	r2, r8
 8008722:	4615      	mov	r5, r2
 8008724:	7828      	ldrb	r0, [r5, #0]
 8008726:	3201      	adds	r2, #1
 8008728:	f7ff ffab 	bl	8008682 <__hexdig_fun>
 800872c:	2800      	cmp	r0, #0
 800872e:	d1f8      	bne.n	8008722 <__gethex+0x76>
 8008730:	2201      	movs	r2, #1
 8008732:	4628      	mov	r0, r5
 8008734:	4994      	ldr	r1, [pc, #592]	; (8008988 <__gethex+0x2dc>)
 8008736:	f7ff fee9 	bl	800850c <strncmp>
 800873a:	b978      	cbnz	r0, 800875c <__gethex+0xb0>
 800873c:	b946      	cbnz	r6, 8008750 <__gethex+0xa4>
 800873e:	1c6e      	adds	r6, r5, #1
 8008740:	4632      	mov	r2, r6
 8008742:	4615      	mov	r5, r2
 8008744:	7828      	ldrb	r0, [r5, #0]
 8008746:	3201      	adds	r2, #1
 8008748:	f7ff ff9b 	bl	8008682 <__hexdig_fun>
 800874c:	2800      	cmp	r0, #0
 800874e:	d1f8      	bne.n	8008742 <__gethex+0x96>
 8008750:	1b73      	subs	r3, r6, r5
 8008752:	009e      	lsls	r6, r3, #2
 8008754:	e004      	b.n	8008760 <__gethex+0xb4>
 8008756:	2400      	movs	r4, #0
 8008758:	4626      	mov	r6, r4
 800875a:	e7e1      	b.n	8008720 <__gethex+0x74>
 800875c:	2e00      	cmp	r6, #0
 800875e:	d1f7      	bne.n	8008750 <__gethex+0xa4>
 8008760:	782b      	ldrb	r3, [r5, #0]
 8008762:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008766:	2b50      	cmp	r3, #80	; 0x50
 8008768:	d13d      	bne.n	80087e6 <__gethex+0x13a>
 800876a:	786b      	ldrb	r3, [r5, #1]
 800876c:	2b2b      	cmp	r3, #43	; 0x2b
 800876e:	d02f      	beq.n	80087d0 <__gethex+0x124>
 8008770:	2b2d      	cmp	r3, #45	; 0x2d
 8008772:	d031      	beq.n	80087d8 <__gethex+0x12c>
 8008774:	f04f 0b00 	mov.w	fp, #0
 8008778:	1c69      	adds	r1, r5, #1
 800877a:	7808      	ldrb	r0, [r1, #0]
 800877c:	f7ff ff81 	bl	8008682 <__hexdig_fun>
 8008780:	1e42      	subs	r2, r0, #1
 8008782:	b2d2      	uxtb	r2, r2
 8008784:	2a18      	cmp	r2, #24
 8008786:	d82e      	bhi.n	80087e6 <__gethex+0x13a>
 8008788:	f1a0 0210 	sub.w	r2, r0, #16
 800878c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008790:	f7ff ff77 	bl	8008682 <__hexdig_fun>
 8008794:	f100 3cff 	add.w	ip, r0, #4294967295
 8008798:	fa5f fc8c 	uxtb.w	ip, ip
 800879c:	f1bc 0f18 	cmp.w	ip, #24
 80087a0:	d91d      	bls.n	80087de <__gethex+0x132>
 80087a2:	f1bb 0f00 	cmp.w	fp, #0
 80087a6:	d000      	beq.n	80087aa <__gethex+0xfe>
 80087a8:	4252      	negs	r2, r2
 80087aa:	4416      	add	r6, r2
 80087ac:	f8ca 1000 	str.w	r1, [sl]
 80087b0:	b1dc      	cbz	r4, 80087ea <__gethex+0x13e>
 80087b2:	9b01      	ldr	r3, [sp, #4]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	bf14      	ite	ne
 80087b8:	f04f 0800 	movne.w	r8, #0
 80087bc:	f04f 0806 	moveq.w	r8, #6
 80087c0:	4640      	mov	r0, r8
 80087c2:	b005      	add	sp, #20
 80087c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087c8:	4645      	mov	r5, r8
 80087ca:	4626      	mov	r6, r4
 80087cc:	2401      	movs	r4, #1
 80087ce:	e7c7      	b.n	8008760 <__gethex+0xb4>
 80087d0:	f04f 0b00 	mov.w	fp, #0
 80087d4:	1ca9      	adds	r1, r5, #2
 80087d6:	e7d0      	b.n	800877a <__gethex+0xce>
 80087d8:	f04f 0b01 	mov.w	fp, #1
 80087dc:	e7fa      	b.n	80087d4 <__gethex+0x128>
 80087de:	230a      	movs	r3, #10
 80087e0:	fb03 0002 	mla	r0, r3, r2, r0
 80087e4:	e7d0      	b.n	8008788 <__gethex+0xdc>
 80087e6:	4629      	mov	r1, r5
 80087e8:	e7e0      	b.n	80087ac <__gethex+0x100>
 80087ea:	4621      	mov	r1, r4
 80087ec:	eba5 0308 	sub.w	r3, r5, r8
 80087f0:	3b01      	subs	r3, #1
 80087f2:	2b07      	cmp	r3, #7
 80087f4:	dc0a      	bgt.n	800880c <__gethex+0x160>
 80087f6:	4648      	mov	r0, r9
 80087f8:	f7fe f932 	bl	8006a60 <_Balloc>
 80087fc:	4604      	mov	r4, r0
 80087fe:	b940      	cbnz	r0, 8008812 <__gethex+0x166>
 8008800:	4602      	mov	r2, r0
 8008802:	21e4      	movs	r1, #228	; 0xe4
 8008804:	4b61      	ldr	r3, [pc, #388]	; (800898c <__gethex+0x2e0>)
 8008806:	4862      	ldr	r0, [pc, #392]	; (8008990 <__gethex+0x2e4>)
 8008808:	f7ff feb6 	bl	8008578 <__assert_func>
 800880c:	3101      	adds	r1, #1
 800880e:	105b      	asrs	r3, r3, #1
 8008810:	e7ef      	b.n	80087f2 <__gethex+0x146>
 8008812:	2300      	movs	r3, #0
 8008814:	469b      	mov	fp, r3
 8008816:	f100 0a14 	add.w	sl, r0, #20
 800881a:	f8cd a004 	str.w	sl, [sp, #4]
 800881e:	45a8      	cmp	r8, r5
 8008820:	d344      	bcc.n	80088ac <__gethex+0x200>
 8008822:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008826:	4658      	mov	r0, fp
 8008828:	f848 bb04 	str.w	fp, [r8], #4
 800882c:	eba8 080a 	sub.w	r8, r8, sl
 8008830:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8008834:	6122      	str	r2, [r4, #16]
 8008836:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800883a:	f7fe fa03 	bl	8006c44 <__hi0bits>
 800883e:	683d      	ldr	r5, [r7, #0]
 8008840:	eba8 0800 	sub.w	r8, r8, r0
 8008844:	45a8      	cmp	r8, r5
 8008846:	dd59      	ble.n	80088fc <__gethex+0x250>
 8008848:	eba8 0805 	sub.w	r8, r8, r5
 800884c:	4641      	mov	r1, r8
 800884e:	4620      	mov	r0, r4
 8008850:	f7fe fd81 	bl	8007356 <__any_on>
 8008854:	4683      	mov	fp, r0
 8008856:	b1b8      	cbz	r0, 8008888 <__gethex+0x1dc>
 8008858:	f04f 0b01 	mov.w	fp, #1
 800885c:	f108 33ff 	add.w	r3, r8, #4294967295
 8008860:	1159      	asrs	r1, r3, #5
 8008862:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008866:	f003 021f 	and.w	r2, r3, #31
 800886a:	fa0b f202 	lsl.w	r2, fp, r2
 800886e:	420a      	tst	r2, r1
 8008870:	d00a      	beq.n	8008888 <__gethex+0x1dc>
 8008872:	455b      	cmp	r3, fp
 8008874:	dd06      	ble.n	8008884 <__gethex+0x1d8>
 8008876:	4620      	mov	r0, r4
 8008878:	f1a8 0102 	sub.w	r1, r8, #2
 800887c:	f7fe fd6b 	bl	8007356 <__any_on>
 8008880:	2800      	cmp	r0, #0
 8008882:	d138      	bne.n	80088f6 <__gethex+0x24a>
 8008884:	f04f 0b02 	mov.w	fp, #2
 8008888:	4641      	mov	r1, r8
 800888a:	4620      	mov	r0, r4
 800888c:	f7ff fea6 	bl	80085dc <rshift>
 8008890:	4446      	add	r6, r8
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	42b3      	cmp	r3, r6
 8008896:	da41      	bge.n	800891c <__gethex+0x270>
 8008898:	4621      	mov	r1, r4
 800889a:	4648      	mov	r0, r9
 800889c:	f7fe f920 	bl	8006ae0 <_Bfree>
 80088a0:	2300      	movs	r3, #0
 80088a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088a4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80088a8:	6013      	str	r3, [r2, #0]
 80088aa:	e789      	b.n	80087c0 <__gethex+0x114>
 80088ac:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80088b0:	2a2e      	cmp	r2, #46	; 0x2e
 80088b2:	d014      	beq.n	80088de <__gethex+0x232>
 80088b4:	2b20      	cmp	r3, #32
 80088b6:	d106      	bne.n	80088c6 <__gethex+0x21a>
 80088b8:	9b01      	ldr	r3, [sp, #4]
 80088ba:	f843 bb04 	str.w	fp, [r3], #4
 80088be:	f04f 0b00 	mov.w	fp, #0
 80088c2:	9301      	str	r3, [sp, #4]
 80088c4:	465b      	mov	r3, fp
 80088c6:	7828      	ldrb	r0, [r5, #0]
 80088c8:	9303      	str	r3, [sp, #12]
 80088ca:	f7ff feda 	bl	8008682 <__hexdig_fun>
 80088ce:	9b03      	ldr	r3, [sp, #12]
 80088d0:	f000 000f 	and.w	r0, r0, #15
 80088d4:	4098      	lsls	r0, r3
 80088d6:	ea4b 0b00 	orr.w	fp, fp, r0
 80088da:	3304      	adds	r3, #4
 80088dc:	e79f      	b.n	800881e <__gethex+0x172>
 80088de:	45a8      	cmp	r8, r5
 80088e0:	d8e8      	bhi.n	80088b4 <__gethex+0x208>
 80088e2:	2201      	movs	r2, #1
 80088e4:	4628      	mov	r0, r5
 80088e6:	4928      	ldr	r1, [pc, #160]	; (8008988 <__gethex+0x2dc>)
 80088e8:	9303      	str	r3, [sp, #12]
 80088ea:	f7ff fe0f 	bl	800850c <strncmp>
 80088ee:	9b03      	ldr	r3, [sp, #12]
 80088f0:	2800      	cmp	r0, #0
 80088f2:	d1df      	bne.n	80088b4 <__gethex+0x208>
 80088f4:	e793      	b.n	800881e <__gethex+0x172>
 80088f6:	f04f 0b03 	mov.w	fp, #3
 80088fa:	e7c5      	b.n	8008888 <__gethex+0x1dc>
 80088fc:	da0b      	bge.n	8008916 <__gethex+0x26a>
 80088fe:	eba5 0808 	sub.w	r8, r5, r8
 8008902:	4621      	mov	r1, r4
 8008904:	4642      	mov	r2, r8
 8008906:	4648      	mov	r0, r9
 8008908:	f7fe fb02 	bl	8006f10 <__lshift>
 800890c:	4604      	mov	r4, r0
 800890e:	eba6 0608 	sub.w	r6, r6, r8
 8008912:	f100 0a14 	add.w	sl, r0, #20
 8008916:	f04f 0b00 	mov.w	fp, #0
 800891a:	e7ba      	b.n	8008892 <__gethex+0x1e6>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	42b3      	cmp	r3, r6
 8008920:	dd74      	ble.n	8008a0c <__gethex+0x360>
 8008922:	1b9e      	subs	r6, r3, r6
 8008924:	42b5      	cmp	r5, r6
 8008926:	dc35      	bgt.n	8008994 <__gethex+0x2e8>
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2b02      	cmp	r3, #2
 800892c:	d023      	beq.n	8008976 <__gethex+0x2ca>
 800892e:	2b03      	cmp	r3, #3
 8008930:	d025      	beq.n	800897e <__gethex+0x2d2>
 8008932:	2b01      	cmp	r3, #1
 8008934:	d115      	bne.n	8008962 <__gethex+0x2b6>
 8008936:	42b5      	cmp	r5, r6
 8008938:	d113      	bne.n	8008962 <__gethex+0x2b6>
 800893a:	2d01      	cmp	r5, #1
 800893c:	d10b      	bne.n	8008956 <__gethex+0x2aa>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	9a02      	ldr	r2, [sp, #8]
 8008942:	f04f 0862 	mov.w	r8, #98	; 0x62
 8008946:	6013      	str	r3, [r2, #0]
 8008948:	2301      	movs	r3, #1
 800894a:	6123      	str	r3, [r4, #16]
 800894c:	f8ca 3000 	str.w	r3, [sl]
 8008950:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008952:	601c      	str	r4, [r3, #0]
 8008954:	e734      	b.n	80087c0 <__gethex+0x114>
 8008956:	4620      	mov	r0, r4
 8008958:	1e69      	subs	r1, r5, #1
 800895a:	f7fe fcfc 	bl	8007356 <__any_on>
 800895e:	2800      	cmp	r0, #0
 8008960:	d1ed      	bne.n	800893e <__gethex+0x292>
 8008962:	4621      	mov	r1, r4
 8008964:	4648      	mov	r0, r9
 8008966:	f7fe f8bb 	bl	8006ae0 <_Bfree>
 800896a:	2300      	movs	r3, #0
 800896c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800896e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8008972:	6013      	str	r3, [r2, #0]
 8008974:	e724      	b.n	80087c0 <__gethex+0x114>
 8008976:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008978:	2b00      	cmp	r3, #0
 800897a:	d1f2      	bne.n	8008962 <__gethex+0x2b6>
 800897c:	e7df      	b.n	800893e <__gethex+0x292>
 800897e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008980:	2b00      	cmp	r3, #0
 8008982:	d1dc      	bne.n	800893e <__gethex+0x292>
 8008984:	e7ed      	b.n	8008962 <__gethex+0x2b6>
 8008986:	bf00      	nop
 8008988:	08009554 	.word	0x08009554
 800898c:	080093e7 	.word	0x080093e7
 8008990:	080096fe 	.word	0x080096fe
 8008994:	f106 38ff 	add.w	r8, r6, #4294967295
 8008998:	f1bb 0f00 	cmp.w	fp, #0
 800899c:	d133      	bne.n	8008a06 <__gethex+0x35a>
 800899e:	f1b8 0f00 	cmp.w	r8, #0
 80089a2:	d004      	beq.n	80089ae <__gethex+0x302>
 80089a4:	4641      	mov	r1, r8
 80089a6:	4620      	mov	r0, r4
 80089a8:	f7fe fcd5 	bl	8007356 <__any_on>
 80089ac:	4683      	mov	fp, r0
 80089ae:	2301      	movs	r3, #1
 80089b0:	ea4f 1268 	mov.w	r2, r8, asr #5
 80089b4:	f008 081f 	and.w	r8, r8, #31
 80089b8:	fa03 f308 	lsl.w	r3, r3, r8
 80089bc:	f04f 0802 	mov.w	r8, #2
 80089c0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80089c4:	4631      	mov	r1, r6
 80089c6:	4213      	tst	r3, r2
 80089c8:	4620      	mov	r0, r4
 80089ca:	bf18      	it	ne
 80089cc:	f04b 0b02 	orrne.w	fp, fp, #2
 80089d0:	1bad      	subs	r5, r5, r6
 80089d2:	f7ff fe03 	bl	80085dc <rshift>
 80089d6:	687e      	ldr	r6, [r7, #4]
 80089d8:	f1bb 0f00 	cmp.w	fp, #0
 80089dc:	d04a      	beq.n	8008a74 <__gethex+0x3c8>
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d016      	beq.n	8008a12 <__gethex+0x366>
 80089e4:	2b03      	cmp	r3, #3
 80089e6:	d018      	beq.n	8008a1a <__gethex+0x36e>
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d109      	bne.n	8008a00 <__gethex+0x354>
 80089ec:	f01b 0f02 	tst.w	fp, #2
 80089f0:	d006      	beq.n	8008a00 <__gethex+0x354>
 80089f2:	f8da 3000 	ldr.w	r3, [sl]
 80089f6:	ea4b 0b03 	orr.w	fp, fp, r3
 80089fa:	f01b 0f01 	tst.w	fp, #1
 80089fe:	d10f      	bne.n	8008a20 <__gethex+0x374>
 8008a00:	f048 0810 	orr.w	r8, r8, #16
 8008a04:	e036      	b.n	8008a74 <__gethex+0x3c8>
 8008a06:	f04f 0b01 	mov.w	fp, #1
 8008a0a:	e7d0      	b.n	80089ae <__gethex+0x302>
 8008a0c:	f04f 0801 	mov.w	r8, #1
 8008a10:	e7e2      	b.n	80089d8 <__gethex+0x32c>
 8008a12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a14:	f1c3 0301 	rsb	r3, r3, #1
 8008a18:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d0ef      	beq.n	8008a00 <__gethex+0x354>
 8008a20:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008a24:	f104 0214 	add.w	r2, r4, #20
 8008a28:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8008a2c:	9301      	str	r3, [sp, #4]
 8008a2e:	2300      	movs	r3, #0
 8008a30:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8008a34:	4694      	mov	ip, r2
 8008a36:	f852 1b04 	ldr.w	r1, [r2], #4
 8008a3a:	f1b1 3fff 	cmp.w	r1, #4294967295
 8008a3e:	d01e      	beq.n	8008a7e <__gethex+0x3d2>
 8008a40:	3101      	adds	r1, #1
 8008a42:	f8cc 1000 	str.w	r1, [ip]
 8008a46:	f1b8 0f02 	cmp.w	r8, #2
 8008a4a:	f104 0214 	add.w	r2, r4, #20
 8008a4e:	d13d      	bne.n	8008acc <__gethex+0x420>
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	3b01      	subs	r3, #1
 8008a54:	42ab      	cmp	r3, r5
 8008a56:	d10b      	bne.n	8008a70 <__gethex+0x3c4>
 8008a58:	2301      	movs	r3, #1
 8008a5a:	1169      	asrs	r1, r5, #5
 8008a5c:	f005 051f 	and.w	r5, r5, #31
 8008a60:	fa03 f505 	lsl.w	r5, r3, r5
 8008a64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008a68:	421d      	tst	r5, r3
 8008a6a:	bf18      	it	ne
 8008a6c:	f04f 0801 	movne.w	r8, #1
 8008a70:	f048 0820 	orr.w	r8, r8, #32
 8008a74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a76:	601c      	str	r4, [r3, #0]
 8008a78:	9b02      	ldr	r3, [sp, #8]
 8008a7a:	601e      	str	r6, [r3, #0]
 8008a7c:	e6a0      	b.n	80087c0 <__gethex+0x114>
 8008a7e:	4290      	cmp	r0, r2
 8008a80:	f842 3c04 	str.w	r3, [r2, #-4]
 8008a84:	d8d6      	bhi.n	8008a34 <__gethex+0x388>
 8008a86:	68a2      	ldr	r2, [r4, #8]
 8008a88:	4593      	cmp	fp, r2
 8008a8a:	db17      	blt.n	8008abc <__gethex+0x410>
 8008a8c:	6861      	ldr	r1, [r4, #4]
 8008a8e:	4648      	mov	r0, r9
 8008a90:	3101      	adds	r1, #1
 8008a92:	f7fd ffe5 	bl	8006a60 <_Balloc>
 8008a96:	4682      	mov	sl, r0
 8008a98:	b918      	cbnz	r0, 8008aa2 <__gethex+0x3f6>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	2184      	movs	r1, #132	; 0x84
 8008a9e:	4b1a      	ldr	r3, [pc, #104]	; (8008b08 <__gethex+0x45c>)
 8008aa0:	e6b1      	b.n	8008806 <__gethex+0x15a>
 8008aa2:	6922      	ldr	r2, [r4, #16]
 8008aa4:	f104 010c 	add.w	r1, r4, #12
 8008aa8:	3202      	adds	r2, #2
 8008aaa:	0092      	lsls	r2, r2, #2
 8008aac:	300c      	adds	r0, #12
 8008aae:	f7ff fd4f 	bl	8008550 <memcpy>
 8008ab2:	4621      	mov	r1, r4
 8008ab4:	4648      	mov	r0, r9
 8008ab6:	f7fe f813 	bl	8006ae0 <_Bfree>
 8008aba:	4654      	mov	r4, sl
 8008abc:	6922      	ldr	r2, [r4, #16]
 8008abe:	1c51      	adds	r1, r2, #1
 8008ac0:	6121      	str	r1, [r4, #16]
 8008ac2:	2101      	movs	r1, #1
 8008ac4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008ac8:	6151      	str	r1, [r2, #20]
 8008aca:	e7bc      	b.n	8008a46 <__gethex+0x39a>
 8008acc:	6921      	ldr	r1, [r4, #16]
 8008ace:	4559      	cmp	r1, fp
 8008ad0:	dd0b      	ble.n	8008aea <__gethex+0x43e>
 8008ad2:	2101      	movs	r1, #1
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	f7ff fd81 	bl	80085dc <rshift>
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	3601      	adds	r6, #1
 8008ade:	42b3      	cmp	r3, r6
 8008ae0:	f6ff aeda 	blt.w	8008898 <__gethex+0x1ec>
 8008ae4:	f04f 0801 	mov.w	r8, #1
 8008ae8:	e7c2      	b.n	8008a70 <__gethex+0x3c4>
 8008aea:	f015 051f 	ands.w	r5, r5, #31
 8008aee:	d0f9      	beq.n	8008ae4 <__gethex+0x438>
 8008af0:	9b01      	ldr	r3, [sp, #4]
 8008af2:	f1c5 0520 	rsb	r5, r5, #32
 8008af6:	441a      	add	r2, r3
 8008af8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8008afc:	f7fe f8a2 	bl	8006c44 <__hi0bits>
 8008b00:	42a8      	cmp	r0, r5
 8008b02:	dbe6      	blt.n	8008ad2 <__gethex+0x426>
 8008b04:	e7ee      	b.n	8008ae4 <__gethex+0x438>
 8008b06:	bf00      	nop
 8008b08:	080093e7 	.word	0x080093e7

08008b0c <L_shift>:
 8008b0c:	f1c2 0208 	rsb	r2, r2, #8
 8008b10:	0092      	lsls	r2, r2, #2
 8008b12:	b570      	push	{r4, r5, r6, lr}
 8008b14:	f1c2 0620 	rsb	r6, r2, #32
 8008b18:	6843      	ldr	r3, [r0, #4]
 8008b1a:	6804      	ldr	r4, [r0, #0]
 8008b1c:	fa03 f506 	lsl.w	r5, r3, r6
 8008b20:	432c      	orrs	r4, r5
 8008b22:	40d3      	lsrs	r3, r2
 8008b24:	6004      	str	r4, [r0, #0]
 8008b26:	f840 3f04 	str.w	r3, [r0, #4]!
 8008b2a:	4288      	cmp	r0, r1
 8008b2c:	d3f4      	bcc.n	8008b18 <L_shift+0xc>
 8008b2e:	bd70      	pop	{r4, r5, r6, pc}

08008b30 <__match>:
 8008b30:	b530      	push	{r4, r5, lr}
 8008b32:	6803      	ldr	r3, [r0, #0]
 8008b34:	3301      	adds	r3, #1
 8008b36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b3a:	b914      	cbnz	r4, 8008b42 <__match+0x12>
 8008b3c:	6003      	str	r3, [r0, #0]
 8008b3e:	2001      	movs	r0, #1
 8008b40:	bd30      	pop	{r4, r5, pc}
 8008b42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b46:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008b4a:	2d19      	cmp	r5, #25
 8008b4c:	bf98      	it	ls
 8008b4e:	3220      	addls	r2, #32
 8008b50:	42a2      	cmp	r2, r4
 8008b52:	d0f0      	beq.n	8008b36 <__match+0x6>
 8008b54:	2000      	movs	r0, #0
 8008b56:	e7f3      	b.n	8008b40 <__match+0x10>

08008b58 <__hexnan>:
 8008b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b5c:	2500      	movs	r5, #0
 8008b5e:	680b      	ldr	r3, [r1, #0]
 8008b60:	4682      	mov	sl, r0
 8008b62:	115e      	asrs	r6, r3, #5
 8008b64:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008b68:	f013 031f 	ands.w	r3, r3, #31
 8008b6c:	bf18      	it	ne
 8008b6e:	3604      	addne	r6, #4
 8008b70:	1f37      	subs	r7, r6, #4
 8008b72:	4690      	mov	r8, r2
 8008b74:	46b9      	mov	r9, r7
 8008b76:	463c      	mov	r4, r7
 8008b78:	46ab      	mov	fp, r5
 8008b7a:	b087      	sub	sp, #28
 8008b7c:	6801      	ldr	r1, [r0, #0]
 8008b7e:	9301      	str	r3, [sp, #4]
 8008b80:	f846 5c04 	str.w	r5, [r6, #-4]
 8008b84:	9502      	str	r5, [sp, #8]
 8008b86:	784a      	ldrb	r2, [r1, #1]
 8008b88:	1c4b      	adds	r3, r1, #1
 8008b8a:	9303      	str	r3, [sp, #12]
 8008b8c:	b342      	cbz	r2, 8008be0 <__hexnan+0x88>
 8008b8e:	4610      	mov	r0, r2
 8008b90:	9105      	str	r1, [sp, #20]
 8008b92:	9204      	str	r2, [sp, #16]
 8008b94:	f7ff fd75 	bl	8008682 <__hexdig_fun>
 8008b98:	2800      	cmp	r0, #0
 8008b9a:	d14f      	bne.n	8008c3c <__hexnan+0xe4>
 8008b9c:	9a04      	ldr	r2, [sp, #16]
 8008b9e:	9905      	ldr	r1, [sp, #20]
 8008ba0:	2a20      	cmp	r2, #32
 8008ba2:	d818      	bhi.n	8008bd6 <__hexnan+0x7e>
 8008ba4:	9b02      	ldr	r3, [sp, #8]
 8008ba6:	459b      	cmp	fp, r3
 8008ba8:	dd13      	ble.n	8008bd2 <__hexnan+0x7a>
 8008baa:	454c      	cmp	r4, r9
 8008bac:	d206      	bcs.n	8008bbc <__hexnan+0x64>
 8008bae:	2d07      	cmp	r5, #7
 8008bb0:	dc04      	bgt.n	8008bbc <__hexnan+0x64>
 8008bb2:	462a      	mov	r2, r5
 8008bb4:	4649      	mov	r1, r9
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	f7ff ffa8 	bl	8008b0c <L_shift>
 8008bbc:	4544      	cmp	r4, r8
 8008bbe:	d950      	bls.n	8008c62 <__hexnan+0x10a>
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	f1a4 0904 	sub.w	r9, r4, #4
 8008bc6:	f844 3c04 	str.w	r3, [r4, #-4]
 8008bca:	461d      	mov	r5, r3
 8008bcc:	464c      	mov	r4, r9
 8008bce:	f8cd b008 	str.w	fp, [sp, #8]
 8008bd2:	9903      	ldr	r1, [sp, #12]
 8008bd4:	e7d7      	b.n	8008b86 <__hexnan+0x2e>
 8008bd6:	2a29      	cmp	r2, #41	; 0x29
 8008bd8:	d155      	bne.n	8008c86 <__hexnan+0x12e>
 8008bda:	3102      	adds	r1, #2
 8008bdc:	f8ca 1000 	str.w	r1, [sl]
 8008be0:	f1bb 0f00 	cmp.w	fp, #0
 8008be4:	d04f      	beq.n	8008c86 <__hexnan+0x12e>
 8008be6:	454c      	cmp	r4, r9
 8008be8:	d206      	bcs.n	8008bf8 <__hexnan+0xa0>
 8008bea:	2d07      	cmp	r5, #7
 8008bec:	dc04      	bgt.n	8008bf8 <__hexnan+0xa0>
 8008bee:	462a      	mov	r2, r5
 8008bf0:	4649      	mov	r1, r9
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	f7ff ff8a 	bl	8008b0c <L_shift>
 8008bf8:	4544      	cmp	r4, r8
 8008bfa:	d934      	bls.n	8008c66 <__hexnan+0x10e>
 8008bfc:	4623      	mov	r3, r4
 8008bfe:	f1a8 0204 	sub.w	r2, r8, #4
 8008c02:	f853 1b04 	ldr.w	r1, [r3], #4
 8008c06:	429f      	cmp	r7, r3
 8008c08:	f842 1f04 	str.w	r1, [r2, #4]!
 8008c0c:	d2f9      	bcs.n	8008c02 <__hexnan+0xaa>
 8008c0e:	1b3b      	subs	r3, r7, r4
 8008c10:	f023 0303 	bic.w	r3, r3, #3
 8008c14:	3304      	adds	r3, #4
 8008c16:	3e03      	subs	r6, #3
 8008c18:	3401      	adds	r4, #1
 8008c1a:	42a6      	cmp	r6, r4
 8008c1c:	bf38      	it	cc
 8008c1e:	2304      	movcc	r3, #4
 8008c20:	2200      	movs	r2, #0
 8008c22:	4443      	add	r3, r8
 8008c24:	f843 2b04 	str.w	r2, [r3], #4
 8008c28:	429f      	cmp	r7, r3
 8008c2a:	d2fb      	bcs.n	8008c24 <__hexnan+0xcc>
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	b91b      	cbnz	r3, 8008c38 <__hexnan+0xe0>
 8008c30:	4547      	cmp	r7, r8
 8008c32:	d126      	bne.n	8008c82 <__hexnan+0x12a>
 8008c34:	2301      	movs	r3, #1
 8008c36:	603b      	str	r3, [r7, #0]
 8008c38:	2005      	movs	r0, #5
 8008c3a:	e025      	b.n	8008c88 <__hexnan+0x130>
 8008c3c:	3501      	adds	r5, #1
 8008c3e:	2d08      	cmp	r5, #8
 8008c40:	f10b 0b01 	add.w	fp, fp, #1
 8008c44:	dd06      	ble.n	8008c54 <__hexnan+0xfc>
 8008c46:	4544      	cmp	r4, r8
 8008c48:	d9c3      	bls.n	8008bd2 <__hexnan+0x7a>
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	2501      	movs	r5, #1
 8008c4e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008c52:	3c04      	subs	r4, #4
 8008c54:	6822      	ldr	r2, [r4, #0]
 8008c56:	f000 000f 	and.w	r0, r0, #15
 8008c5a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008c5e:	6020      	str	r0, [r4, #0]
 8008c60:	e7b7      	b.n	8008bd2 <__hexnan+0x7a>
 8008c62:	2508      	movs	r5, #8
 8008c64:	e7b5      	b.n	8008bd2 <__hexnan+0x7a>
 8008c66:	9b01      	ldr	r3, [sp, #4]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d0df      	beq.n	8008c2c <__hexnan+0xd4>
 8008c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c70:	f1c3 0320 	rsb	r3, r3, #32
 8008c74:	40da      	lsrs	r2, r3
 8008c76:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008c7a:	4013      	ands	r3, r2
 8008c7c:	f846 3c04 	str.w	r3, [r6, #-4]
 8008c80:	e7d4      	b.n	8008c2c <__hexnan+0xd4>
 8008c82:	3f04      	subs	r7, #4
 8008c84:	e7d2      	b.n	8008c2c <__hexnan+0xd4>
 8008c86:	2004      	movs	r0, #4
 8008c88:	b007      	add	sp, #28
 8008c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008c8e <__ascii_mbtowc>:
 8008c8e:	b082      	sub	sp, #8
 8008c90:	b901      	cbnz	r1, 8008c94 <__ascii_mbtowc+0x6>
 8008c92:	a901      	add	r1, sp, #4
 8008c94:	b142      	cbz	r2, 8008ca8 <__ascii_mbtowc+0x1a>
 8008c96:	b14b      	cbz	r3, 8008cac <__ascii_mbtowc+0x1e>
 8008c98:	7813      	ldrb	r3, [r2, #0]
 8008c9a:	600b      	str	r3, [r1, #0]
 8008c9c:	7812      	ldrb	r2, [r2, #0]
 8008c9e:	1e10      	subs	r0, r2, #0
 8008ca0:	bf18      	it	ne
 8008ca2:	2001      	movne	r0, #1
 8008ca4:	b002      	add	sp, #8
 8008ca6:	4770      	bx	lr
 8008ca8:	4610      	mov	r0, r2
 8008caa:	e7fb      	b.n	8008ca4 <__ascii_mbtowc+0x16>
 8008cac:	f06f 0001 	mvn.w	r0, #1
 8008cb0:	e7f8      	b.n	8008ca4 <__ascii_mbtowc+0x16>

08008cb2 <_realloc_r>:
 8008cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb6:	4680      	mov	r8, r0
 8008cb8:	4614      	mov	r4, r2
 8008cba:	460e      	mov	r6, r1
 8008cbc:	b921      	cbnz	r1, 8008cc8 <_realloc_r+0x16>
 8008cbe:	4611      	mov	r1, r2
 8008cc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cc4:	f7fd be40 	b.w	8006948 <_malloc_r>
 8008cc8:	b92a      	cbnz	r2, 8008cd6 <_realloc_r+0x24>
 8008cca:	f7fd fdcd 	bl	8006868 <_free_r>
 8008cce:	4625      	mov	r5, r4
 8008cd0:	4628      	mov	r0, r5
 8008cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cd6:	f000 f842 	bl	8008d5e <_malloc_usable_size_r>
 8008cda:	4284      	cmp	r4, r0
 8008cdc:	4607      	mov	r7, r0
 8008cde:	d802      	bhi.n	8008ce6 <_realloc_r+0x34>
 8008ce0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008ce4:	d812      	bhi.n	8008d0c <_realloc_r+0x5a>
 8008ce6:	4621      	mov	r1, r4
 8008ce8:	4640      	mov	r0, r8
 8008cea:	f7fd fe2d 	bl	8006948 <_malloc_r>
 8008cee:	4605      	mov	r5, r0
 8008cf0:	2800      	cmp	r0, #0
 8008cf2:	d0ed      	beq.n	8008cd0 <_realloc_r+0x1e>
 8008cf4:	42bc      	cmp	r4, r7
 8008cf6:	4622      	mov	r2, r4
 8008cf8:	4631      	mov	r1, r6
 8008cfa:	bf28      	it	cs
 8008cfc:	463a      	movcs	r2, r7
 8008cfe:	f7ff fc27 	bl	8008550 <memcpy>
 8008d02:	4631      	mov	r1, r6
 8008d04:	4640      	mov	r0, r8
 8008d06:	f7fd fdaf 	bl	8006868 <_free_r>
 8008d0a:	e7e1      	b.n	8008cd0 <_realloc_r+0x1e>
 8008d0c:	4635      	mov	r5, r6
 8008d0e:	e7df      	b.n	8008cd0 <_realloc_r+0x1e>

08008d10 <__ascii_wctomb>:
 8008d10:	4603      	mov	r3, r0
 8008d12:	4608      	mov	r0, r1
 8008d14:	b141      	cbz	r1, 8008d28 <__ascii_wctomb+0x18>
 8008d16:	2aff      	cmp	r2, #255	; 0xff
 8008d18:	d904      	bls.n	8008d24 <__ascii_wctomb+0x14>
 8008d1a:	228a      	movs	r2, #138	; 0x8a
 8008d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d20:	601a      	str	r2, [r3, #0]
 8008d22:	4770      	bx	lr
 8008d24:	2001      	movs	r0, #1
 8008d26:	700a      	strb	r2, [r1, #0]
 8008d28:	4770      	bx	lr
	...

08008d2c <fiprintf>:
 8008d2c:	b40e      	push	{r1, r2, r3}
 8008d2e:	b503      	push	{r0, r1, lr}
 8008d30:	4601      	mov	r1, r0
 8008d32:	ab03      	add	r3, sp, #12
 8008d34:	4805      	ldr	r0, [pc, #20]	; (8008d4c <fiprintf+0x20>)
 8008d36:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d3a:	6800      	ldr	r0, [r0, #0]
 8008d3c:	9301      	str	r3, [sp, #4]
 8008d3e:	f000 f83d 	bl	8008dbc <_vfiprintf_r>
 8008d42:	b002      	add	sp, #8
 8008d44:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d48:	b003      	add	sp, #12
 8008d4a:	4770      	bx	lr
 8008d4c:	20000064 	.word	0x20000064

08008d50 <abort>:
 8008d50:	2006      	movs	r0, #6
 8008d52:	b508      	push	{r3, lr}
 8008d54:	f000 fa0a 	bl	800916c <raise>
 8008d58:	2001      	movs	r0, #1
 8008d5a:	f7f9 f9d4 	bl	8002106 <_exit>

08008d5e <_malloc_usable_size_r>:
 8008d5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d62:	1f18      	subs	r0, r3, #4
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	bfbc      	itt	lt
 8008d68:	580b      	ldrlt	r3, [r1, r0]
 8008d6a:	18c0      	addlt	r0, r0, r3
 8008d6c:	4770      	bx	lr

08008d6e <__sfputc_r>:
 8008d6e:	6893      	ldr	r3, [r2, #8]
 8008d70:	b410      	push	{r4}
 8008d72:	3b01      	subs	r3, #1
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	6093      	str	r3, [r2, #8]
 8008d78:	da07      	bge.n	8008d8a <__sfputc_r+0x1c>
 8008d7a:	6994      	ldr	r4, [r2, #24]
 8008d7c:	42a3      	cmp	r3, r4
 8008d7e:	db01      	blt.n	8008d84 <__sfputc_r+0x16>
 8008d80:	290a      	cmp	r1, #10
 8008d82:	d102      	bne.n	8008d8a <__sfputc_r+0x1c>
 8008d84:	bc10      	pop	{r4}
 8008d86:	f000 b933 	b.w	8008ff0 <__swbuf_r>
 8008d8a:	6813      	ldr	r3, [r2, #0]
 8008d8c:	1c58      	adds	r0, r3, #1
 8008d8e:	6010      	str	r0, [r2, #0]
 8008d90:	7019      	strb	r1, [r3, #0]
 8008d92:	4608      	mov	r0, r1
 8008d94:	bc10      	pop	{r4}
 8008d96:	4770      	bx	lr

08008d98 <__sfputs_r>:
 8008d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d9a:	4606      	mov	r6, r0
 8008d9c:	460f      	mov	r7, r1
 8008d9e:	4614      	mov	r4, r2
 8008da0:	18d5      	adds	r5, r2, r3
 8008da2:	42ac      	cmp	r4, r5
 8008da4:	d101      	bne.n	8008daa <__sfputs_r+0x12>
 8008da6:	2000      	movs	r0, #0
 8008da8:	e007      	b.n	8008dba <__sfputs_r+0x22>
 8008daa:	463a      	mov	r2, r7
 8008dac:	4630      	mov	r0, r6
 8008dae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008db2:	f7ff ffdc 	bl	8008d6e <__sfputc_r>
 8008db6:	1c43      	adds	r3, r0, #1
 8008db8:	d1f3      	bne.n	8008da2 <__sfputs_r+0xa>
 8008dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008dbc <_vfiprintf_r>:
 8008dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc0:	460d      	mov	r5, r1
 8008dc2:	4614      	mov	r4, r2
 8008dc4:	4698      	mov	r8, r3
 8008dc6:	4606      	mov	r6, r0
 8008dc8:	b09d      	sub	sp, #116	; 0x74
 8008dca:	b118      	cbz	r0, 8008dd4 <_vfiprintf_r+0x18>
 8008dcc:	6a03      	ldr	r3, [r0, #32]
 8008dce:	b90b      	cbnz	r3, 8008dd4 <_vfiprintf_r+0x18>
 8008dd0:	f7fc fda4 	bl	800591c <__sinit>
 8008dd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008dd6:	07d9      	lsls	r1, r3, #31
 8008dd8:	d405      	bmi.n	8008de6 <_vfiprintf_r+0x2a>
 8008dda:	89ab      	ldrh	r3, [r5, #12]
 8008ddc:	059a      	lsls	r2, r3, #22
 8008dde:	d402      	bmi.n	8008de6 <_vfiprintf_r+0x2a>
 8008de0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008de2:	f7fc febf 	bl	8005b64 <__retarget_lock_acquire_recursive>
 8008de6:	89ab      	ldrh	r3, [r5, #12]
 8008de8:	071b      	lsls	r3, r3, #28
 8008dea:	d501      	bpl.n	8008df0 <_vfiprintf_r+0x34>
 8008dec:	692b      	ldr	r3, [r5, #16]
 8008dee:	b99b      	cbnz	r3, 8008e18 <_vfiprintf_r+0x5c>
 8008df0:	4629      	mov	r1, r5
 8008df2:	4630      	mov	r0, r6
 8008df4:	f000 f93a 	bl	800906c <__swsetup_r>
 8008df8:	b170      	cbz	r0, 8008e18 <_vfiprintf_r+0x5c>
 8008dfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008dfc:	07dc      	lsls	r4, r3, #31
 8008dfe:	d504      	bpl.n	8008e0a <_vfiprintf_r+0x4e>
 8008e00:	f04f 30ff 	mov.w	r0, #4294967295
 8008e04:	b01d      	add	sp, #116	; 0x74
 8008e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e0a:	89ab      	ldrh	r3, [r5, #12]
 8008e0c:	0598      	lsls	r0, r3, #22
 8008e0e:	d4f7      	bmi.n	8008e00 <_vfiprintf_r+0x44>
 8008e10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e12:	f7fc fea8 	bl	8005b66 <__retarget_lock_release_recursive>
 8008e16:	e7f3      	b.n	8008e00 <_vfiprintf_r+0x44>
 8008e18:	2300      	movs	r3, #0
 8008e1a:	9309      	str	r3, [sp, #36]	; 0x24
 8008e1c:	2320      	movs	r3, #32
 8008e1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e22:	2330      	movs	r3, #48	; 0x30
 8008e24:	f04f 0901 	mov.w	r9, #1
 8008e28:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e2c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008fdc <_vfiprintf_r+0x220>
 8008e30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e34:	4623      	mov	r3, r4
 8008e36:	469a      	mov	sl, r3
 8008e38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e3c:	b10a      	cbz	r2, 8008e42 <_vfiprintf_r+0x86>
 8008e3e:	2a25      	cmp	r2, #37	; 0x25
 8008e40:	d1f9      	bne.n	8008e36 <_vfiprintf_r+0x7a>
 8008e42:	ebba 0b04 	subs.w	fp, sl, r4
 8008e46:	d00b      	beq.n	8008e60 <_vfiprintf_r+0xa4>
 8008e48:	465b      	mov	r3, fp
 8008e4a:	4622      	mov	r2, r4
 8008e4c:	4629      	mov	r1, r5
 8008e4e:	4630      	mov	r0, r6
 8008e50:	f7ff ffa2 	bl	8008d98 <__sfputs_r>
 8008e54:	3001      	adds	r0, #1
 8008e56:	f000 80a9 	beq.w	8008fac <_vfiprintf_r+0x1f0>
 8008e5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e5c:	445a      	add	r2, fp
 8008e5e:	9209      	str	r2, [sp, #36]	; 0x24
 8008e60:	f89a 3000 	ldrb.w	r3, [sl]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	f000 80a1 	beq.w	8008fac <_vfiprintf_r+0x1f0>
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e74:	f10a 0a01 	add.w	sl, sl, #1
 8008e78:	9304      	str	r3, [sp, #16]
 8008e7a:	9307      	str	r3, [sp, #28]
 8008e7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e80:	931a      	str	r3, [sp, #104]	; 0x68
 8008e82:	4654      	mov	r4, sl
 8008e84:	2205      	movs	r2, #5
 8008e86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e8a:	4854      	ldr	r0, [pc, #336]	; (8008fdc <_vfiprintf_r+0x220>)
 8008e8c:	f7fc fe6c 	bl	8005b68 <memchr>
 8008e90:	9a04      	ldr	r2, [sp, #16]
 8008e92:	b9d8      	cbnz	r0, 8008ecc <_vfiprintf_r+0x110>
 8008e94:	06d1      	lsls	r1, r2, #27
 8008e96:	bf44      	itt	mi
 8008e98:	2320      	movmi	r3, #32
 8008e9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e9e:	0713      	lsls	r3, r2, #28
 8008ea0:	bf44      	itt	mi
 8008ea2:	232b      	movmi	r3, #43	; 0x2b
 8008ea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ea8:	f89a 3000 	ldrb.w	r3, [sl]
 8008eac:	2b2a      	cmp	r3, #42	; 0x2a
 8008eae:	d015      	beq.n	8008edc <_vfiprintf_r+0x120>
 8008eb0:	4654      	mov	r4, sl
 8008eb2:	2000      	movs	r0, #0
 8008eb4:	f04f 0c0a 	mov.w	ip, #10
 8008eb8:	9a07      	ldr	r2, [sp, #28]
 8008eba:	4621      	mov	r1, r4
 8008ebc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ec0:	3b30      	subs	r3, #48	; 0x30
 8008ec2:	2b09      	cmp	r3, #9
 8008ec4:	d94d      	bls.n	8008f62 <_vfiprintf_r+0x1a6>
 8008ec6:	b1b0      	cbz	r0, 8008ef6 <_vfiprintf_r+0x13a>
 8008ec8:	9207      	str	r2, [sp, #28]
 8008eca:	e014      	b.n	8008ef6 <_vfiprintf_r+0x13a>
 8008ecc:	eba0 0308 	sub.w	r3, r0, r8
 8008ed0:	fa09 f303 	lsl.w	r3, r9, r3
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	46a2      	mov	sl, r4
 8008ed8:	9304      	str	r3, [sp, #16]
 8008eda:	e7d2      	b.n	8008e82 <_vfiprintf_r+0xc6>
 8008edc:	9b03      	ldr	r3, [sp, #12]
 8008ede:	1d19      	adds	r1, r3, #4
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	9103      	str	r1, [sp, #12]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	bfbb      	ittet	lt
 8008ee8:	425b      	neglt	r3, r3
 8008eea:	f042 0202 	orrlt.w	r2, r2, #2
 8008eee:	9307      	strge	r3, [sp, #28]
 8008ef0:	9307      	strlt	r3, [sp, #28]
 8008ef2:	bfb8      	it	lt
 8008ef4:	9204      	strlt	r2, [sp, #16]
 8008ef6:	7823      	ldrb	r3, [r4, #0]
 8008ef8:	2b2e      	cmp	r3, #46	; 0x2e
 8008efa:	d10c      	bne.n	8008f16 <_vfiprintf_r+0x15a>
 8008efc:	7863      	ldrb	r3, [r4, #1]
 8008efe:	2b2a      	cmp	r3, #42	; 0x2a
 8008f00:	d134      	bne.n	8008f6c <_vfiprintf_r+0x1b0>
 8008f02:	9b03      	ldr	r3, [sp, #12]
 8008f04:	3402      	adds	r4, #2
 8008f06:	1d1a      	adds	r2, r3, #4
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	9203      	str	r2, [sp, #12]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	bfb8      	it	lt
 8008f10:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f14:	9305      	str	r3, [sp, #20]
 8008f16:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008fe0 <_vfiprintf_r+0x224>
 8008f1a:	2203      	movs	r2, #3
 8008f1c:	4650      	mov	r0, sl
 8008f1e:	7821      	ldrb	r1, [r4, #0]
 8008f20:	f7fc fe22 	bl	8005b68 <memchr>
 8008f24:	b138      	cbz	r0, 8008f36 <_vfiprintf_r+0x17a>
 8008f26:	2240      	movs	r2, #64	; 0x40
 8008f28:	9b04      	ldr	r3, [sp, #16]
 8008f2a:	eba0 000a 	sub.w	r0, r0, sl
 8008f2e:	4082      	lsls	r2, r0
 8008f30:	4313      	orrs	r3, r2
 8008f32:	3401      	adds	r4, #1
 8008f34:	9304      	str	r3, [sp, #16]
 8008f36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f3a:	2206      	movs	r2, #6
 8008f3c:	4829      	ldr	r0, [pc, #164]	; (8008fe4 <_vfiprintf_r+0x228>)
 8008f3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f42:	f7fc fe11 	bl	8005b68 <memchr>
 8008f46:	2800      	cmp	r0, #0
 8008f48:	d03f      	beq.n	8008fca <_vfiprintf_r+0x20e>
 8008f4a:	4b27      	ldr	r3, [pc, #156]	; (8008fe8 <_vfiprintf_r+0x22c>)
 8008f4c:	bb1b      	cbnz	r3, 8008f96 <_vfiprintf_r+0x1da>
 8008f4e:	9b03      	ldr	r3, [sp, #12]
 8008f50:	3307      	adds	r3, #7
 8008f52:	f023 0307 	bic.w	r3, r3, #7
 8008f56:	3308      	adds	r3, #8
 8008f58:	9303      	str	r3, [sp, #12]
 8008f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f5c:	443b      	add	r3, r7
 8008f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f60:	e768      	b.n	8008e34 <_vfiprintf_r+0x78>
 8008f62:	460c      	mov	r4, r1
 8008f64:	2001      	movs	r0, #1
 8008f66:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f6a:	e7a6      	b.n	8008eba <_vfiprintf_r+0xfe>
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	f04f 0c0a 	mov.w	ip, #10
 8008f72:	4619      	mov	r1, r3
 8008f74:	3401      	adds	r4, #1
 8008f76:	9305      	str	r3, [sp, #20]
 8008f78:	4620      	mov	r0, r4
 8008f7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f7e:	3a30      	subs	r2, #48	; 0x30
 8008f80:	2a09      	cmp	r2, #9
 8008f82:	d903      	bls.n	8008f8c <_vfiprintf_r+0x1d0>
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d0c6      	beq.n	8008f16 <_vfiprintf_r+0x15a>
 8008f88:	9105      	str	r1, [sp, #20]
 8008f8a:	e7c4      	b.n	8008f16 <_vfiprintf_r+0x15a>
 8008f8c:	4604      	mov	r4, r0
 8008f8e:	2301      	movs	r3, #1
 8008f90:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f94:	e7f0      	b.n	8008f78 <_vfiprintf_r+0x1bc>
 8008f96:	ab03      	add	r3, sp, #12
 8008f98:	9300      	str	r3, [sp, #0]
 8008f9a:	462a      	mov	r2, r5
 8008f9c:	4630      	mov	r0, r6
 8008f9e:	4b13      	ldr	r3, [pc, #76]	; (8008fec <_vfiprintf_r+0x230>)
 8008fa0:	a904      	add	r1, sp, #16
 8008fa2:	f7fb fe71 	bl	8004c88 <_printf_float>
 8008fa6:	4607      	mov	r7, r0
 8008fa8:	1c78      	adds	r0, r7, #1
 8008faa:	d1d6      	bne.n	8008f5a <_vfiprintf_r+0x19e>
 8008fac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fae:	07d9      	lsls	r1, r3, #31
 8008fb0:	d405      	bmi.n	8008fbe <_vfiprintf_r+0x202>
 8008fb2:	89ab      	ldrh	r3, [r5, #12]
 8008fb4:	059a      	lsls	r2, r3, #22
 8008fb6:	d402      	bmi.n	8008fbe <_vfiprintf_r+0x202>
 8008fb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fba:	f7fc fdd4 	bl	8005b66 <__retarget_lock_release_recursive>
 8008fbe:	89ab      	ldrh	r3, [r5, #12]
 8008fc0:	065b      	lsls	r3, r3, #25
 8008fc2:	f53f af1d 	bmi.w	8008e00 <_vfiprintf_r+0x44>
 8008fc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fc8:	e71c      	b.n	8008e04 <_vfiprintf_r+0x48>
 8008fca:	ab03      	add	r3, sp, #12
 8008fcc:	9300      	str	r3, [sp, #0]
 8008fce:	462a      	mov	r2, r5
 8008fd0:	4630      	mov	r0, r6
 8008fd2:	4b06      	ldr	r3, [pc, #24]	; (8008fec <_vfiprintf_r+0x230>)
 8008fd4:	a904      	add	r1, sp, #16
 8008fd6:	f7fc f8f7 	bl	80051c8 <_printf_i>
 8008fda:	e7e4      	b.n	8008fa6 <_vfiprintf_r+0x1ea>
 8008fdc:	080096a9 	.word	0x080096a9
 8008fe0:	080096af 	.word	0x080096af
 8008fe4:	080096b3 	.word	0x080096b3
 8008fe8:	08004c89 	.word	0x08004c89
 8008fec:	08008d99 	.word	0x08008d99

08008ff0 <__swbuf_r>:
 8008ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ff2:	460e      	mov	r6, r1
 8008ff4:	4614      	mov	r4, r2
 8008ff6:	4605      	mov	r5, r0
 8008ff8:	b118      	cbz	r0, 8009002 <__swbuf_r+0x12>
 8008ffa:	6a03      	ldr	r3, [r0, #32]
 8008ffc:	b90b      	cbnz	r3, 8009002 <__swbuf_r+0x12>
 8008ffe:	f7fc fc8d 	bl	800591c <__sinit>
 8009002:	69a3      	ldr	r3, [r4, #24]
 8009004:	60a3      	str	r3, [r4, #8]
 8009006:	89a3      	ldrh	r3, [r4, #12]
 8009008:	071a      	lsls	r2, r3, #28
 800900a:	d525      	bpl.n	8009058 <__swbuf_r+0x68>
 800900c:	6923      	ldr	r3, [r4, #16]
 800900e:	b31b      	cbz	r3, 8009058 <__swbuf_r+0x68>
 8009010:	6823      	ldr	r3, [r4, #0]
 8009012:	6922      	ldr	r2, [r4, #16]
 8009014:	b2f6      	uxtb	r6, r6
 8009016:	1a98      	subs	r0, r3, r2
 8009018:	6963      	ldr	r3, [r4, #20]
 800901a:	4637      	mov	r7, r6
 800901c:	4283      	cmp	r3, r0
 800901e:	dc04      	bgt.n	800902a <__swbuf_r+0x3a>
 8009020:	4621      	mov	r1, r4
 8009022:	4628      	mov	r0, r5
 8009024:	f7ff fa30 	bl	8008488 <_fflush_r>
 8009028:	b9e0      	cbnz	r0, 8009064 <__swbuf_r+0x74>
 800902a:	68a3      	ldr	r3, [r4, #8]
 800902c:	3b01      	subs	r3, #1
 800902e:	60a3      	str	r3, [r4, #8]
 8009030:	6823      	ldr	r3, [r4, #0]
 8009032:	1c5a      	adds	r2, r3, #1
 8009034:	6022      	str	r2, [r4, #0]
 8009036:	701e      	strb	r6, [r3, #0]
 8009038:	6962      	ldr	r2, [r4, #20]
 800903a:	1c43      	adds	r3, r0, #1
 800903c:	429a      	cmp	r2, r3
 800903e:	d004      	beq.n	800904a <__swbuf_r+0x5a>
 8009040:	89a3      	ldrh	r3, [r4, #12]
 8009042:	07db      	lsls	r3, r3, #31
 8009044:	d506      	bpl.n	8009054 <__swbuf_r+0x64>
 8009046:	2e0a      	cmp	r6, #10
 8009048:	d104      	bne.n	8009054 <__swbuf_r+0x64>
 800904a:	4621      	mov	r1, r4
 800904c:	4628      	mov	r0, r5
 800904e:	f7ff fa1b 	bl	8008488 <_fflush_r>
 8009052:	b938      	cbnz	r0, 8009064 <__swbuf_r+0x74>
 8009054:	4638      	mov	r0, r7
 8009056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009058:	4621      	mov	r1, r4
 800905a:	4628      	mov	r0, r5
 800905c:	f000 f806 	bl	800906c <__swsetup_r>
 8009060:	2800      	cmp	r0, #0
 8009062:	d0d5      	beq.n	8009010 <__swbuf_r+0x20>
 8009064:	f04f 37ff 	mov.w	r7, #4294967295
 8009068:	e7f4      	b.n	8009054 <__swbuf_r+0x64>
	...

0800906c <__swsetup_r>:
 800906c:	b538      	push	{r3, r4, r5, lr}
 800906e:	4b2a      	ldr	r3, [pc, #168]	; (8009118 <__swsetup_r+0xac>)
 8009070:	4605      	mov	r5, r0
 8009072:	6818      	ldr	r0, [r3, #0]
 8009074:	460c      	mov	r4, r1
 8009076:	b118      	cbz	r0, 8009080 <__swsetup_r+0x14>
 8009078:	6a03      	ldr	r3, [r0, #32]
 800907a:	b90b      	cbnz	r3, 8009080 <__swsetup_r+0x14>
 800907c:	f7fc fc4e 	bl	800591c <__sinit>
 8009080:	89a3      	ldrh	r3, [r4, #12]
 8009082:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009086:	0718      	lsls	r0, r3, #28
 8009088:	d422      	bmi.n	80090d0 <__swsetup_r+0x64>
 800908a:	06d9      	lsls	r1, r3, #27
 800908c:	d407      	bmi.n	800909e <__swsetup_r+0x32>
 800908e:	2309      	movs	r3, #9
 8009090:	602b      	str	r3, [r5, #0]
 8009092:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009096:	f04f 30ff 	mov.w	r0, #4294967295
 800909a:	81a3      	strh	r3, [r4, #12]
 800909c:	e034      	b.n	8009108 <__swsetup_r+0x9c>
 800909e:	0758      	lsls	r0, r3, #29
 80090a0:	d512      	bpl.n	80090c8 <__swsetup_r+0x5c>
 80090a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090a4:	b141      	cbz	r1, 80090b8 <__swsetup_r+0x4c>
 80090a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090aa:	4299      	cmp	r1, r3
 80090ac:	d002      	beq.n	80090b4 <__swsetup_r+0x48>
 80090ae:	4628      	mov	r0, r5
 80090b0:	f7fd fbda 	bl	8006868 <_free_r>
 80090b4:	2300      	movs	r3, #0
 80090b6:	6363      	str	r3, [r4, #52]	; 0x34
 80090b8:	89a3      	ldrh	r3, [r4, #12]
 80090ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80090be:	81a3      	strh	r3, [r4, #12]
 80090c0:	2300      	movs	r3, #0
 80090c2:	6063      	str	r3, [r4, #4]
 80090c4:	6923      	ldr	r3, [r4, #16]
 80090c6:	6023      	str	r3, [r4, #0]
 80090c8:	89a3      	ldrh	r3, [r4, #12]
 80090ca:	f043 0308 	orr.w	r3, r3, #8
 80090ce:	81a3      	strh	r3, [r4, #12]
 80090d0:	6923      	ldr	r3, [r4, #16]
 80090d2:	b94b      	cbnz	r3, 80090e8 <__swsetup_r+0x7c>
 80090d4:	89a3      	ldrh	r3, [r4, #12]
 80090d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80090da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090de:	d003      	beq.n	80090e8 <__swsetup_r+0x7c>
 80090e0:	4621      	mov	r1, r4
 80090e2:	4628      	mov	r0, r5
 80090e4:	f000 f883 	bl	80091ee <__smakebuf_r>
 80090e8:	89a0      	ldrh	r0, [r4, #12]
 80090ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090ee:	f010 0301 	ands.w	r3, r0, #1
 80090f2:	d00a      	beq.n	800910a <__swsetup_r+0x9e>
 80090f4:	2300      	movs	r3, #0
 80090f6:	60a3      	str	r3, [r4, #8]
 80090f8:	6963      	ldr	r3, [r4, #20]
 80090fa:	425b      	negs	r3, r3
 80090fc:	61a3      	str	r3, [r4, #24]
 80090fe:	6923      	ldr	r3, [r4, #16]
 8009100:	b943      	cbnz	r3, 8009114 <__swsetup_r+0xa8>
 8009102:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009106:	d1c4      	bne.n	8009092 <__swsetup_r+0x26>
 8009108:	bd38      	pop	{r3, r4, r5, pc}
 800910a:	0781      	lsls	r1, r0, #30
 800910c:	bf58      	it	pl
 800910e:	6963      	ldrpl	r3, [r4, #20]
 8009110:	60a3      	str	r3, [r4, #8]
 8009112:	e7f4      	b.n	80090fe <__swsetup_r+0x92>
 8009114:	2000      	movs	r0, #0
 8009116:	e7f7      	b.n	8009108 <__swsetup_r+0x9c>
 8009118:	20000064 	.word	0x20000064

0800911c <_raise_r>:
 800911c:	291f      	cmp	r1, #31
 800911e:	b538      	push	{r3, r4, r5, lr}
 8009120:	4604      	mov	r4, r0
 8009122:	460d      	mov	r5, r1
 8009124:	d904      	bls.n	8009130 <_raise_r+0x14>
 8009126:	2316      	movs	r3, #22
 8009128:	6003      	str	r3, [r0, #0]
 800912a:	f04f 30ff 	mov.w	r0, #4294967295
 800912e:	bd38      	pop	{r3, r4, r5, pc}
 8009130:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009132:	b112      	cbz	r2, 800913a <_raise_r+0x1e>
 8009134:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009138:	b94b      	cbnz	r3, 800914e <_raise_r+0x32>
 800913a:	4620      	mov	r0, r4
 800913c:	f000 f830 	bl	80091a0 <_getpid_r>
 8009140:	462a      	mov	r2, r5
 8009142:	4601      	mov	r1, r0
 8009144:	4620      	mov	r0, r4
 8009146:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800914a:	f000 b817 	b.w	800917c <_kill_r>
 800914e:	2b01      	cmp	r3, #1
 8009150:	d00a      	beq.n	8009168 <_raise_r+0x4c>
 8009152:	1c59      	adds	r1, r3, #1
 8009154:	d103      	bne.n	800915e <_raise_r+0x42>
 8009156:	2316      	movs	r3, #22
 8009158:	6003      	str	r3, [r0, #0]
 800915a:	2001      	movs	r0, #1
 800915c:	e7e7      	b.n	800912e <_raise_r+0x12>
 800915e:	2400      	movs	r4, #0
 8009160:	4628      	mov	r0, r5
 8009162:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009166:	4798      	blx	r3
 8009168:	2000      	movs	r0, #0
 800916a:	e7e0      	b.n	800912e <_raise_r+0x12>

0800916c <raise>:
 800916c:	4b02      	ldr	r3, [pc, #8]	; (8009178 <raise+0xc>)
 800916e:	4601      	mov	r1, r0
 8009170:	6818      	ldr	r0, [r3, #0]
 8009172:	f7ff bfd3 	b.w	800911c <_raise_r>
 8009176:	bf00      	nop
 8009178:	20000064 	.word	0x20000064

0800917c <_kill_r>:
 800917c:	b538      	push	{r3, r4, r5, lr}
 800917e:	2300      	movs	r3, #0
 8009180:	4d06      	ldr	r5, [pc, #24]	; (800919c <_kill_r+0x20>)
 8009182:	4604      	mov	r4, r0
 8009184:	4608      	mov	r0, r1
 8009186:	4611      	mov	r1, r2
 8009188:	602b      	str	r3, [r5, #0]
 800918a:	f7f8 ffac 	bl	80020e6 <_kill>
 800918e:	1c43      	adds	r3, r0, #1
 8009190:	d102      	bne.n	8009198 <_kill_r+0x1c>
 8009192:	682b      	ldr	r3, [r5, #0]
 8009194:	b103      	cbz	r3, 8009198 <_kill_r+0x1c>
 8009196:	6023      	str	r3, [r4, #0]
 8009198:	bd38      	pop	{r3, r4, r5, pc}
 800919a:	bf00      	nop
 800919c:	200004b0 	.word	0x200004b0

080091a0 <_getpid_r>:
 80091a0:	f7f8 bf9a 	b.w	80020d8 <_getpid>

080091a4 <__swhatbuf_r>:
 80091a4:	b570      	push	{r4, r5, r6, lr}
 80091a6:	460c      	mov	r4, r1
 80091a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091ac:	4615      	mov	r5, r2
 80091ae:	2900      	cmp	r1, #0
 80091b0:	461e      	mov	r6, r3
 80091b2:	b096      	sub	sp, #88	; 0x58
 80091b4:	da0c      	bge.n	80091d0 <__swhatbuf_r+0x2c>
 80091b6:	89a3      	ldrh	r3, [r4, #12]
 80091b8:	2100      	movs	r1, #0
 80091ba:	f013 0f80 	tst.w	r3, #128	; 0x80
 80091be:	bf0c      	ite	eq
 80091c0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80091c4:	2340      	movne	r3, #64	; 0x40
 80091c6:	2000      	movs	r0, #0
 80091c8:	6031      	str	r1, [r6, #0]
 80091ca:	602b      	str	r3, [r5, #0]
 80091cc:	b016      	add	sp, #88	; 0x58
 80091ce:	bd70      	pop	{r4, r5, r6, pc}
 80091d0:	466a      	mov	r2, sp
 80091d2:	f000 f849 	bl	8009268 <_fstat_r>
 80091d6:	2800      	cmp	r0, #0
 80091d8:	dbed      	blt.n	80091b6 <__swhatbuf_r+0x12>
 80091da:	9901      	ldr	r1, [sp, #4]
 80091dc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80091e0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80091e4:	4259      	negs	r1, r3
 80091e6:	4159      	adcs	r1, r3
 80091e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091ec:	e7eb      	b.n	80091c6 <__swhatbuf_r+0x22>

080091ee <__smakebuf_r>:
 80091ee:	898b      	ldrh	r3, [r1, #12]
 80091f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80091f2:	079d      	lsls	r5, r3, #30
 80091f4:	4606      	mov	r6, r0
 80091f6:	460c      	mov	r4, r1
 80091f8:	d507      	bpl.n	800920a <__smakebuf_r+0x1c>
 80091fa:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80091fe:	6023      	str	r3, [r4, #0]
 8009200:	6123      	str	r3, [r4, #16]
 8009202:	2301      	movs	r3, #1
 8009204:	6163      	str	r3, [r4, #20]
 8009206:	b002      	add	sp, #8
 8009208:	bd70      	pop	{r4, r5, r6, pc}
 800920a:	466a      	mov	r2, sp
 800920c:	ab01      	add	r3, sp, #4
 800920e:	f7ff ffc9 	bl	80091a4 <__swhatbuf_r>
 8009212:	9900      	ldr	r1, [sp, #0]
 8009214:	4605      	mov	r5, r0
 8009216:	4630      	mov	r0, r6
 8009218:	f7fd fb96 	bl	8006948 <_malloc_r>
 800921c:	b948      	cbnz	r0, 8009232 <__smakebuf_r+0x44>
 800921e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009222:	059a      	lsls	r2, r3, #22
 8009224:	d4ef      	bmi.n	8009206 <__smakebuf_r+0x18>
 8009226:	f023 0303 	bic.w	r3, r3, #3
 800922a:	f043 0302 	orr.w	r3, r3, #2
 800922e:	81a3      	strh	r3, [r4, #12]
 8009230:	e7e3      	b.n	80091fa <__smakebuf_r+0xc>
 8009232:	89a3      	ldrh	r3, [r4, #12]
 8009234:	6020      	str	r0, [r4, #0]
 8009236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800923a:	81a3      	strh	r3, [r4, #12]
 800923c:	9b00      	ldr	r3, [sp, #0]
 800923e:	6120      	str	r0, [r4, #16]
 8009240:	6163      	str	r3, [r4, #20]
 8009242:	9b01      	ldr	r3, [sp, #4]
 8009244:	b15b      	cbz	r3, 800925e <__smakebuf_r+0x70>
 8009246:	4630      	mov	r0, r6
 8009248:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800924c:	f000 f81e 	bl	800928c <_isatty_r>
 8009250:	b128      	cbz	r0, 800925e <__smakebuf_r+0x70>
 8009252:	89a3      	ldrh	r3, [r4, #12]
 8009254:	f023 0303 	bic.w	r3, r3, #3
 8009258:	f043 0301 	orr.w	r3, r3, #1
 800925c:	81a3      	strh	r3, [r4, #12]
 800925e:	89a3      	ldrh	r3, [r4, #12]
 8009260:	431d      	orrs	r5, r3
 8009262:	81a5      	strh	r5, [r4, #12]
 8009264:	e7cf      	b.n	8009206 <__smakebuf_r+0x18>
	...

08009268 <_fstat_r>:
 8009268:	b538      	push	{r3, r4, r5, lr}
 800926a:	2300      	movs	r3, #0
 800926c:	4d06      	ldr	r5, [pc, #24]	; (8009288 <_fstat_r+0x20>)
 800926e:	4604      	mov	r4, r0
 8009270:	4608      	mov	r0, r1
 8009272:	4611      	mov	r1, r2
 8009274:	602b      	str	r3, [r5, #0]
 8009276:	f7f8 ff94 	bl	80021a2 <_fstat>
 800927a:	1c43      	adds	r3, r0, #1
 800927c:	d102      	bne.n	8009284 <_fstat_r+0x1c>
 800927e:	682b      	ldr	r3, [r5, #0]
 8009280:	b103      	cbz	r3, 8009284 <_fstat_r+0x1c>
 8009282:	6023      	str	r3, [r4, #0]
 8009284:	bd38      	pop	{r3, r4, r5, pc}
 8009286:	bf00      	nop
 8009288:	200004b0 	.word	0x200004b0

0800928c <_isatty_r>:
 800928c:	b538      	push	{r3, r4, r5, lr}
 800928e:	2300      	movs	r3, #0
 8009290:	4d05      	ldr	r5, [pc, #20]	; (80092a8 <_isatty_r+0x1c>)
 8009292:	4604      	mov	r4, r0
 8009294:	4608      	mov	r0, r1
 8009296:	602b      	str	r3, [r5, #0]
 8009298:	f7f8 ff92 	bl	80021c0 <_isatty>
 800929c:	1c43      	adds	r3, r0, #1
 800929e:	d102      	bne.n	80092a6 <_isatty_r+0x1a>
 80092a0:	682b      	ldr	r3, [r5, #0]
 80092a2:	b103      	cbz	r3, 80092a6 <_isatty_r+0x1a>
 80092a4:	6023      	str	r3, [r4, #0]
 80092a6:	bd38      	pop	{r3, r4, r5, pc}
 80092a8:	200004b0 	.word	0x200004b0

080092ac <_init>:
 80092ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ae:	bf00      	nop
 80092b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092b2:	bc08      	pop	{r3}
 80092b4:	469e      	mov	lr, r3
 80092b6:	4770      	bx	lr

080092b8 <_fini>:
 80092b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ba:	bf00      	nop
 80092bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092be:	bc08      	pop	{r3}
 80092c0:	469e      	mov	lr, r3
 80092c2:	4770      	bx	lr
